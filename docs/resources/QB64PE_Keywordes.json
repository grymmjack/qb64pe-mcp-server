{
  "keywords": {
    "_ACCEPTFILEDROP": "(statement) turns a program window into a valid drop destination for dragging files from Windows Explorer.",
    "_ACOS": "(function) arccosine function returns the angle in radians based on an input COSine value range from -1 to 1.",
    "_ACOSH": "(function) Returns the nonnegative arc hyperbolic cosine of x, expressed in radians.",
    "_ADLER32": "(function) Returns the Adler-32 checksum of any arbitrary string.",
    "_ALLOWFULLSCREEN": "(statement) allows setting the behavior of the ALT+ENTER combo.",
    "_ALPHA": "(function) returns the alpha channel transparency level of a color value used on a screen page or image.",
    "_ALPHA32": "(function) returns the alpha channel transparency level of a color value used on a 32 bit screen page or image.",
    "_ANDALSO": "(logical operator) performs short-circuiting logical conjunction on two expressions.",
    "_ARCCOT": "(function) is the inverse function of the cotangent.",
    "_ARCCSC": "(function) is the inverse function of the cosecant.",
    "_ARCSEC": "(function) is the inverse function of the secant.",
    "_ASIN": "(function) Returns the principal value of the arc sine of x, expressed in radians.",
    "_ASINH": "(function) Returns the arc hyperbolic sine of x, expressed in radians.",
    "_ASSERT": "(statement) Performs debug tests.",
    "$ASSERTS": "(metacommand) enables debug tests with the _ASSERT macro.",
    "_ATAN2": "(function) Returns the principal value of the arc tangent of y/x, expressed in radians.",
    "_ATANH": "(function) Returns the arc hyperbolic tangent of x, expressed in radians.",
    "_AUTODISPLAY": "(statement) enables the automatic display of the screen image changes previously disabled by _DISPLAY.",
    "_AUTODISPLAY (function)": "returns the current display mode as true (-1) if automatic or false (0) if per request using _DISPLAY.",
    "_AXIS": "(function) returns a SINGLE value between -1 and 1 indicating the maximum distance from the device axis center, 0.",
    "_BACKGROUNDCOLOR": "(function) returns the current background color for an image handle or page.",
    "_BASE64DECODE$": "(function) Decodes a Base64-encoded string.",
    "_BASE64ENCODE$": "(function) Encodes a string into Base64 format.",
    "_BIT": "(` numerical type) can return only signed values of 0 (bit off) and -1 (bit on). Unsigned 0 or 1.",
    "_BIN$": "(function) returns the binary (base 2) STRING representation of the INTEGER part of any value.",
    "_BLEND": "(statement) statement turns on 32 bit alpha blending for the current image or screen mode and is default.",
    "_BLEND (function)": "returns -1 if enabled or 0 if disabled by _DONTBLEND statement.",
    "_BLINK": "(statement) statement turns blinking colors on/off in SCREEN 0",
    "_BLINK (function)": "returns -1 if enabled or 0 if disabled by _BLINK statement.",
    "_BLUE": "(function) function returns the palette or the blue component intensity of a 32-bit image color.",
    "_BLUE32": "(function) returns the blue component intensity of a 32-bit color value.",
    "_BRIGHTNESS32": "(function) returns the brightness value (HSB colorspace) of a given 32-bit ARGB color.",
    "_BUTTON": "(function) returns -1 when a controller device button is pressed and 0 when button is released.",
    "_BUTTONCHANGE": "(function) returns -1 when a device button has been pressed and 1 when released. Zero indicates no change.",
    "_BYTE": "(%% numerical type) can hold signed values from -128 to 127 (one byte or _BIT * 8). Unsigned from 0 to 255.",
    "_CAPSLOCK (function)": "returns -1 when Caps Lock is on",
    "_CAPSLOCK": "(statement) sets Caps Lock key state",
    "_CAST": "(function) performs a C-like cast of a numerical value to a specified numerical type.",
    "$CHECKING": "(metacommand) turns event and error checking OFF or ON.",
    "_CEIL": "(function) Rounds x upward, returning the smallest integral value that is not less than x.",
    "_CINP": "(function) Returns a key code from $CONSOLE input",
    "_CLAMP": "(function) Forces the given numeric value into a specific range.",
    "_CLEARCOLOR (function)": "returns the current transparent color of an image.",
    "_CLEARCOLOR": "(statement) sets a specific color index of an image to be transparent",
    "_CLIP": "(PUT graphics option) allows placement of an image partially off of the screen.",
    "_CLIPBOARD$ (function)": "returns the operating system's clipboard contents as a STRING.",
    "_CLIPBOARD$": "(statement) sets and overwrites the STRING value in the operating system's clipboard.",
    "_CLIPBOARDIMAGE (function)": "pastes an image from the clipboard into a new QB64 image in memory.",
    "_CLIPBOARDIMAGE": "(statement) copies a valid QB64 image to the clipboard.",
    "$COLOR": "(metacommand) includes named color constants in a program.",
    "_COLORCHOOSERDIALOG": "(function) Displays a standard color picker dialog box and returns a 32-bit RGBA color selected by the user.",
    "_COMMANDCOUNT": "(function) returns the number of arguments passed to the compiled program from the command line.",
    "_CONNECTED": "(function) returns the status of a TCP/IP connection handle.",
    "_CONNECTIONADDRESS$": "(TCP/IP function) returns a connected user's STRING IP address value using the handle.",
    "$CONSOLE": "(metacommand) creates a console window that can be used throughout a program.",
    "_CONSOLE": "(statement) used to turn a console window OFF or ON or to designate _DEST _CONSOLE for output.",
    "_CONSOLEINPUT": "(function) fetches input data from a $CONSOLE window to be read later (both mouse and keyboard)",
    "_CONSOLECURSOR": "(statement) is used to switch the text cursor in Console Windows off/on or change its size.",
    "_CONSOLEFONT": "(statement) is used to change the text font used in Console Windows or change its size.",
    "_CONSOLETITLE": "(statement) creates the title of the console window using a literal or variable string.",
    "_CONTINUE": "(statement) skips the remaining lines in a control block (DO/LOOP, FOR/NEXT or WHILE/WEND)",
    "_CONTROLCHR": "(statement) OFF allows the control characters to be used as text characters. ON (default) can use them as commands.",
    "_CONTROLCHR (function)": "returns the current state of _CONTROLCHR as 1 when OFF and 0 when ON.",
    "_COPYIMAGE": "(function) copies an image handle value to a new designated handle.",
    "_COPYPALETTE": "(statement) copies the color palette intensities from one 4 or 8 BPP image to another image.",
    "_COT": "(function) the mathematical function cotangent defined by 1/TAN.",
    "_COTH": "(function) Returns the hyperbolic cotangent.",
    "_COSH": "(function) Returns the hyperbolic cosine of x radians.",
    "_CRC32": "(function) Returns the Crc-32 checksum of any arbitrary string.",
    "_CSC": "(function) the mathematical function cosecant defined by 1/SIN.",
    "_CSCH": "(function) Returns the hyperbolic cosecant.",
    "_CV": "(function) converts any _MK$ STRING value to the designated numerical type value.",
    "_CWD$": "(function) returns the current working directory as a STRING value.",
    "_D2G": "(function) converts degrees to gradient angle values.",
    "_D2R": "(function) converts degrees to radian angle values.",
    "$DEBUG": "(metacommand) enables debugging features, allowing you to step through your code line by line.",
    "_DECODEURL$": "(function) returns the decoded plain text URL of the given encoded URL.",
    "_DEFAULTCOLOR": "(function) returns the current default (text/drawing) color for an image handle or page.",
    "_DEFINE": "(statement) defines a range of variable names according to their first character as a data type.",
    "_DEFLATE$": "(function) Compresses a string.",
    "_DELAY": "(statement) suspends program execution for a SINGLE number of seconds.",
    "_DEPTHBUFFER": "(statement) enables, disables, locks or clears depth buffering.",
    "_DESKTOPHEIGHT": "(function) returns the height of the desktop (not program window).",
    "_DESKTOPWIDTH": "(function) returns the width of the desktop (not program window).",
    "_DEST": "(statement) sets the current write image or SCREEN page destination for prints or graphics.",
    "_DEST (function)": "returns the current destination screen page or image handle value.",
    "_DEVICE$": "(function) returns a STRING expression listing a designated numbered input device name and types of input.",
    "_DEVICEINPUT": "(function) returns the _DEVICES number of an _AXIS, _BUTTON or _WHEEL event.",
    "_DEVICES": "(function) returns the number of input devices found on a computer system including the keyboard and mouse.",
    "_DIR$": "(function) returns common paths in Windows only, like My Documents, My Pictures, My Music, Desktop.",
    "_DIREXISTS": "(function) returns -1 if the Directory folder name string parameter exists. Zero if it does not.",
    "_DISPLAY": "(statement) turns off the automatic display while only displaying the screen changes when called.",
    "_DISPLAY (function)": "returns the handle of the current image that is displayed on the screen.",
    "_DISPLAYORDER": "(statement) designates the order to render software, hardware and custom-opengl-code.",
    "_DONTBLEND": "(statement) statement turns off default _BLEND 32 bit alpha blending for the current image or screen.",
    "_DONTWAIT": "(SHELL action) specifies that the program should not wait until the shelled command/program is finished.",
    "_DROPPEDFILE": "(function) returns the list of items (files or folders) dropped in a program's window after _ACCEPTFILEDROP is enabled.",
    "_ECHO": "(statement) used in conjunction with $IF for the precompiler.",
    "$ELSE": "(metacommand) used in conjunction with $IF for the precompiler.",
    "$ELSEIF": "(metacommand) used in conjunction with $IF for the precompiler.",
    "$EMBED": "(metacommand) is used to embed any file's contents into the compiled executable.",
    "_EMBEDDED$": "(function) recalls the contents of a file embedded using $EMBED.",
    "$END IF": "(metacommand) used in conjunction with $IF for the precompiler.",
    "_ENCODEURL$": "(function) returns the so called percent encoded representation of the given URL.",
    "_ENVIRONCOUNT": "(function) returns the number of key/value pairs currently exist in the environment table.",
    "$ERROR": "(metacommand) used to trigger compiler errors from within the precompiling pass.",
    "_ERRORLINE": "(function) returns the source code line number that caused the most recent runtime error.",
    "_ERRORMESSAGE$": "(function) returns a human-readable message describing the most recent runtime error.",
    "$EXEICON": "(metacommand) used with a .ICO icon file name to embed the image into the QB64 executable.",
    "_EXIT (function)": "prevents a user exit and indicates if a user has clicked the close X window button or CTRL + BREAK.",
    "_FILEEXISTS": "(function) returns -1 if the file name string parameter exists. Zero if it does not.",
    "_FILES$": "(function) returns a file or directory name that matches the specified pattern.",
    "_FINISHDROP": "(statement) resets _TOTALDROPPEDFILES and clears the _DROPPEDFILE list of items (files/folders).",
    "_FLOAT": "(numerical type ##) offers the maximum floating-point decimal precision available using QB64.",
    "_FONT": "(statement) sets the current font handle to be used by PRINT or _PRINTSTRING.",
    "_FONT (function)": "creates a new font handle from a designated image handle.",
    "_FONTHEIGHT": "(function) returns the current text or font height.",
    "_FONTWIDTH": "(function) returns the current text or font width.",
    "$FORMAT": "(metacommand) controls the code formatting behavior in QB64-PE.",
    "_FREEFONT": "(statement) releases the current font handle from memory.",
    "_FREEIMAGE": "(statement) releases a designated image handle from memory.",
    "_FREETIMER": "(function) returns an unused timer number value to use with ON TIMER(n).",
    "_FULLPATH$": "(function) returns an absolute or full path name for the specified relative path name.",
    "_FULLSCREEN": "(statement) sets the program window to full screen or OFF. Alt + Enter does it manually.",
    "_FULLSCREEN (function)": "returns the fullscreen mode in use by the program.",
    "_G2D": "(function) converts gradient to degree angle values.",
    "_G2R": "(function) converts gradient to radian angle values.",
    "_GLRENDER": "(statement) sets whether context is displayed, on top of or behind the software rendering.",
    "_GREEN": "(function) function returns the palette or the green component intensity of a 32-bit image color.",
    "_GREEN32": "(function) returns the green component intensity of a 32-bit color value.",
    "_HEIGHT": "(function) returns the height of a designated image handle.",
    "_HIDE": "(SHELL action) hides the command line display during a shell.",
    "_HSB32": "(function) returns the 32-bit ARGB color value equivalent to the specified HSB colorspace values.",
    "_HSBA32": "(function) returns the 32-bit ARGB color value equivalent to the specified HSB colorspace values + alpha channel.",
    "_HUE32": "(function) returns the hue value (HSB colorspace) of a given 32-bit ARGB color.",
    "_HYPOT": "(function) Returns the hypotenuse of a right-angled triangle whose legs are x and y.",
    "$IF": "(metacommand) used to set an IF condition for the precompiler.",
    "_ICON": "(statement) designates a _LOADIMAGE image file handle to be used as the program's icon or loads the embedded icon (see $EXEICON).",
    "_IIF": "(function) provides conditional evaluations similar to a ternary operator, with short-circuiting behavior.",
    "_INCLERRORFILE$": "(function) returns the name of the original source code $INCLUDE module that caused the most recent error.",
    "_INCLERRORLINE": "(function) returns the line number in an included file that caused the most recent error.",
    "$INCLUDEONCE": "(metacommand) prevents that include file contents is injected multiple times into a program.",
    "_INFLATE$": "(function) Decompresses a string.",
    "_INPUTBOX$": "(function) displays a prompt in a dialog box, waits for the user to input text or click a button, and returns a string containing the contents of the text box.",
    "_INSTRREV": "(function) allows searching for a substring inside another string, but unlike INSTR it returns the last occurrence instead of the first one.",
    "_INTEGER64": "(&& numerical type) can hold whole numerical values from -9223372036854775808 to 9223372036854775807.",
    "_KEYCLEAR": "(statement) clears the keyboard buffers for INKEY$, _KEYHIT, and INP.",
    "_KEYHIT": "(function) returns ASCII one and two byte, SDL Virtual Key and Unicode keyboard key press codes.",
    "_KEYDOWN": "(function) returns whether CTRL, ALT, SHIFT, combinations and other keys are pressed.",
    "$LET": "(metacommand) used to set a variable for the precompiler.",
    "_LASTAXIS": "(function) returns the number of axis available on a specified number device listed by _DEVICE$.",
    "_LASTBUTTON": "(function) returns the number of buttons available on a specified number device listed by DEVICE$.",
    "_LASTWHEEL": "(function) returns the number of scroll wheels available on a specified number device listed by _DEVICE$.",
    "_LIMIT": "(statement) sets the loops per second rate to slow down loops and limit CPU usage.",
    "_LOADFONT": "(function) designates a font TTF file to load and returns a handle value.",
    "_LOADIMAGE": "(function) designates an image file to load and returns a handle value.",
    "_LOGERROR": "(statement) writes a log message at the Error level with an accompanying stacktrace.",
    "_LOGINFO": "(statement) writes a log message at the Information level.",
    "_LOGMINLEVEL": "(function) returns the current minimum logging level that is being output.",
    "_LOGTRACE": "(statement) writes a log message at the Trace level.",
    "_LOGWARN": "(statement) writes a log message at the Warning level.",
    "_MAPTRIANGLE": "(statement) maps a triangular image source area to put on a destination area.",
    "_MAPUNICODE": "(statement) maps a Unicode value to an ASCII code number.",
    "_MAPUNICODE (function)": "returns the Unicode (UTF32) code point value of a mapped ASCII character code.",
    "_MAX": "(function) Returns the greater of two given numeric values.",
    "_MD5$": "(function) Returns the MD5 hash value of any arbitrary string.",
    "_MEM (function)": "returns _MEM block referring to the largest continuous memory region beginning at a designated variable's offset.",
    "_MEM": "(variable type) contains read only dot elements for the OFFSET, SIZE, TYPE and ELEMENTSIZE of a block of memory.",
    "_MEMCOPY": "(statement) copies a value from a designated OFFSET and SIZE TO a block of memory at a designated OFFSET.",
    "_MEMELEMENT": "(function) returns a _MEM block referring to a variable's memory (but not past it).",
    "_MEMEXISTS": "(function) verifies that a memory block exists for a memory variable name or returns zero.",
    "_MEMFILL": "(statement) fills a designated memory block OFFSET with a certain SIZE and TYPE of value.",
    "_MEMFREE": "(statement) frees a designated memory block in a program. Only free memory blocks once.",
    "_MEMGET": "(statement) reads a value from a designated memory block at a designated OFFSET",
    "_MEMGET (function)": "returns a value from a designated memory block and OFFSET using a designated variable TYPE.",
    "_MEMIMAGE": "(function) returns a _MEM block referring to a designated image handle's memory",
    "_MEMNEW": "(function) allocates new memory with a designated SIZE and returns a _MEM block referring to it.",
    "_MEMPUT": "(statement) places a designated value into a designated memory block OFFSET",
    "_MEMSOUND": "(function) returns a _MEM block referring to a designated sound handle's memory",
    "_MESSAGEBOX (function)": "Displays a message dialog box, which presents a message and returns the button ID clicked by the user.",
    "_MESSAGEBOX": "(statement) Displays a message dialog box, which presents a message to the user.",
    "_MIDDLE": "(_SCREENMOVE parameter) centers the program window on the desktop in any screen resolution.",
    "_MIDISOUNDBANK": "enables _SNDOPEN to use external FM Banks or SoundFonts when playing MIDI files.",
    "$MIDISOUNDFONT": "(metacommand) (deprecated) enables the MIDI support for _SNDOPEN.",
    "_MIN": "(function) Returns the lesser of two given numeric values.",
    "_MK$": "(function) converts a numerical value to a designated ASCII STRING value.",
    "_MOUSEBUTTON": "(function) returns the status of a designated mouse button.",
    "_MOUSEHIDDEN": "(function) returns the current state of the mouse pointer.",
    "_MOUSEHIDE": "(statement) hides the mouse pointer from view",
    "_MOUSEINPUT": "(function) returns a value if the mouse status has changed since the last read.",
    "_MOUSEMOVE": "(statement) moves the mouse pointer to a designated position on the program SCREEN.",
    "_MOUSEMOVEMENTX": "(function) returns the relative horizontal position of the mouse cursor compared to the previous position.",
    "_MOUSEMOVEMENTY": "(function) returns the relative vertical position of the mouse cursor compared to the previous position.",
    "_MOUSESHOW": "(statement) displays the mouse cursor after it has been hidden or can change the cursor shape.",
    "_MOUSEWHEEL": "(function) returns the number of mouse scroll wheel \"clicks\" since last read.",
    "_MOUSEX": "(function) returns the current horizontal position of the mouse cursor.",
    "_MOUSEY": "(function) returns the current vertical position of the mouse cursor.",
    "_NEGATE": "(logical operator) returns True when a boolean evaluation is False and vice-versa.",
    "_NEWIMAGE": "(function) creates a designated size program SCREEN or page image and returns a handle value.",
    "$NOPREFIX": "(metacommand) (deprecated) allows QB64-specific keywords to be used without the underscore prefix.",
    "_NOTIFYPOPUP": "(statement) Shows a system notification popup.",
    "_NUMLOCK (function)": "returns -1 when Num Lock is on",
    "_NUMLOCK": "(statement) sets Num Lock key state",
    "_OFFSET (function)": "returns the memory offset of a variable when used with DECLARE LIBRARY or _MEM only.",
    "_OFFSET": "(%& numerical type) can be used store the value of an offset in memory when using DECLARE LIBRARY or MEM only.",
    "_OPENCLIENT": "(TCP/IP function) connects to a Host on the Internet as a Client and returns the Client status handle.",
    "_OPENCONNECTION": "(TCP/IP function) open's a connection from a client that the host has detected and returns a status handle.",
    "_OPENFILEDIALOG$": "(function) Displays a standard dialog box that prompts the user to open a file.",
    "_OPENHOST": "(TCP/IP function) opens a Host and returns a Host status handle.",
    "OPTION _EXPLICIT": "(Pre-compiler directive) instructs the compiler to require variable declaration with DIM or an equivalent statement.",
    "OPTION _EXPLICITARRAY": "(Pre-compiler directive) instructs the compiler to require array declaration with DIM or an equivalent statement.",
    "_ORELSE": "(logical operator) performs short-circuiting inclusive logical disjunction on two expressions.",
    "_OS$": "(function) returns the QB64 compiler version in which the program was compiled as [WINDOWS], [LINUX] or [MACOSX] and [32BIT] or [64BIT].",
    "_PALETTECOLOR": "(statement) sets the color value of a palette entry of an image using 256 colors or less palette modes.",
    "_PALETTECOLOR (function)": "return the 32 bit attribute color setting of an image or screen page handle's palette.",
    "_PI": "(function) returns the value of π or parameter multiples for angle or circle calculations.",
    "_PIXELSIZE": "(function) returns the pixel palette mode of a designated image handle.",
    "_PRESERVE": "(REDIM action) preserves the data presently in an array when REDIM is used.",
    "_PRINTIMAGE": "(statement) sends an image to the printer that is stretched to the current printer paper size.",
    "_PRINTMODE": "(statement) sets the text or _FONT printing mode on a background when using PRINT or _PRINTSTRING.",
    "_PRINTMODE (function)": "returns the present _PRINTMODE value number.",
    "_PRINTSTRING": "(statement) locates and prints a text string using graphic coordinates.",
    "_PRINTWIDTH": "(function) returns the pixel width of a text string to be printed using _PRINTSTRING.",
    "_PUTIMAGE": "(statement) maps a rectangular image source area to an image destination area.",
    "_R2D": "(function) converts radians to degree angle values.",
    "_R2G": "(function) converts radians to gradient angle values.",
    "_RED": "(function) function returns the palette or the red component intensity of a 32-bit image color.",
    "_RED32": "(function) returns the red component intensity of a 32-bit color value.",
    "_READBIT": "(function) returns the state of the specified bit of an integer variable.",
    "_READFILE$": "(function) directly read a file into a string, without OPEN/CLOSE overhead.",
    "_RESETBIT": "(function) is used to set the specified bit of an integer variable to 0.",
    "$RESIZE": "(metacommand) used with ON allows a user to resize the program window where OFF does not.",
    "_RESIZE": "(statement) sets resizing of the window ON or OFF and sets the method as _STRETCH or _SMOOTH.",
    "_RESIZE (function)": "returns -1 when a program user wants to resize the program screen.",
    "_RESIZEHEIGHT": "(function) returns the requested new user screen height when $RESIZE:ON allows it.",
    "_RESIZEWIDTH": "(function) returns the requested new user screen width when $RESIZE:ON allows it.",
    "_RGB": "(function) returns the closest palette index OR the LONG 32 bit color value in 32 bit screens.",
    "_RGB32": "(function) returns the LONG 32 bit color value in 32 bit screens only",
    "_RGBA": "(function) returns the closest palette index OR the LONG 32 bit color value in 32 bit screens with the ALPHA",
    "_RGBA32": "(function) returns the LONG 32 bit color value in 32 bit screens only with the ALPHA",
    "_ROL": "(function) used to rotate the bits of a numerical value to the left",
    "_ROR": "(function) used to rotate the bits of a numerical value to the right.",
    "_ROUND": "(function) rounds to the closest INTEGER, LONG or _INTEGER64 numerical value.",
    "_SATURATION32": "(function) returns the saturation value (HSB colorspace) of a given 32-bit ARGB color.",
    "_SAVEFILEDIALOG$": "(function) Displays a standard dialog box that prompts the user to save a file.",
    "_SAVEIMAGE": "(statement) Saves the screen or an image handle to an image file.",
    "_SEC": "(function) the mathematical function secant defined by 1/COS.",
    "_SECH": "(function) Returns the hyperbolic secant.",
    "_SELECTFOLDERDIALOG$": "(function) Displays a dialog box that enables the user to select a folder (directory).",
    "_SCREENCLICK": "(statement) simulates clicking on a point on the desktop screen with the left mouse button.",
    "_SCREENEXISTS": "(function) returns a -1 value once a screen has been created.",
    "$SCREENHIDE": "(metacommand) hides the program window from view.",
    "_SCREENHIDE": "(statement) hides the program window from view.",
    "_SCREENICON (function)": "returns -1 or 0 to indicate if the window has been minimized to an icon on the taskbar.",
    "_SCREENICON": "(statement) minimizes the program window to an icon on the taskbar.",
    "_SCREENIMAGE": "(function) creates an image of the current desktop and returns an image handle.",
    "_SCREENMOVE": "(statement) positions program window on the desktop using designated coordinates or the _MIDDLE option.",
    "_SCREENPRINT": "(statement) simulates typing text into a Windows program using the keyboard.",
    "$SCREENSHOW": "(metacommand) displays the program window after it was hidden.",
    "_SCREENSHOW": "(statement) displays the program window after it has been hidden by _SCREENHIDE.",
    "_SCREENX": "(function) returns the program window's upper left corner horizontal position on the desktop.",
    "_SCREENY": "(function) returns the program window's upper left corner vertical position on the desktop.",
    "_SCROLLLOCK (function)": "returns -1 when Scroll Lock is on",
    "_SCROLLLOCK": "(statement) sets Scroll Lock key state",
    "_SETALPHA": "(statement) sets the alpha channel transparency level of some or all of the pixels of an image.",
    "_SETBIT": "(function) is used to set the specified bit of an integer variable to 1.",
    "_SHELLHIDE": "(function) returns the code sent by a program exit using END or SYSTEM followed by an INTEGER value.",
    "_SHL": "(function) used to shift the bits of a numerical value to the left",
    "_SHR": "(function) used to shift the bits of a numerical value to the right.",
    "_SINH": "(function) Returns the hyperbolic sine of x radians.",
    "_SMOOTH (function)": "checks whether the current _FULLSCREEN mode has antialiasing enabled or not.",
    "_SNDBAL": "(statement) attempts to set the balance or 3D position of a sound file.",
    "_SNDCLOSE": "(statement) frees and unloads an open sound using the sound handle created by _SNDOPEN.",
    "_SNDCOPY": "(function) copies a sound handle value to a new designated handle.",
    "_SNDGETPOS": "(function) returns the current playing position in seconds from a sound file.",
    "_SNDLEN": "(function) returns the length of a sound in seconds from a sound file.",
    "_SNDLIMIT": "(statement) stops playing a sound after it has been playing for a set number of seconds.",
    "_SNDLOOP": "(statement) plays a sound repeatedly until _SNDSTOP is used.",
    "_SNDNEW": "(function) creates a raw empty sound in memory and returns a LONG handle value for later access.",
    "_SNDOPEN": "(function) loads a sound file and returns a sound handle.",
    "_SNDOPENRAW": "(function) opens a new channel to shove _SNDRAW content into without mixing.",
    "_SNDPAUSE": "(statement) stops playing a sound file until resumed.",
    "_SNDPAUSED": "(function) returns the current pause status of a sound file handle.",
    "_SNDPLAY": "(statement) plays a sound file handle that was created by _SNDOPEN or _SNDCOPY.",
    "_SNDPLAYCOPY": "(statement) copies a sound handle, plays it and automatically closes the copy when done.",
    "_SNDPLAYFILE": "(statement) directly plays a designated sound file.",
    "_SNDPLAYING": "(function) returns the current playing status of a sound handle.",
    "_SNDRATE": "(function) returns the sound card sample rate to set _SNDRAW durations.",
    "_SNDRAW": "(statement) plays a mono or stereo sound sample frame.",
    "_SNDRAWBATCH": "(statement) plays a batch of mono or stereo sound sample frames from an array.",
    "_SNDRAWDONE": "(statement) pads a _SNDRAW stream so the final (partially filled) buffer section is played.",
    "_SNDRAWLEN": "(function) returns a value until the _SNDRAW buffer is empty.",
    "_SNDSETPOS": "(statement) sets the playing position of a sound handle.",
    "_SNDSTOP": "(statement) stops playing a sound handle.",
    "_SNDVOL": "(statement) sets the volume of a sound file handle.",
    "_SOURCE": "(statement) sets the source image handle.",
    "_SOURCE (function)": "returns the present source image handle value.",
    "_STARTDIR$": "(function) returns the user's program calling path as a STRING.",
    "_STATUSCODE": "(function) gives the HTTP status code of an HTTP response that was opened using _OPENCLIENT.",
    "_STRCMP": "(function) compares the relationship between two strings.",
    "_STRICMP": "(function) compares the relationship between two strings, without regard for case-sensitivity.",
    "_TANH": "(function) Returns the hyperbolic tangent of x radians.",
    "_TITLE": "(statement) sets the program title string value.",
    "_TITLE$": "(function) gets the program title string value.",
    "_TOGGLEBIT": "(function) is used to toggle the specified bit of an integer variable from 1 to 0 or 0 to 1.",
    "_TOSTR$": "(function) Returns the STRING representation of a numerical value. It's a successor of the legacy STR$ function.",
    "_TOTALDROPPEDFILES": "(function) returns the number of items (files or folders) dropped in a program's window after _ACCEPTFILEDROP is enabled.",
    "_TRIM$": "(function) shorthand to LTRIM$(RTRIM$(\"text\"))",
    "_UCHARPOS": "(function) calculates the starting pixel positions of every character of a (unicode) text string.",
    "_UFONTHEIGHT": "(function) returns the global glyph height (incl. ascender/descender) of a loaded font.",
    "_ULINESPACING": "(function) returns the vertical line spacing (distance between two consecutive baselines) in pixels.",
    "_UNSIGNED": "(numerical type) expands the positive range of numerical INTEGER, LONG or _INTEGER64 values returned.",
    "$UNSTABLE": "(metacommand) will enable the use of features that have not yet been made a permanent part of the language.",
    "_UPRINTSTRING": "(statement) locates and prints a (unicode) text string using graphic coordinates.",
    "_UPRINTWIDTH": "(function) returns the pixel width of a (unicode) text string to be printed using _UPRINTSTRING.",
    "$VERSIONINFO": "(metacommand) adds metadata to Windows only binaries for identification purposes across the OS.",
    "_WAVE": "(statement) defines the waveform shape for a specified audio channel when used with SOUND or PLAY.",
    "_WHEEL": "(function) returns -1 when a control device wheel is scrolled up and 1 when scrolled down. Zero indicates no activity.",
    "_WIDTH (function)": "returns the width of a SCREEN or image handle.",
    "_WINDOWHANDLE": "(function) returns the window handle assigned to the current program by the OS. Windows-only.",
    "_WINDOWHASFOCUS": "(function) returns true (-1) if the current program's window has focus. Windows-only.",
    "_WRITEFILE": "(statement) directly write a string into a file, without OPEN/CLOSE overhead.",
    "ABS": "(function) converts any negative numerical value to a positive value.",
    "ABSOLUTE": "(statement) is used to access computer interrupt registers.",
    "ACCESS": "(file statement) sets the read and write access of a file when opened.",
    "ALIAS": "(QB64 DECLARE LIBRARY statement) denotes the actual name of an imported FUNCTION or SUB procedure.",
    "AND": "(logical operator) is used to compare two numerical values bitwise.",
    "AND (boolean)": "conditonal operator is used to include another evaluation in an IF...THEN or Boolean statement.",
    "APPEND": "(file mode) creates a new file or allows an existing file to have data added using WRITE or PRINT",
    "AS": "is used to denote a variable type or file number.",
    "ASC (function)": "returns the ASCII code number of a text string character.",
    "ASC": "(statement) (QB64 only) sets the code value of an ASCII text character at a designated string position.",
    "ATN": "(function) or arctangent returns the angle in radians of a numerical tangent value.",
    "BEEP": "(statement) creates an error sound of a fixed duration.",
    "BINARY": "(file mode) creates or opens an existing file for read and write byte-wise access.",
    "BLOAD": "(statement) transfers the contents of a BINARY BSAVE file to a specific array.",
    "BSAVE": "(statement) transfers the contents of an array to a specified size BINARY file.",
    "BYVAL": "(statement) assigns a numerical variable value by its value, not the name.",
    "CALL": "(statement) optional statement that sends the program to a SUB procedure. Requires parameters be enclosed in brackets(parenthesis).",
    "CALL ABSOLUTE": "(statement) is used to access computer interrupt registers.",
    "CASE": "(SELECT CASE condition) designates specific conditions in a SELECT CASE statement block.",
    "CASE ELSE": "(SELECT CASE condition) designates an alternative condition to be evaluated in a SELECT CASE statement block.",
    "CASE IS": "(SELECT CASE condition) designates specific conditions in a SELECT CASE statement block.",
    "CDBL": "(function) returns the closest DOUBLE value of a number.",
    "CHAIN": "(statement) sends a program to another specified program module or compiled program.",
    "CHDIR": "(statement) changes the current program path for file access.",
    "CHR$": "(function) returns a text string character by the specified ASCII code number.",
    "CINT": "(function) returns the closest INTEGER value of a numerical value.",
    "CIRCLE": "(statement) creates a circle, ellipse or arc at a designated graphical coordinate position.",
    "CLEAR": "(statement) sets all variable and array values to zero number values or empty STRINGs.",
    "CLNG": "(function) returns the closest LONG value of a numerical value.",
    "CLOSE": "(statement) closes specific file number(s) or all files when a number is not specified.",
    "CLS": "(statement) clears a program screen, VIEW port or WINDOW.",
    "COLOR": "(statement) sets the current text foreground and/or background color to be used.",
    "COMMAND$": "(function) returns the command line arguments passed when a program is run.",
    "COMMON": "(statement) sets a variable name as shared by CHAINed program modules.",
    "CONST": "(statement) sets a variable name and its value as a constant value to be used by all procedures.",
    "COS": "(function) returns the cosine of a radian angle value.",
    "CSNG": "(function) returns the closest SINGLE value of a numerical value.",
    "CSRLIN": "(function) returns the present PRINT cursor text row SCREEN coordinate position.",
    "CVD": "(function) returns the DOUBLE numerical value of an 8 byte MKD$ string.",
    "CVDMBF": "(function) returns the DOUBLE numerical value of a Microsoft Binary Format string.",
    "CVI": "(function) returns the INTEGER numerical value of a 2 byte MKI$ string.",
    "CVL": "(function) returns the LONG numerical value of a 4 byte MKL$ string.",
    "CVS": "(function) returns the SINGLE numerical value of a 4 byte MKS$ string.",
    "CVSMBF": "(function) returns the SINGLE numerical value of a Microsoft Binary Format string.",
    "DATA": "(statement) creates a line of fixed program information separated by commas.",
    "DATE$": "(function) returns the present Operating System date string formatted as mm-dd-yyyy.",
    "DECLARE LIBRARY (QB64 statement block)": "declares a C++, SDL or Operating System SUB or FUNCTION to be used.",
    "DEF SEG": "(statement) defines a segment in memory to be accessed by a memory procedure.",
    "DEFDBL": "(statement) defines a set of undefined variable name starting letters as DOUBLE type numerical values.",
    "DEFINT": "(statement) defines a set of undefined variable name starting letters as INTEGER type numerical values.",
    "DEFLNG": "(statement) defines a set of undefined variable name starting letters as LONG type numerical values.",
    "DEFSNG": "(statement) defines a set of undefined variable name starting letters as SINGLE type numerical values.",
    "DEFSTR": "(statement) defines a set of undefined variable name starting letters as STRING type values.",
    "DIM": "(statement) defines a variable as a specified type and can size a STATIC array.",
    "DO...LOOP": "(statement) sets a recursive procedure loop that can be ignored or exited using conditional arguments.",
    "DOUBLE": "(numerical type #) 8 byte value limited to values up to 15 decimal places.",
    "DRAW": "(statement) uses a special string format that draws graphical lines in specific directions.",
    "$DYNAMIC": "(metacommand) used at the start of a program to set all program arrays as changeable in size using REDIM.",
    "ELSE": "(IF...THEN statement) is used to direct program flow when no other condition is evaluated as true.",
    "ELSEIF": "(IF...THEN statement) is used with THEN to set alternate conditional evaluations.",
    "END": "(statement) sets the end of a program, sub-procedure, statement block, DECLARE LIBRARY or TYPE definition.",
    "END IF": "(statement) ENDs an IF...THEN conditional block statement using more than one line of code.",
    "ENVIRON": "(statement) temporarily sets an environmental key/pair value.",
    "ENVIRON$": "(function) returns a specified string setting or numerical position as an environmental STRING value.",
    "EOF": "(function) returns -1 when a file INPUT or GET has reached the end of a file.",
    "EQV": "(logic operator) is used to compare two numerical values bitwise.",
    "ERASE": "(statement) clears the values from $STATIC arrays and completely removes $DYNAMIC arrays.",
    "ERL": "(function) returns the closest line number before an error occurred if line numbers are used.",
    "ERR": "(function) returns the ERROR code when a program error occurs.",
    "ERROR": "(statement) sets a specific ERROR code to be simulated.",
    "EXIT": "(statement) immediately exits a program FOR...NEXT, DO...LOOP, SUB or FUNCTION procedure.",
    "EXP": "(function) returns the value of e to the exponential power specified.",
    "FIELD": "(statement) defines the variable sizes to be written or read from a file.",
    "FILES": "(statement) returns a list of files in the current directory path to the SCREEN.",
    "FIX": "(function) returns the rounded INTEGER value of a numerical value.",
    "FOR...NEXT": "(statement) creates a recursive loop procedure that loop a specified number of times.",
    "FOR (file statement)": "used in an OPEN file or device statement to indicate the access mode.",
    "FREE": "(QB64 TIMER statement) frees a numbered TIMER event in QB64.",
    "FREEFILE": "(function) returns a file number that is currently not in use by the Operating System.",
    "FUNCTION": "(procedure block) sub-procedure that can calculate and return one value to a program in its name.",
    "GET": "(file statement) reads a file sequencially or at a specific position and returns the value as the variable type used.",
    "GET (HTTP statement)": "reads the response of an HTTP request that was opened using _OPENCLIENT.",
    "GET (TCP/IP statement)": "reads a TCP/IP connection port to return a value.",
    "GET (graphics statement)": "maps an area the current screen's video information and places it in an INTEGER array.",
    "GOSUB": "(statement) sends the program to a designated line label procedure in the main program.",
    "GOTO": "(statement) sends the program to a designated line number or line label in a procedure.",
    "HEX$": "(function) returns the hexadecimal (base 16) STRING representation of the INTEGER part of any value.",
    "IF...THEN": "(statement) a conditional block statement used control program flow.",
    "IMP": "(logic operator) is used to compare two numerical values bitwise.",
    "$INCLUDE": "(metacommand) designates a text code library file to include with the program.",
    "INKEY$": "(function) ASCII returns a string value entry from the keyboard.",
    "INP": "(function) returns a numerical value from a specified port register address. See Keyboard scancodes",
    "INPUT": "(statement) a user input that returns a value to one or more specified variable(s).",
    "INPUT (file mode)": "OPEN statement that only allows an existing file to be read using INPUT (file statement) or INPUT$.",
    "INPUT (file statement)": "reads a file sequentially using the variable types designated.",
    "INPUT$": "(function) returns a designated number of string bytes from the keyboard entry or a file number.",
    "INSTR": "(function) returns the position in a text string where a character sequence match starts.",
    "INT": "(function) rounds a numerical value to an INTEGER value by removing the decimal point fraction.",
    "INTEGER": "(% numerical type) 2 byte whole values from -32768 to 32767.",
    "INTERRUPT": "(statement) is used to access computer interrupt registers.",
    "INTERRUPTX": "(statement) is used to access computer interrupt registers.",
    "KEY n": "(statement) used with ON KEY(n) events to assign a \"softkey\" string to a key or create a user defined key.",
    "KEY(n)": "(statement) used with ON KEY(n) events to assign, enable, disable or suspend event trapping.",
    "KEY LIST": "(statement) lists the 12 Function key soft key string assignments going down left side of screen.",
    "KILL": "(statement) deletes the specified file without a warning. Remove empty folders with RMDIR.",
    "LBOUND": "(function) returns the lower boundary of the specified array.",
    "LCASE$": "(function) returns the lower case value of a STRING.",
    "LEFT$": "(function) returns the specified number of text characters from the left end of a STRING.",
    "LEN": "(function) returns the length or number of characters in a STRING value in bytes.",
    "LET": "(statement) assigns a variable a literal value. Not required.",
    "LINE": "(statement) creates a graphic line or box on the SCREEN.",
    "LINE INPUT": "(statement) user input can be any text character including commas and quotes as a STRING value only.",
    "LINE INPUT (file statement)": "returns an entire text file line and returns it as a STRING value.",
    "LIST": "displays the current ON KEY(n) function key (F1 to F10) \"soft key\" settings.",
    "LOC": "(function) returns the present file byte position or number of bytes in the OPEN COM buffer.",
    "LOCATE": "(statement) sets the text cursor's row and column position for a PRINT or INPUT statement.",
    "LOCK": "(statement) restricts access to portions or all of a file by other programs or processes.",
    "LOF": "(function) returns the size of an OPEN file in bytes.",
    "LOG": "(function) returns the natural logarithm of a specified numerical value",
    "LONG": "(& numerical type) 4 byte whole values from -2147483648 to 2147483647.",
    "LOOP": "(block statement) bottom end of a recursive DO loop.",
    "LPOS": "(function) returns the printer head position.",
    "LPRINT": "(statement) sends STRING data to the default LPT or USB printer.",
    "LPRINT USING": "(statement) sends template formatted text to the default LPT or USB printer.",
    "LSET": "(statement) left justifies the text in a string so that there are no leading spaces.",
    "LTRIM$": "(function) returns a string value with no leading spaces.",
    "MID$ (function)": "returns a designated portion of a STRING.",
    "MID$": "(statement) redefines existing characters in a STRING.",
    "MKD$": "(function) returns an 8 byte ASCII string representation of a DOUBLE numerical value.",
    "MKDIR": "(statement) creates a new folder in the current or designated program path.",
    "MKDMBF$": "(function) returns an 8 byte Microsoft Binary Format STRING representation of a DOUBLE numerical value.",
    "MKI$": "(function) returns a 2 byte ASCII string representation of an INTEGER.",
    "MKL$": "(function) returns a 4 byte ASCII string representation of a LONG numerical value.",
    "MKS$": "(function) returns a 4 byte ASCII string representation of a SINGLE numerical value.",
    "MKSMBF$": "(function) returns an 8 byte Microsoft Binary Format STRING representation of a DOUBLE numerical value.",
    "MOD": "(math operator) performs integer remainder division on a numerical value.",
    "NAME": "(statement) names an existing file name AS a new file name.",
    "NEXT": "(statement) bottom end of a FOR...NEXT counter loop to returns to the start or a RESUME NEXT error.",
    "NOT": "(logical operator) inverts the value of a logic operation or returns True when a boolean evaluation is False.",
    "OCT$": "(function) returns the octal (base 8) STRING representation of the INTEGER part of any value.",
    "OFF": "(event statement) turns off all ON event checking.",
    "ON ERROR": "(statement) sets up and activates an error event checking procedure call. Use to avoid program errors.",
    "ON KEY(n)": "(statement) sets up a keyboard key entry event procedure.",
    "ON STRIG(n)": "(statement) sets up a joystick button event procedure call.",
    "ON TIMER(n)": "(statement) sets up a timed event procedure call.",
    "ON...GOSUB": "(statement) sets up a numerical event procedure call.",
    "ON...GOTO": "(statement) sets up a numerical event procedure call.",
    "OPEN": "(file statement) opens a file name for an access mode with a specific file number.",
    "OPEN COM": "(statement) opens a serial communication port for access at a certain speed and mode.",
    "OPTION BASE": "(statement) can set the lower boundary of all arrays to 1.",
    "OR": "(logic operator) is used to compare two numerical values bitwise.",
    "OR (boolean)": "conditonal operator is used to include an alternative evaluation in an IF...THEN or Boolean statement.",
    "OUT": "(statement) writes numerical data to a specified register port.",
    "OUTPUT": "(file mode) creates a new file or clears all data from an existing file to acess the file sequencially.",
    "PAINT": "(statement) fills an enclosed area of a graphics screen with a color until it encounters a specific colored border.",
    "PALETTE": "(statement) sets the Red, Green and Blue color attribute intensities using a RGB multiplier calculation.",
    "PALETTE USING": "(statement) sets the color intensity settings using a designated array.",
    "PCOPY": "(statement) swaps two designated memory page images when page swapping is enabled in the SCREEN statement.",
    "PEEK": "(function) returns a numerical value from a specified segment address in memory.",
    "PLAY": "(statement) uses a special string format that can produce musical tones and effects.",
    "PLAY (function)": "returns the number of remaining notes in the background music queue.",
    "PMAP": "(function) returns the physical or WINDOW view graphic coordinates.",
    "POINT": "(function) returns the color attribute number or 32 bit _RGB32 value.",
    "POKE": "(statement) writes a numerical value to a specified segment address in memory.",
    "POS": "(function) returns the current text column position of the text cursor.",
    "PRESET": "(statement) sets a pixel coordinate to the background color unless one is specified.",
    "PRINT": "(statement) prints text strings or numerical values to the SCREEN.",
    "PRINT (file statement)": "prints text strings or numerical values to a file.",
    "PRINT USING": "(statement) prints a template formatted string to the SCREEN.",
    "PRINT USING (file statement)": "prints a template formatted string to a file.",
    "PSET": "(statement) sets a pixel coordinate to the current color unless a color is designated.",
    "PUT": "(file I/O statement) writes data sequencially or to a designated position using a variable value.",
    "PUT (QB64 TCP/IP statement)": "sends raw data to a user's connection handle.",
    "PUT (graphics statement)": "places pixel data stored in an INTEGER array to a specified area of the SCREEN.",
    "RANDOM": "(file mode) creates a file or opens an existing file to read and write records of a set byte size.",
    "RANDOMIZE": "(statement) sets the random seed value for a specific sequence of random RND values.",
    "RANDOMIZE USING (QB64 statement)": "restarts the designated seed value's random sequence of values from the beginning.",
    "READ": "(statement) reads values from a DATA field. ACCESS READ is used with the OPEN statement.",
    "REDIM": "(statement) creates a new dynamic array or resizes one without losing data when _PRESERVE is used.",
    "REM": "(statement) or an apostrophe tells the program to ignore statements following it on the same line.",
    "RESET": "(statement) closes all files and writes the directory information to a diskette before it is removed from a disk drive.",
    "RESTORE": "(statement) resets the DATA pointer to the start of a designated field of data.",
    "RESUME": "(statement) an error handling procedure exit that can send the program to a line number or the NEXT code line.",
    "RETURN": "(statement) returns the program to the code immediately following a GOSUB call.",
    "RIGHT$": "(function) returns a specific number of text characters from the right end of a STRING.",
    "RMDIR": "(statement) removes an empty folder from the current path or the one designated.",
    "RND": "(function) returns a random number value from 0 to .9999999.",
    "RSET": "(statement) right justifies a string value so that any end spaces are moved to the beginning.",
    "RTRIM$": "(function) returns a string with all spaces removed from the right end.",
    "RUN": "(statement) clears and restarts the program currently in memory or executes another specified program.",
    "SADD": "(function) returns the address of a STRING variable as an offset from the current data segment.",
    "SCREEN (function)": "can return the ASCII character code or color of the text at a text designated coordinate.",
    "SCREEN": "(statement) sets the display mode and size of the program window.",
    "SEEK (function)": "returns the present byte position in an opened file.",
    "SEEK": "(statement) moves to a specified position in an opened file.",
    "SELECT CASE": "(statement) a program flow block that can handle numerous conditional evaluations.",
    "SGN": "(function) returns -1 for negative, 0 for zero, and 1 for positive numerical values.",
    "SHARED": "(statement) designates that a variable can be used by other procedures or the main procedure when in a sub-procedure.",
    "SHELL": "(statement) sends STRING commands to the command line. SHELL calls will not affect the current path.",
    "SHELL (function)": "executes an external command or calls another program. Returns codes sent by END or SYSTEM.",
    "SIN": "(function) returns the sine of a radian angle.",
    "SINGLE": "(! numerical type) 4 byte floating decimal point values up to 7 decimal places.",
    "SLEEP": "(statement) pauses the program for a designated number of seconds or until a key is pressed.",
    "SOUND": "(statement) creates a sound of a specified frequency and duration.",
    "SPACE$": "(function) returns a designated number of spaces to a STRING.",
    "SPC": "(function) moves the text cursor a number of spaces on the SCREEN.",
    "SQR": "(function) returns the square root of a non-negative number.",
    "STATIC": "(statement) creates a SUB or FUNCTION variable that retains its value.",
    "$STATIC": "(metacommand) used at the start of a program to set all program arrays as unchangeable in size using DIM.",
    "STEP": "(keyword) move relatively from one graphic position or change the counting increment in a FOR...NEXT loop.",
    "STICK": "(function) returns the present joystick position.",
    "STOP": "(statement) stops a program when troubleshooting or stops an ON event.",
    "STR$": "(function) returns a string value of a number with a leading space when it is positive.",
    "STRIG": "(function) returns the joystick button press values when read.",
    "STRIG(n)": "(statement)",
    "STRING": "($ variable type) one byte text variable with ASCII code values from 0 to 255.",
    "STRING$": "(function) returns a designated number of string characters.",
    "SUB": "(procedure block) sub-procedure that can calculate and return multiple parameter values.",
    "SWAP": "(statement) swaps two string or numerical values.",
    "SYSTEM": "(statement) ends a program immediately.",
    "TAB": "(function) moves a designated number of columns on the screen.",
    "TAN": "(function) returns the ratio of SINe to COSine or tangent value of an angle measured in radians.",
    "THEN": "(IF...THEN keyword) must be used in a one line IF...THEN program flow statement.",
    "TIME$": "(function) returns the present time setting of the Operating System as a format hh:mm:ss STRING.",
    "TIMER (function)": "returns the number of seconds since midnight as a SINGLE value.",
    "TIMER": "(statement) events based on the designated time interval and timer number.",
    "TO": "indicates a range of numerical values or an assignment of one value to another.",
    "TYPE": "(definition) defines a variable type or file record that can include any STRING or numerical types.",
    "UBOUND": "(function) returns the upper-most index number of a designated array.",
    "UCASE$": "(function) returns an uppercase representation of a specified STRING.",
    "UNLOCK": "(statement) unlocks a designated file or portions of it.",
    "UNTIL": "(condition) evaluates a DO...LOOP condition until it is True.",
    "VAL": "(function) returns the numerical value of a string number.",
    "VARPTR": "(function) returns the segment pointer address in memory.",
    "VARPTR$": "(function) returns the string value of a numerical value in memory.",
    "VARSEG": "(function) returns the segment address of a value in memory.",
    "VIEW": "(graphics statement) sets up a graphic view port area of the screen.",
    "VIEW PRINT": "(statement) sets up a text viewport area of the screen.",
    "WAIT": "(statement) waits until a vertical retrace is started or a screen draw ends.",
    "WEND": "(statement) the bottom end of a WHILE...WEND loop.",
    "WHILE": "(condition) evaluates a DO...LOOP or WHILE...WEND condition until it is False.",
    "WHILE...WEND": "(statement) sets a recursive procedure loop that can only be exited using the WHILE conditional argument.",
    "WIDTH": "(statement) sets the text column and row sizes in several SCREEN modes.",
    "WINDOW": "(statement) maps a window size different from the program's window size.",
    "WRITE": "(screen I/O statement) prints variable values to the screen with commas separating each value.",
    "WRITE (file statement)": "writes data to a file with each variable value separated by commas.",
    "XOR (boolean)": "(logic operator) is used to compare two numerical values bitwise.",
    "SUB _GL": "Important: see SUB _GL",
    "_glAccum": "(statement) operates on the accumulation buffer",
    "_glAlphaFunc": "(statement) enables your application to set the alpha test function.",
    "_glAreTexturesResident": "(function) determines whether specified texture objects are resident in texture memory.",
    "_glArrayElement": "(statement) specifies the array elements used to render a vertex.",
    "_glBegin": "(statement) the _glBegin and _glEnd statements delimit the vertices of a primitive or a group of like primitives.",
    "_glBindTexture": "(statement) enables the creation of a named texture that is bound to a texture target",
    "_glBitmap": "(statement) draws a bitmap.",
    "_glBlendFunc": "(statement) specifies pixel arithmetic.",
    "_glCallList": "(statement) executes a display list.",
    "_glCallLists": "(statement) executes a list of display lists.",
    "_glClear": "(statement) clears buffers to preset values.",
    "_glClearAccum": "(statement) specifies the clear values for the accumulation buffer.",
    "_glClearColor": "(statement) specifies clear values for the color buffers.",
    "_glClearDepth": "(statement) specifies the clear value for the depth buffer.",
    "_glClearIndex": "(statement) specifies the clear value for the color-index buffers.",
    "_glClearStencil": "(statement) specifies the clear value for the stencil buffer.",
    "_glClipPlane": "(statement) specifies a plane against which all geometry is clipped.",
    "_glColor3b": "(statement) sets the current color.",
    "_glColor3bv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor3d": "(statement) sets the current color.",
    "_glColor3dv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor3f": "(statement) sets the current color.",
    "_glColor3fv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor3i": "(statement) sets the current color.",
    "_glColor3iv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor3s": "(statement) sets the current color.",
    "_glColor3sv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor3ub": "(statement) sets the current color.",
    "_glColor3ubv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor3ui": "(statement) sets the current color.",
    "_glColor3uiv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor3us": "(statement) sets the current color.",
    "_glColor3usv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor4b": "(statement) sets the current color.",
    "_glColor4bv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor4d": "(statement) sets the current color.",
    "_glColor4dv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor4f": "(statement) sets the current color.",
    "_glColor4fv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor4i": "(statement) sets the current color.",
    "_glColor4iv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor4s": "(statement) sets the current color.",
    "_glColor4sv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor4ub": "(statement) sets the current color.",
    "_glColor4ubv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor4ui": "(statement) sets the current color.",
    "_glColor4uiv": "(statement) sets the current color from an already existing array of color values.",
    "_glColor4us": "(statement) sets the current color.",
    "_glColor4usv": "(statement) sets the current color from an already existing array of color values.",
    "_glColorMask": "(statement) enables and disables writing of frame-buffer color components.",
    "_glColorMaterial": "(statement) causes a material color to track the current color.",
    "_glColorPointer": "(statement) defines an array of colors.",
    "_glCopyPixels": "(statement) copies pixels in the framebuffer.",
    "_glCopyTexImage1D": "(statement) copies pixels from the framebuffer into a one-dimensional texture image.",
    "_glCopyTexImage2D": "(statement) copies pixels from the framebuffer into a two-dimensional texture image.",
    "_glCopyTexSubImage1D": "(statement) copies a sub-image of a one-dimensional texture image from the framebuffer.",
    "_glCopyTexSubImage2D": "(statement) copies a sub-image of a two-dimensional texture image from the framebuffer.",
    "_glCullFace": "(statement) specifies whether front-facing or back-facing facets can be culled.",
    "_glDeleteLists": "(statement) deletes a contiguous group of display lists.",
    "_glDeleteTextures": "(statement) deletes named textures.",
    "_glDepthFunc": "(statement) specifies the value used for depth-buffer comparisons.",
    "_glDepthMask": "(statement) enables or disables writing into the depth buffer.",
    "_glDepthRange": "(statement) specifies the mapping of z values from normalized device coordinates to window coordinates.",
    "_glDisable": "(statement) the _glEnable and _glDisable statements enable or disable OpenGL capabilities.",
    "_glDisableClientState": "(statement) the _glEnableClientState and _glDisableClientState statements enable and disable arrays.",
    "_glDrawArrays": "(statement) specifies multiple primitives to render.",
    "_glDrawBuffer": "(statement) specifies which color buffers are to be drawn into.",
    "_glDrawElements": "(statement) renders primitives from array data.",
    "_glDrawPixels": "(statement) writes a block of pixels to the framebuffer.",
    "_glEdgeFlag": "(statement) flags edges as either boundary or nonboundary.",
    "_glEdgeFlagv": "(statement) flags edges as either boundary or nonboundary.",
    "_glEdgeFlagPointer": "(statement) defines an array of edge flags.",
    "_glEnable": "(statement) the _glEnable and _glDisable statements enable or disable OpenGL capabilities.",
    "_glEnableClientState": "(statement) the _glEnableClientState and _glDisableClientState statements enable and disable arrays.",
    "_glEnd": "(statement) the _glBegin and _glEnd statements delimit the vertices of a primitive or a group of like primitives.",
    "_glEndList": "(statement) the _glNewList and _glEndList statements create or replace a display list.",
    "_glEvalCoord1d": "(statement) evaluates enabled one-dimensional maps.",
    "_glEvalCoord1dv": "(statement) evaluates enabled one-dimensional maps.",
    "_glEvalCoord1f": "(statement) evaluates enabled one-dimensional maps.",
    "_glEvalCoord1fv": "(statement) evaluates enabled one-dimensional maps.",
    "_glEvalCoord2d": "(statement) evaluates enabled two-dimensional maps.",
    "_glEvalCoord2dv": "(statement) evaluates enabled two-dimensional maps.",
    "_glEvalCoord2f": "(statement) evaluates enabled two-dimensional maps.",
    "_glEvalCoord2fv": "(statement) evaluates enabled two-dimensional maps.",
    "_glEvalMesh1": "(statement) computes a one-dimensional grid of points or lines.",
    "_glEvalMesh2": "(statement) computes a two-dimensional grid of points or lines.",
    "_glEvalPoint1": "(statement) generate and evaluate a single point in a mesh.",
    "_glEvalPoint2": "(statement) generate and evaluate a single point in a mesh.",
    "_glFeedbackBuffer": "(statement) controls feedback mode.",
    "_glFinish": "(statement) blocks until all OpenGL execution is complete.",
    "_glFlush": "(statement) forces execution of OpenGL functions in finite time.",
    "_glFogf": "(statement) specifies fog parameters.",
    "_glFogfv": "(statement) specifies fog parameters.",
    "_glFogi": "(statement) specifies fog parameters.",
    "_glFogiv": "(statement) specifies fog parameters.",
    "_glFrontFace": "(statement) defines front-facing and back-facing polygons.",
    "_glFrustum": "(statement) multiplies the current matrix by a perspective matrix.",
    "_glGenLists": "(function) generates a contiguous set of empty display lists.",
    "_glGenTextures": "(statement) generates texture names.",
    "_glGetBooleanv": "(statement) returns the value or values of a selected parameter.",
    "_glGetClipPlane": "(statement) returns the coefficients of the specified clipping plane.",
    "_glGetDoublev": "(statement) returns the value or values of a selected parameter.",
    "_glGetError": "(function) returns error information.",
    "_glGetFloatv": "(statement) returns the value or values of a selected parameter.",
    "_glGetIntegerv": "(statement) returns the value or values of a selected parameter.",
    "_glGetLightfv": "(statement) return light source parameter values.",
    "_glGetLightiv": "(statement) return light source parameter values.",
    "_glGetMapdv": "(statement) return evaluator parameters.",
    "_glGetMapfv": "(statement) return evaluator parameters.",
    "_glGetMapiv": "(statement) return evaluator parameters.",
    "_glGetMaterialfv": "(statement) return material parameters.",
    "_glGetMaterialiv": "(statement) return material parameters.",
    "_glGetPixelMapfv": "(statement) return the specified pixel map.",
    "_glGetPixelMapuiv": "(statement) return the specified pixel map.",
    "_glGetPixelMapusv": "(statement) return the specified pixel map.",
    "_glGetPointerv": "(statement) returns the address of a vertex data array.",
    "_glGetPolygonStipple": "(statement) returns the polygon stipple pattern.",
    "_glGetString": "(function) returns a string describing the current OpenGL connection.",
    "_glGetTexEnvfv": "(statement) return texture environment parameters.",
    "_glGetTexEnviv": "(statement) return texture environment parameters.",
    "_glGetTexGendv": "(statement) return texture coordinate generation parameters.",
    "_glGetTexGenfv": "(statement) return texture coordinate generation parameters.",
    "_glGetTexGeniv": "(statement) return texture coordinate generation parameters.",
    "_glGetTexImage": "(statement) returns a texture image.",
    "_glGetTexLevelParameterfv": "(statement) return texture parameter values for a specific level of detail.",
    "_glGetTexLevelParameteriv": "(statement) return texture parameter values for a specific level of detail.",
    "_glGetTexParameterfv": "(statement) return texture parameter values.",
    "_glGetTexParameteriv": "(statement) return texture parameter values.",
    "_glHint": "(statement) specifies implementation-specific hints.",
    "_glIndexMask": "(statement) controls the writing of individual bits in the color-index buffers.",
    "_glIndexPointer": "(statement) defines an array of color indexes.",
    "_glIndexd": "(statement) sets the current color index.",
    "_glIndexdv": "(statement) sets the current color index.",
    "_glIndexf": "(statement) sets the current color index.",
    "_glIndexfv": "(statement) sets the current color index.",
    "_glIndexi": "(statement) sets the current color index.",
    "_glIndexiv": "(statement) sets the current color index.",
    "_glIndexs": "(statement) sets the current color index.",
    "_glIndexsv": "(statement) sets the current color index.",
    "_glIndexub": "(statement) sets the current color index.",
    "_glIndexubv": "(statement) sets the current color index.",
    "_glInitNames": "(statement) initializes the name stack.",
    "_glInterleavedArrays": "(statement) simultaneously specifies and enables several interleaved arrays in a larger aggregate array.",
    "_glIsEnabled": "(function) tests whether a capability is enabled.",
    "_glIsList": "(function) tests for display list existence.",
    "_glIsTexture": "(function) determines if a name corresponds to a texture.",
    "_glLightModelf": "(statement) sets lighting model parameters.",
    "_glLightModelfv": "(statement) sets lighting model parameters.",
    "_glLightModeli": "(statement) sets lighting model parameters.",
    "_glLightModeliv": "(statement) sets lighting model parameters.",
    "_glLightf": "(statement) returns light source parameter values.",
    "_glLightfv": "(statement) returns light source parameter values.",
    "_glLighti": "(statement) returns light source parameter values.",
    "_glLightiv": "(statement) returns light source parameter values.",
    "_glLineStipple": "(statement) specifies the line stipple pattern.",
    "_glLineWidth": "(statement) specifies the width of rasterized lines.",
    "_glListBase": "(statement) sets the display list base for _glCallLists.",
    "_glLoadIdentity": "(statement) replaces the current matrix with the identity matrix.",
    "_glLoadMatrixd": "(statement) replaces the current matrix with an arbitrary matrix.",
    "_glLoadMatrixf": "(statement) replaces the current matrix with an arbitrary matrix.",
    "_glLoadName": "(statement) loads a name onto the name stack.",
    "_glLogicOp": "(statement) specifies a logical pixel operation for color index rendering.",
    "_glMap1d": "(statement) defines a one-dimensional evaluator.",
    "_glMap1f": "(statement) defines a one-dimensional evaluator.",
    "_glMap2d": "(statement) defines a two-dimensional evaluator.",
    "_glMap2f": "(statement) defines a two-dimensional evaluator.",
    "_glMapGrid1d": "(statement) defines a one-dimensional mesh.",
    "_glMapGrid1f": "(statement) defines a one-dimensional mesh.",
    "_glMapGrid2d": "(statement) defines a two-dimensional mesh.",
    "_glMapGrid2f": "(statement) defines a two-dimensional mesh.",
    "_glMaterialf": "(statement) specifies material parameters for the lighting model.",
    "_glMaterialfv": "(statement) specifies material parameters for the lighting model.",
    "_glMateriali": "(statement) specifies material parameters for the lighting model.",
    "_glMaterialiv": "(statement) specifies material parameters for the lighting model.",
    "_glMatrixMode": "(statement) specifies which matrix is the current matrix.",
    "_glMultMatrixd": "(statement) multiplies the current matrix by an arbitrary matrix.",
    "_glMultMatrixf": "(statement) multiplies the current matrix by an arbitrary matrix.",
    "_glNewList": "(statement) the _glNewList and _glEndList statements create or replace a display list.",
    "_glNormal3b": "(statement) sets the current normal vector.",
    "_glNormal3bv": "(statement) sets the current normal vector.",
    "_glNormal3d": "(statement) sets the current normal vector.",
    "_glNormal3dv": "(statement) sets the current normal vector.",
    "_glNormal3f": "(statement) sets the current normal vector.",
    "_glNormal3fv": "(statement) sets the current normal vector.",
    "_glNormal3i": "(statement) sets the current normal vector.",
    "_glNormal3iv": "(statement) sets the current normal vector.",
    "_glNormal3s": "(statement) sets the current normal vector.",
    "_glNormal3sv": "(statement) sets the current normal vector.",
    "_glNormalPointer": "(statement) defines an array of normals.",
    "_glOrtho": "(statement) multiplies the current matrix by an orthographic matrix.",
    "_glPassThrough": "(statement) places a marker in the feedback buffer.",
    "_gluPerspective": "(statement) sets up a perspective projection matrix.",
    "_glPixelMapfv": "(statement) sets up pixel transfer maps.",
    "_glPixelMapuiv": "(statement) sets up pixel transfer maps.",
    "_glPixelMapusv": "(statement) sets up pixel transfer maps.",
    "_glPixelStoref": "(statement) sets pixel storage modes.",
    "_glPixelStorei": "(statement) sets pixel storage modes.",
    "_glPixelTransferf": "(statement) sets pixel transfer modes.",
    "_glPixelTransferi": "(statement) sets pixel transfer modes.",
    "_glPixelZoom": "(statement) specifies the pixel zoom factors.",
    "_glPointSize": "(statement) specifies the diameter of rasterized points.",
    "_glPolygonMode": "(statement) selects a polygon rasterization mode.",
    "_glPolygonOffset": "(statement) sets the scale and units OpenGL uses to calculate depth values.",
    "_glPolygonStipple": "(statement) sets the polygon stippling pattern.",
    "_glPopAttrib": "(statement) the _glPushAttrib and _glPopAttrib statements push and pop the attribute stack.",
    "_glPopClientAttrib": "(statement) the _glPushClientAttrib and _glPopClientAttrib statements save and restore groups of client-state variables on the client-attribute stack.",
    "_glPopMatrix": "(statement) the _glPushMatrix and _glPopMatrix statements push and pop the current matrix stack.",
    "_glPopName": "(statement) the _glPushName and _glPopName statements push and pop the name stack.",
    "_glPrioritizeTextures": "(statement) sets the residence priority of textures.",
    "_glPushAttrib": "(statement) the _glPushAttrib and _glPopAttrib statements push and pop the attribute stack.",
    "_glPushClientAttrib": "(statement) the _glPushClientAttrib and _glPopClientAttrib statements save and restore groups of client-state variables on the client-attribute stack.",
    "_glPushMatrix": "(statement) the _glPushMatrix and _glPopMatrix statements push and pop the current matrix stack.",
    "_glPushName": "(statement) the _glPushName and _glPopName statements push and pop the name stack.",
    "_glRasterPos2d": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos2dv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos2f": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos2fv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos2i": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos2iv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos2s": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos2sv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos3d": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos3dv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos3f": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos3fv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos3i": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos3iv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos3s": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos3sv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos4d": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos4dv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos4f": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos4fv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos4i": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos4iv": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos4s": "(statement) specifies the raster position for pixel operations.",
    "_glRasterPos4sv": "(statement) specifies the raster position for pixel operations.",
    "_glReadBuffer": "(statement) selects a color buffer source for pixels.",
    "_glReadPixels": "(statement) reads a block of pixels from the framebuffer.",
    "_glRectd": "(statement) draws a rectangle.",
    "_glRectdv": "(statement) draws a rectangle.",
    "_glRectf": "(statement) draws a rectangle.",
    "_glRectfv": "(statement) draws a rectangle.",
    "_glRecti": "(statement) draws a rectangle.",
    "_glRectiv": "(statement) draws a rectangle.",
    "_glRects": "(statement) draws a rectangle.",
    "_glRectsv": "(statement) draws a rectangle.",
    "_glRenderMode": "(function) sets the rasterization mode and returns the previous active mode.",
    "_glRotated": "(statement) multiplies the current matrix by a rotation matrix.",
    "_glRotatef": "(statement) multiplies the current matrix by a rotation matrix.",
    "_glScaled": "(statement) multiplies the current matrix by a general scaling matrix.",
    "_glScalef": "(statement) multiplies the current matrix by a general scaling matrix.",
    "_glScissor": "(statement) defines the scissor box.",
    "_glSelectBuffer": "(statement) establishes a buffer for selection mode values.",
    "_glShadeModel": "(statement) selects flat or smooth shading.",
    "_glStencilFunc": "(statement) sets the function and reference value for stencil testing.",
    "_glStencilMask": "(statement) controls the writing of individual bits in the stencil planes.",
    "_glStencilOp": "(statement) sets the stencil test actions.",
    "_glTexCoord1d": "(statement) sets the current texture coordinates.",
    "_glTexCoord1dv": "(statement) sets the current texture coordinates.",
    "_glTexCoord1f": "(statement) sets the current texture coordinates.",
    "_glTexCoord1fv": "(statement) sets the current texture coordinates.",
    "_glTexCoord1i": "(statement) sets the current texture coordinates.",
    "_glTexCoord1iv": "(statement) sets the current texture coordinates.",
    "_glTexCoord1s": "(statement) sets the current texture coordinates.",
    "_glTexCoord1sv": "(statement) sets the current texture coordinates.",
    "_glTexCoord2d": "(statement) sets the current texture coordinates.",
    "_glTexCoord2dv": "(statement) sets the current texture coordinates.",
    "_glTexCoord2f": "(statement) sets the current texture coordinates.",
    "_glTexCoord2fv": "(statement) sets the current texture coordinates.",
    "_glTexCoord2i": "(statement) sets the current texture coordinates.",
    "_glTexCoord2iv": "(statement) sets the current texture coordinates.",
    "_glTexCoord2s": "(statement) sets the current texture coordinates.",
    "_glTexCoord2sv": "(statement) sets the current texture coordinates.",
    "_glTexCoord3d": "(statement) sets the current texture coordinates.",
    "_glTexCoord3dv": "(statement) sets the current texture coordinates.",
    "_glTexCoord3f": "(statement) sets the current texture coordinates.",
    "_glTexCoord3fv": "(statement) sets the current texture coordinates.",
    "_glTexCoord3i": "(statement) sets the current texture coordinates.",
    "_glTexCoord3iv": "(statement) sets the current texture coordinates.",
    "_glTexCoord3s": "(statement) sets the current texture coordinates.",
    "_glTexCoord3sv": "(statement) sets the current texture coordinates.",
    "_glTexCoord4d": "(statement) sets the current texture coordinates.",
    "_glTexCoord4dv": "(statement) sets the current texture coordinates.",
    "_glTexCoord4f": "(statement) sets the current texture coordinates.",
    "_glTexCoord4fv": "(statement) sets the current texture coordinates.",
    "_glTexCoord4i": "(statement) sets the current texture coordinates.",
    "_glTexCoord4iv": "(statement) sets the current texture coordinates.",
    "_glTexCoord4s": "(statement) sets the current texture coordinates.",
    "_glTexCoord4sv": "(statement) sets the current texture coordinates.",
    "_glTexCoordPointer": "(statement) defines an array of texture coordinates.",
    "_glTexEnvf": "(statement) sets a texture environment parameter.",
    "_glTexEnvfv": "(statement) sets a texture environment parameter.",
    "_glTexEnvi": "(statement) sets a texture environment parameter.",
    "_glTexEnviv": "(statement) sets a texture environment parameter.",
    "_glTexGend": "(statement) controls the generation of texture coordinates.",
    "_glTexGendv": "(statement) controls the generation of texture coordinates.",
    "_glTexGenf": "(statement) controls the generation of texture coordinates.",
    "_glTexGenfv": "(statement) controls the generation of texture coordinates.",
    "_glTexGeni": "(statement) controls the generation of texture coordinates.",
    "_glTexGeniv": "(statement) controls the generation of texture coordinates.",
    "_glTexImage1D": "(statement) specifies a one-dimensional texture image.",
    "_glTexImage2D": "(statement) specifies a two-dimensional texture image.",
    "_glTexParameterf": "(statement) sets texture parameters.",
    "_glTexParameterfv": "(statement) sets texture parameters.",
    "_glTexParameteri": "(statement) sets texture parameters.",
    "_glTexParameteriv": "(statement) sets texture parameters.",
    "_glTexSubImage1D": "(statement) specifies a portion of an existing one-dimensional texture image.",
    "_glTexSubImage2D": "(statement) specifies a portion of an existing one-dimensional texture image.",
    "_glTranslated": "(statement) multiplies the current matrix by a translation matrix.",
    "_glTranslatef": "(statement) multiplies the current matrix by a translation matrix.",
    "_glVertex2d": "(statement) specifies a vertex.",
    "_glVertex2dv": "(statement) specifies a vertex.",
    "_glVertex2f": "(statement) specifies a vertex.",
    "_glVertex2fv": "(statement) specifies a vertex.",
    "_glVertex2i": "(statement) specifies a vertex.",
    "_glVertex2iv": "(statement) specifies a vertex.",
    "_glVertex2s": "(statement) specifies a vertex.",
    "_glVertex2sv": "(statement) specifies a vertex.",
    "_glVertex3d": "(statement) specifies a vertex.",
    "_glVertex3dv": "(statement) specifies a vertex.",
    "_glVertex3f": "(statement) specifies a vertex.",
    "_glVertex3fv": "(statement) specifies a vertex.",
    "_glVertex3i": "(statement) specifies a vertex.",
    "_glVertex3iv": "(statement) specifies a vertex.",
    "_glVertex3s": "(statement) specifies a vertex.",
    "_glVertex3sv": "(statement) specifies a vertex.",
    "_glVertex4d": "(statement) specifies a vertex.",
    "_glVertex4dv": "(statement) specifies a vertex.",
    "_glVertex4f": "(statement) specifies a vertex.",
    "_glVertex4fv": "(statement) specifies a vertex.",
    "_glVertex4i": "(statement) specifies a vertex.",
    "_glVertex4iv": "(statement) specifies a vertex.",
    "_glVertex4s": "(statement) specifies a vertex.",
    "_glVertex4sv": "(statement) specifies a vertex.",
    "_glVertexPointer": "(statement) defines an array of vertex data.",
    "_glViewport": "(statement) sets the viewport.",
    "; Semicolon": "after a PRINT stops invisible cursor at end of printed value. Can prevent screen rolling. A Semicolon after the INPUT prompt text will display a question mark after the text.",
    ", Comma": "after a PRINT tabs invisible cursor past end of printed value. After the INPUT prompt text a comma displays no Question mark.",
    "\" Quotation mark": "designates the ends of a literal STRING value. Use CHR$(34) to insert quotes in a text STRING.",
    "? Question mark": "is a shortcut substitute for the PRINT keyword. Will change to PRINT when cursor leaves the code line.",
    "' Apostrophe": "ignores a line of code or program comment and must be used before a legacy QBasic Metacommand. Same as using REM.",
    ": Colons": "can be used to separate two procedure statements on one code line.",
    "$ Dollar sign": "used as prefix denotes a legacy QBasic Metacommand, used as suffix it denotes a STRING variable.",
    "( ) Parenthesis": "enclose a math or conditional procedure order, SUB or FUNCTION parameters or to pass by value.",
    "+ Plus": "concatenation operator MUST be used to combine literal string values in a variable definition.",
    "_ Underscore": "can be used to continue a line of code to the next program line in QB64.",
    "$ STRING": "text character type: 1 byte",
    "! SINGLE": "floating decimal point numerical type (4 bytes)",
    "# DOUBLE": "floating decimal point numerical type (8 bytes)",
    "## _FLOAT": "QB64 decimal point numerical type (32 bytes)",
    "~ _UNSIGNED": "QB64 whole positive numerical type when it precedes the 6 numerical suffixes below:",
    "% INTEGER": "whole numerical type (2 bytes)",
    "& LONG": "whole numerical type (4 bytes}",
    "&& _INTEGER64": "QB64 whole numerical type (8 bytes)",
    "` _BIT": "QB64 whole numerical type (1 bit) (Key below tilde (~) or CHR$(96))",
    "%% _BYTE": "QB64 whole numerical type (1 byte)",
    "%& _OFFSET": "QB64 whole numerical pointer address type (any byte size required)",
    "&B Binary": "Base 2: Digits 0 or 1 [QB64]",
    "&O Octal": "Base 8: Digits 0 to 7",
    "&H Hexadecimal": "Base 16: Digits 0 to F",
    "+ Addition": "operator or sign",
    "- Subtraction": "operator or sign",
    "* Multiplication": "operator",
    "/ Division": "(floating decimal point) operator",
    "\\ Integer division": "operator",
    "^ Exponential": "operator",
    "MOD Integer Remainder division": "operator",
    "Historic": "B C D F G I P S T",
    "ON": "ON creates event procedure calls or enables event trapping.",
    "Keyword not supported in Linux or macOS versions": "QB64 is meant to be compatible with QB 4.5 or lower versions. PDS (7.1) is not supported. The keywords listed below are currently not supported in QB64. However, older code that uses these keywords won't generate errors, as these are ignored by the compiler.",
    "arc tangent": "The ATN or arctangent function returns the angle in radians of a numerical tangent value.",
    "Metacommands overview": "Metacommands are commands that start with dollar sign ($). Those commands usually switch the program between different operation modes/behavior or provide extended functionality.",
    "COSine": "The COS function returns the horizontal component or the cosine of an angle measured in radians.",
    "Console Windows": "QB64 has console window support using the following QB64 Metacommand or keyword:",
    "Keywords currently not supported by QB64": "QB64 is meant to be compatible with QB 4.5 or lower versions. PDS (7.1) is not supported. The keywords listed below are currently not supported in QB64. However, older code that uses these keywords won't generate errors, as these are ignored by the compiler.",
    "alpha": "The _ALPHA function returns the alpha channel transparency level of a color value used on a screen page or image.",
    "Frequently Asked Questions about QB64": "As with everything else, this list will be updated to correspond to new progress of the QB64 language, so make sure that you are using the latest version of QB64 or in our case QB64-PE, which stands for QB64 Phoenix Edition. Please note that it may take a short time to update this list.",
    "automatic display": "The _AUTODISPLAY statement enables the automatic display of the screen image changes previously disabled by _DISPLAY.",
    "string": "STRING variables or literal values are one byte per character length text or ASCII characters.",
    "boolean": "Boolean statements are evaluations that return true (-1) or false (0) values. This are for instance the Relational Operations, but also functions such as _FILEEXISTS, EOF, _SCREENEXISTS etc. return those values when checking for certain conditions. The results of those evaluations or function calls can be used in other mathematical or logical operations.",
    "font": "The _FONT statement sets the current _LOADFONT function font handle to be used by PRINT.",
    "array": "Arrays are simply variables with a number of elements that can each hold data in memory. To designate a certain element, integers denote the value's position in memory. Don't let talk about memory scare you! Basic does all of the work for you just by using the simple commands in this tutorial. Besides that, you have already been using memory since you created your first variable!",
    "MEM": "The _MEM variable type can be used when working with memory blocks. It has no variable type suffix.",
    "DEVICE$": "The _DEVICE$ function returns a STRING value holding the controller type, name and input types of the input devices on a computer.",
    "ALPHA": "The _ALPHA function returns the alpha channel transparency level of a color value used on a screen page or image.",
    "Unicode": "CP437 is the character set of the original IBM PC. It is also known as DOS-US, OEM-US or IBM Extended character set. They also may erroneously be referred to as the OEM font, Extended ASCII or High ASCII.",
    "DECLARE LIBRARY": "The DECLARE LIBRARY declaration allows for the utilization of external library SUB and FUNCTION procedures.",
    "circle": "The CIRCLE statement is used in graphic SCREEN modes to create circles, arcs or ellipses.",
    "IF": "IF...THEN statements make boolean (true or false) evaluations to automate program decision making.",
    "tangent": "The TAN function returns the ratio of SINe to COSine or tangent value of an angle measured in radians.",
    "Microsoft Binary Format": "The MKDMBF$ function encodes a double-precision IEEE number to a string value in the Microsoft Binary format.",
    "SINe": "The SIN function returns the vertical component or sine of an angle measured in radians.",
    "CHAINed": "CHAIN is used to change seamlessly from one module to another one in a program.",
    "screen": "The SCREEN statement sets the video display mode and size of the program window's workspace.",
    "STRINGs": "STRING variables or literal values are one byte per character length text or ASCII characters.",
    "segment": "The memory segment is the hexadecimal byte address in relation to a segment register.",
    "ERROR code": "This page lists all the error codes defined in QB64 that can occur in a program when running. Unless overridden with an ON ERROR handler, these result in a dialog box appearing. Due to legacy holdovers from previous BASIC dialects, not all of these errors may actually occur in a program (unless manually triggered with ERROR).",
    "opened": "The OPEN statement is used to open a file or COM serial communications port for program input or output.",
    "ENDs": "The END statement terminates a program without an immediate exit or ends a procedure or statement block.",
    "RESUME NEXT": "The RESUME statement is used with NEXT or a line number or label in an error handling routine.",
    "dynamic": "The $DYNAMIC metacommand allows the creation of dynamic (resizable) arrays.",
    "strings": "STRING variables or literal values are one byte per character length text or ASCII characters.",
    "whole": "INTEGER is a 2-byte number type definition that can hold whole numerical values.",
    "Metacommand": "Metacommands are commands that start with dollar sign ($). Those commands usually switch the program between different operation modes/behavior or provide extended functionality.",
    "Relational Operations": "QB64 supports several relational operations, which are binary operations that test numeric or string values and return an INTEGER value representing a boolean true (-1) or false (0) result. These operations are primarily used in expressions where a condition is required, such as the IF...THEN statement.",
    "concatenation": "Concatenation is a process where literal or variable STRING values are combined using the + operator.",
    "Question mark": "A question mark can be used as a substitute shortcut to typing PRINT when creating code.",
    "comma": "The comma is used to TAB the cursor after a PRINT statement's text to tab append another printed value.",
    "Semicolon": "The semicolon is used in a PRINT statement to stop the screen print cursor immediately after the printed value."
  }
}