{
  "categories": {
    "statements": {
      "description": "QB64PE statements that perform actions",
      "keywords": [
        "_ACCEPTFILEDROP",
        "_ALLOWFULLSCREEN",
        "_ASSERT",
        "_AUTODISPLAY",
        "_BLEND",
        "_BLINK",
        "_CAPSLOCK",
        "_CLEARCOLOR",
        "_CLIP",
        "_CLIPBOARDIMAGE",
        "_CONSOLE",
        "_CONSOLECURSOR",
        "_CONSOLEFONT",
        "_CONSOLETITLE",
        "_CONTINUE",
        "_CONTROLCHR",
        "_COPYPALETTE",
        "_DEFINE",
        "_DELAY",
        "_DEPTHBUFFER",
        "_DEST",
        "_DISPLAY",
        "_DISPLAYORDER",
        "_DONTBLEND",
        "_DONTWAIT",
        "_ECHO",
        "_FINISHDROP",
        "_FONT",
        "_FREEFONT",
        "_FREEIMAGE",
        "_FULLSCREEN",
        "_GLRENDER",
        "_HIDE",
        "_ICON",
        "_KEYCLEAR",
        "_LIMIT",
        "_LOGERROR",
        "_LOGINFO",
        "_LOGTRACE",
        "_LOGWARN",
        "_MAPTRIANGLE",
        "_MAPUNICODE",
        "_MEMCOPY",
        "_MEMFILL",
        "_MEMFREE",
        "_MEMGET",
        "_MEMPUT",
        "_MESSAGEBOX",
        "_MIDISOUNDBANK",
        "_MOUSEHIDE",
        "_MOUSEMOVE",
        "_MOUSESHOW",
        "_NOTIFYPOPUP",
        "_NUMLOCK",
        "_PALETTECOLOR",
        "_PRESERVE",
        "_PRINTIMAGE",
        "_PRINTMODE",
        "_PRINTSTRING",
        "_PUTIMAGE",
        "_RESIZE",
        "_SAVEIMAGE",
        "_SCREENCLICK",
        "_SCREENHIDE",
        "_SCREENICON",
        "_SCREENMOVE",
        "_SCREENPRINT",
        "_SCREENSHOW",
        "_SCROLLLOCK",
        "_SETALPHA",
        "_SNDBAL",
        "_SNDCLOSE",
        "_SNDLIMIT",
        "_SNDLOOP",
        "_SNDPAUSE",
        "_SNDPLAY",
        "_SNDPLAYCOPY",
        "_SNDPLAYFILE",
        "_SNDRAW",
        "_SNDRAWBATCH",
        "_SNDRAWDONE",
        "_SNDSETPOS",
        "_SNDSTOP",
        "_SNDVOL",
        "_SOURCE",
        "_TITLE",
        "_UPRINTSTRING",
        "_WAVE",
        "_WRITEFILE",
        "ACCESS",
        "ALIAS",
        "APPEND",
        "AS",
        "ASC",
        "BEEP",
        "BINARY",
        "BLOAD",
        "BSAVE",
        "BYVAL",
        "CALL",
        "CALL ABSOLUTE",
        "CASE",
        "CASE ELSE",
        "CASE IS",
        "CHAIN",
        "CHDIR",
        "CIRCLE",
        "CLEAR",
        "CLOSE",
        "CLS",
        "COLOR",
        "COMMON",
        "DATA",
        "DECLARE LIBRARY (QB64 statement block)",
        "DEF SEG",
        "DEFDBL",
        "DEFINT",
        "DEFLNG",
        "DEFSNG",
        "DEFSTR",
        "DIM",
        "DO...LOOP",
        "DRAW",
        "ELSE",
        "ELSEIF",
        "END",
        "END IF",
        "ENVIRON",
        "ERASE",
        "ERROR",
        "EXIT",
        "FIELD",
        "FILES",
        "FOR...NEXT",
        "FOR (file statement)",
        "FREE",
        "FUNCTION",
        "GET",
        "GET (HTTP statement)",
        "GET (graphics statement)",
        "GOSUB",
        "GOTO",
        "IF...THEN",
        "INPUT",
        "INPUT (file mode)",
        "INPUT (file statement)",
        "INTERRUPT",
        "INTERRUPTX",
        "KEY n",
        "KEY(n)",
        "KEY LIST",
        "KILL",
        "LET",
        "LINE",
        "LINE INPUT",
        "LIST",
        "LOCATE",
        "LOCK",
        "LOOP",
        "LPRINT",
        "LPRINT USING",
        "LSET",
        "MKDIR",
        "NAME",
        "NEXT",
        "OFF",
        "ON ERROR",
        "ON KEY(n)",
        "ON STRIG(n)",
        "ON TIMER(n)",
        "ON...GOSUB",
        "ON...GOTO",
        "OPEN",
        "OPEN COM",
        "OUT",
        "OUTPUT",
        "PAINT",
        "PALETTE",
        "PALETTE USING",
        "PCOPY",
        "PLAY",
        "POKE",
        "PRESET",
        "PRINT",
        "PRINT (file statement)",
        "PRINT USING",
        "PRINT USING (file statement)",
        "PSET",
        "PUT",
        "PUT (QB64 TCP/IP statement)",
        "PUT (graphics statement)",
        "RANDOM",
        "RANDOMIZE",
        "RANDOMIZE USING (QB64 statement)",
        "READ",
        "REDIM",
        "REM",
        "RESET",
        "RESTORE",
        "RESUME",
        "RETURN",
        "RMDIR",
        "RSET",
        "RUN",
        "SCREEN",
        "SEEK",
        "SELECT CASE",
        "SHARED",
        "SHELL",
        "SLEEP",
        "SOUND",
        "STATIC",
        "STEP",
        "STOP",
        "STRIG(n)",
        "SUB",
        "SWAP",
        "SYSTEM",
        "THEN",
        "TIMER",
        "TO",
        "TYPE",
        "UNLOCK",
        "UNTIL",
        "VIEW",
        "VIEW PRINT",
        "WAIT",
        "WEND",
        "WHILE",
        "WHILE...WEND",
        "WIDTH",
        "WINDOW",
        "WRITE",
        "WRITE (file statement)",
        "SUB _GL",
        "; Semicolon",
        ", Comma",
        "\" Quotation mark",
        "? Question mark",
        ": Colons",
        "( ) Parenthesis",
        "+ Plus",
        "_ Underscore",
        "! SINGLE",
        "# DOUBLE",
        "## _FLOAT",
        "~ _UNSIGNED",
        "% INTEGER",
        "& LONG",
        "&& _INTEGER64",
        "` _BIT",
        "%% _BYTE",
        "%& _OFFSET",
        "&B Binary",
        "&O Octal",
        "&H Hexadecimal",
        "+ Addition",
        "- Subtraction",
        "* Multiplication",
        "/ Division",
        "\\ Integer division",
        "^ Exponential",
        "MOD Integer Remainder division",
        "Historic",
        "ON",
        "Keyword not supported in Linux or macOS versions",
        "Metacommands overview",
        "Console Windows",
        "Keywords currently not supported by QB64",
        "Frequently Asked Questions about QB64",
        "automatic display",
        "string",
        "font",
        "array",
        "MEM",
        "Unicode",
        "DECLARE LIBRARY",
        "circle",
        "IF",
        "Microsoft Binary Format",
        "CHAINed",
        "screen",
        "STRINGs",
        "segment",
        "opened",
        "ENDs",
        "RESUME NEXT",
        "dynamic",
        "strings",
        "whole",
        "Metacommand",
        "Relational Operations",
        "concatenation",
        "Question mark",
        "comma",
        "Semicolon"
      ]
    },
    "functions": {
      "description": "QB64PE functions that return values",
      "keywords": [
        "_ACOS",
        "_ACOSH",
        "_ADLER32",
        "_ALPHA",
        "_ALPHA32",
        "_ARCCOT",
        "_ARCCSC",
        "_ARCSEC",
        "_ASIN",
        "_ASINH",
        "_ATAN2",
        "_ATANH",
        "_AUTODISPLAY",
        "_AXIS",
        "_BACKGROUNDCOLOR",
        "_BIN$",
        "_BLEND",
        "_BLINK",
        "_BLUE",
        "_BLUE32",
        "_BRIGHTNESS32",
        "_BUTTON",
        "_BUTTONCHANGE",
        "_CAPSLOCK",
        "_CAST",
        "_CEIL",
        "_CINP",
        "_CLAMP",
        "_CLEARCOLOR",
        "_CLIPBOARD$",
        "_CLIPBOARD$",
        "_CLIPBOARDIMAGE",
        "_COLORCHOOSERDIALOG",
        "_COMMANDCOUNT",
        "_CONNECTED",
        "_CONNECTIONADDRESS$",
        "_CONSOLEINPUT",
        "_CONTROLCHR",
        "_COPYIMAGE",
        "_COT",
        "_COTH",
        "_COSH",
        "_CRC32",
        "_CSC",
        "_CSCH",
        "_CV",
        "_CWD$",
        "_D2G",
        "_D2R",
        "_DECODEURL$",
        "_DEFAULTCOLOR",
        "_DEFLATE$",
        "_DESKTOPHEIGHT",
        "_DESKTOPWIDTH",
        "_DEST",
        "_DEVICE$",
        "_DEVICEINPUT",
        "_DEVICES",
        "_DIR$",
        "_DIREXISTS",
        "_DISPLAY",
        "_DROPPEDFILE",
        "_EMBEDDED$",
        "_ENCODEURL$",
        "_ENVIRONCOUNT",
        "_ERRORLINE",
        "_ERRORMESSAGE$",
        "_EXIT",
        "_FILEEXISTS",
        "_FILES$",
        "_FONT",
        "_FONTHEIGHT",
        "_FONTWIDTH",
        "_FREETIMER",
        "_FULLPATH$",
        "_FULLSCREEN",
        "_G2D",
        "_G2R",
        "_GREEN",
        "_GREEN32",
        "_HEIGHT",
        "_HSB32",
        "_HSBA32",
        "_HUE32",
        "_HYPOT",
        "_IIF",
        "_INCLERRORFILE$",
        "_INCLERRORLINE",
        "_INFLATE$",
        "_INPUTBOX$",
        "_INSTRREV",
        "_KEYHIT",
        "_KEYDOWN",
        "_LASTAXIS",
        "_LASTBUTTON",
        "_LASTWHEEL",
        "_LOADFONT",
        "_LOADIMAGE",
        "_LOGMINLEVEL",
        "_MAPUNICODE",
        "_MAX",
        "_MD5$",
        "_MEMELEMENT",
        "_MEMEXISTS",
        "_MEMGET",
        "_MEMIMAGE",
        "_MEMNEW",
        "_MEMSOUND",
        "_MESSAGEBOX",
        "_MIN",
        "_MK$",
        "_MOUSEBUTTON",
        "_MOUSEHIDDEN",
        "_MOUSEINPUT",
        "_MOUSEMOVEMENTX",
        "_MOUSEMOVEMENTY",
        "_MOUSEWHEEL",
        "_MOUSEX",
        "_MOUSEY",
        "_NEWIMAGE",
        "_NUMLOCK",
        "_OFFSET",
        "_OPENCLIENT",
        "_OPENCONNECTION",
        "_OPENFILEDIALOG$",
        "_OPENHOST",
        "_OS$",
        "_PALETTECOLOR",
        "_PRINTMODE",
        "_PRINTWIDTH",
        "_R2D",
        "_R2G",
        "_RED",
        "_RED32",
        "_READBIT",
        "_READFILE$",
        "_RESETBIT",
        "_RESIZE",
        "_RESIZEHEIGHT",
        "_RESIZEWIDTH",
        "_RGB",
        "_RGB32",
        "_RGBA",
        "_RGBA32",
        "_ROL",
        "_ROR",
        "_ROUND",
        "_SATURATION32",
        "_SAVEFILEDIALOG$",
        "_SEC",
        "_SECH",
        "_SELECTFOLDERDIALOG$",
        "_SCREENEXISTS",
        "_SCREENICON",
        "_SCREENIMAGE",
        "_SCREENX",
        "_SCREENY",
        "_SCROLLLOCK",
        "_SETBIT",
        "_SHELLHIDE",
        "_SHL",
        "_SHR",
        "_SINH",
        "_SMOOTH",
        "_SNDCOPY",
        "_SNDGETPOS",
        "_SNDLEN",
        "_SNDNEW",
        "_SNDOPEN",
        "_SNDOPENRAW",
        "_SNDPAUSED",
        "_SNDPLAYING",
        "_SNDRATE",
        "_SNDRAWLEN",
        "_SOURCE",
        "_STARTDIR$",
        "_STATUSCODE",
        "_STRCMP",
        "_STRICMP",
        "_TANH",
        "_TITLE$",
        "_TOGGLEBIT",
        "_TOSTR$",
        "_TOTALDROPPEDFILES",
        "_TRIM$",
        "_UCHARPOS",
        "_UFONTHEIGHT",
        "_ULINESPACING",
        "_UPRINTWIDTH",
        "_WHEEL",
        "_WIDTH",
        "_WINDOWHANDLE",
        "_WINDOWHASFOCUS",
        "ABS",
        "ASC",
        "ATN",
        "CDBL",
        "CHR$",
        "CINT",
        "CLNG",
        "COMMAND$",
        "COS",
        "CSNG",
        "CSRLIN",
        "CVD",
        "CVDMBF",
        "CVI",
        "CVL",
        "CVS",
        "CVSMBF",
        "DATE$",
        "ENVIRON$",
        "EOF",
        "ERL",
        "ERR",
        "EXP",
        "FIX",
        "FREEFILE",
        "GET (TCP/IP statement)",
        "HEX$",
        "INKEY$",
        "INP",
        "INPUT$",
        "INSTR",
        "INT",
        "LBOUND",
        "LCASE$",
        "LEFT$",
        "LEN",
        "LINE INPUT (file statement)",
        "LOC",
        "LOF",
        "LOG",
        "LPOS",
        "LTRIM$",
        "MID$",
        "MID$",
        "MKD$",
        "MKDMBF$",
        "MKI$",
        "MKL$",
        "MKS$",
        "MKSMBF$",
        "OCT$",
        "PEEK",
        "PLAY",
        "PMAP",
        "POINT",
        "POS",
        "RIGHT$",
        "RND",
        "RTRIM$",
        "SADD",
        "SCREEN",
        "SEEK",
        "SGN",
        "SHELL",
        "SIN",
        "SPACE$",
        "SPC",
        "SQR",
        "STICK",
        "STR$",
        "STRIG",
        "STRING$",
        "TAB",
        "TAN",
        "TIME$",
        "TIMER",
        "UBOUND",
        "UCASE$",
        "VAL",
        "VARPTR",
        "VARPTR$",
        "VARSEG",
        "arc tangent",
        "COSine",
        "alpha",
        "boolean",
        "DEVICE$",
        "ALPHA",
        "tangent",
        "SINe"
      ]
    },
    "operators": {
      "description": "Mathematical and logical operators",
      "keywords": [
        "_ANDALSO",
        "_NEGATE",
        "_ORELSE",
        "AND",
        "AND (boolean)",
        "EQV",
        "IMP",
        "MOD",
        "NOT",
        "OR",
        "OR (boolean)",
        "XOR (boolean)"
      ]
    },
    "metacommands": {
      "description": "Compiler directives starting with $",
      "keywords": [
        "$ASSERTS",
        "$CHECKING",
        "$COLOR",
        "$CONSOLE",
        "$DEBUG",
        "$ELSE",
        "$ELSEIF",
        "$EMBED",
        "$END IF",
        "$ERROR",
        "$EXEICON",
        "$FORMAT",
        "$IF",
        "$INCLUDEONCE",
        "$LET",
        "$MIDISOUNDFONT",
        "$NOPREFIX",
        "$RESIZE",
        "$SCREENHIDE",
        "$SCREENSHOW",
        "$UNSTABLE",
        "$VERSIONINFO",
        "$DYNAMIC",
        "$INCLUDE",
        "$STATIC",
        "$ Dollar sign",
        "$ STRING"
      ]
    },
    "opengl": {
      "description": "OpenGL graphics functions and statements",
      "keywords": [
        "_glAccum",
        "_glAlphaFunc",
        "_glAreTexturesResident",
        "_glArrayElement",
        "_glBegin",
        "_glBindTexture",
        "_glBitmap",
        "_glBlendFunc",
        "_glCallList",
        "_glCallLists",
        "_glClear",
        "_glClearAccum",
        "_glClearColor",
        "_glClearDepth",
        "_glClearIndex",
        "_glClearStencil",
        "_glClipPlane",
        "_glColor3b",
        "_glColor3bv",
        "_glColor3d",
        "_glColor3dv",
        "_glColor3f",
        "_glColor3fv",
        "_glColor3i",
        "_glColor3iv",
        "_glColor3s",
        "_glColor3sv",
        "_glColor3ub",
        "_glColor3ubv",
        "_glColor3ui",
        "_glColor3uiv",
        "_glColor3us",
        "_glColor3usv",
        "_glColor4b",
        "_glColor4bv",
        "_glColor4d",
        "_glColor4dv",
        "_glColor4f",
        "_glColor4fv",
        "_glColor4i",
        "_glColor4iv",
        "_glColor4s",
        "_glColor4sv",
        "_glColor4ub",
        "_glColor4ubv",
        "_glColor4ui",
        "_glColor4uiv",
        "_glColor4us",
        "_glColor4usv",
        "_glColorMask",
        "_glColorMaterial",
        "_glColorPointer",
        "_glCopyPixels",
        "_glCopyTexImage1D",
        "_glCopyTexImage2D",
        "_glCopyTexSubImage1D",
        "_glCopyTexSubImage2D",
        "_glCullFace",
        "_glDeleteLists",
        "_glDeleteTextures",
        "_glDepthFunc",
        "_glDepthMask",
        "_glDepthRange",
        "_glDisable",
        "_glDisableClientState",
        "_glDrawArrays",
        "_glDrawBuffer",
        "_glDrawElements",
        "_glDrawPixels",
        "_glEdgeFlag",
        "_glEdgeFlagv",
        "_glEdgeFlagPointer",
        "_glEnable",
        "_glEnableClientState",
        "_glEnd",
        "_glEndList",
        "_glEvalCoord1d",
        "_glEvalCoord1dv",
        "_glEvalCoord1f",
        "_glEvalCoord1fv",
        "_glEvalCoord2d",
        "_glEvalCoord2dv",
        "_glEvalCoord2f",
        "_glEvalCoord2fv",
        "_glEvalMesh1",
        "_glEvalMesh2",
        "_glEvalPoint1",
        "_glEvalPoint2",
        "_glFeedbackBuffer",
        "_glFinish",
        "_glFlush",
        "_glFogf",
        "_glFogfv",
        "_glFogi",
        "_glFogiv",
        "_glFrontFace",
        "_glFrustum",
        "_glGenLists",
        "_glGenTextures",
        "_glGetBooleanv",
        "_glGetClipPlane",
        "_glGetDoublev",
        "_glGetError",
        "_glGetFloatv",
        "_glGetIntegerv",
        "_glGetLightfv",
        "_glGetLightiv",
        "_glGetMapdv",
        "_glGetMapfv",
        "_glGetMapiv",
        "_glGetMaterialfv",
        "_glGetMaterialiv",
        "_glGetPixelMapfv",
        "_glGetPixelMapuiv",
        "_glGetPixelMapusv",
        "_glGetPointerv",
        "_glGetPolygonStipple",
        "_glGetString",
        "_glGetTexEnvfv",
        "_glGetTexEnviv",
        "_glGetTexGendv",
        "_glGetTexGenfv",
        "_glGetTexGeniv",
        "_glGetTexImage",
        "_glGetTexLevelParameterfv",
        "_glGetTexLevelParameteriv",
        "_glGetTexParameterfv",
        "_glGetTexParameteriv",
        "_glHint",
        "_glIndexMask",
        "_glIndexPointer",
        "_glIndexd",
        "_glIndexdv",
        "_glIndexf",
        "_glIndexfv",
        "_glIndexi",
        "_glIndexiv",
        "_glIndexs",
        "_glIndexsv",
        "_glIndexub",
        "_glIndexubv",
        "_glInitNames",
        "_glInterleavedArrays",
        "_glIsEnabled",
        "_glIsList",
        "_glIsTexture",
        "_glLightModelf",
        "_glLightModelfv",
        "_glLightModeli",
        "_glLightModeliv",
        "_glLightf",
        "_glLightfv",
        "_glLighti",
        "_glLightiv",
        "_glLineStipple",
        "_glLineWidth",
        "_glListBase",
        "_glLoadIdentity",
        "_glLoadMatrixd",
        "_glLoadMatrixf",
        "_glLoadName",
        "_glLogicOp",
        "_glMap1d",
        "_glMap1f",
        "_glMap2d",
        "_glMap2f",
        "_glMapGrid1d",
        "_glMapGrid1f",
        "_glMapGrid2d",
        "_glMapGrid2f",
        "_glMaterialf",
        "_glMaterialfv",
        "_glMateriali",
        "_glMaterialiv",
        "_glMatrixMode",
        "_glMultMatrixd",
        "_glMultMatrixf",
        "_glNewList",
        "_glNormal3b",
        "_glNormal3bv",
        "_glNormal3d",
        "_glNormal3dv",
        "_glNormal3f",
        "_glNormal3fv",
        "_glNormal3i",
        "_glNormal3iv",
        "_glNormal3s",
        "_glNormal3sv",
        "_glNormalPointer",
        "_glOrtho",
        "_glPassThrough",
        "_gluPerspective",
        "_glPixelMapfv",
        "_glPixelMapuiv",
        "_glPixelMapusv",
        "_glPixelStoref",
        "_glPixelStorei",
        "_glPixelTransferf",
        "_glPixelTransferi",
        "_glPixelZoom",
        "_glPointSize",
        "_glPolygonMode",
        "_glPolygonOffset",
        "_glPolygonStipple",
        "_glPopAttrib",
        "_glPopClientAttrib",
        "_glPopMatrix",
        "_glPopName",
        "_glPrioritizeTextures",
        "_glPushAttrib",
        "_glPushClientAttrib",
        "_glPushMatrix",
        "_glPushName",
        "_glRasterPos2d",
        "_glRasterPos2dv",
        "_glRasterPos2f",
        "_glRasterPos2fv",
        "_glRasterPos2i",
        "_glRasterPos2iv",
        "_glRasterPos2s",
        "_glRasterPos2sv",
        "_glRasterPos3d",
        "_glRasterPos3dv",
        "_glRasterPos3f",
        "_glRasterPos3fv",
        "_glRasterPos3i",
        "_glRasterPos3iv",
        "_glRasterPos3s",
        "_glRasterPos3sv",
        "_glRasterPos4d",
        "_glRasterPos4dv",
        "_glRasterPos4f",
        "_glRasterPos4fv",
        "_glRasterPos4i",
        "_glRasterPos4iv",
        "_glRasterPos4s",
        "_glRasterPos4sv",
        "_glReadBuffer",
        "_glReadPixels",
        "_glRectd",
        "_glRectdv",
        "_glRectf",
        "_glRectfv",
        "_glRecti",
        "_glRectiv",
        "_glRects",
        "_glRectsv",
        "_glRenderMode",
        "_glRotated",
        "_glRotatef",
        "_glScaled",
        "_glScalef",
        "_glScissor",
        "_glSelectBuffer",
        "_glShadeModel",
        "_glStencilFunc",
        "_glStencilMask",
        "_glStencilOp",
        "_glTexCoord1d",
        "_glTexCoord1dv",
        "_glTexCoord1f",
        "_glTexCoord1fv",
        "_glTexCoord1i",
        "_glTexCoord1iv",
        "_glTexCoord1s",
        "_glTexCoord1sv",
        "_glTexCoord2d",
        "_glTexCoord2dv",
        "_glTexCoord2f",
        "_glTexCoord2fv",
        "_glTexCoord2i",
        "_glTexCoord2iv",
        "_glTexCoord2s",
        "_glTexCoord2sv",
        "_glTexCoord3d",
        "_glTexCoord3dv",
        "_glTexCoord3f",
        "_glTexCoord3fv",
        "_glTexCoord3i",
        "_glTexCoord3iv",
        "_glTexCoord3s",
        "_glTexCoord3sv",
        "_glTexCoord4d",
        "_glTexCoord4dv",
        "_glTexCoord4f",
        "_glTexCoord4fv",
        "_glTexCoord4i",
        "_glTexCoord4iv",
        "_glTexCoord4s",
        "_glTexCoord4sv",
        "_glTexCoordPointer",
        "_glTexEnvf",
        "_glTexEnvfv",
        "_glTexEnvi",
        "_glTexEnviv",
        "_glTexGend",
        "_glTexGendv",
        "_glTexGenf",
        "_glTexGenfv",
        "_glTexGeni",
        "_glTexGeniv",
        "_glTexImage1D",
        "_glTexImage2D",
        "_glTexParameterf",
        "_glTexParameterfv",
        "_glTexParameteri",
        "_glTexParameteriv",
        "_glTexSubImage1D",
        "_glTexSubImage2D",
        "_glTranslated",
        "_glTranslatef",
        "_glVertex2d",
        "_glVertex2dv",
        "_glVertex2f",
        "_glVertex2fv",
        "_glVertex2i",
        "_glVertex2iv",
        "_glVertex2s",
        "_glVertex2sv",
        "_glVertex3d",
        "_glVertex3dv",
        "_glVertex3f",
        "_glVertex3fv",
        "_glVertex3i",
        "_glVertex3iv",
        "_glVertex3s",
        "_glVertex3sv",
        "_glVertex4d",
        "_glVertex4dv",
        "_glVertex4f",
        "_glVertex4fv",
        "_glVertex4i",
        "_glVertex4iv",
        "_glVertex4s",
        "_glVertex4sv",
        "_glVertexPointer",
        "_glViewport"
      ]
    },
    "types": {
      "description": "Data types and type suffixes",
      "keywords": [
        "_BIT",
        "_BYTE",
        "_FLOAT",
        "_INTEGER64",
        "_MEM",
        "_MEM",
        "_OFFSET",
        "OPTION _EXPLICIT",
        "OPTION _EXPLICITARRAY",
        "_UNSIGNED",
        "ABSOLUTE",
        "DOUBLE",
        "INTEGER",
        "LONG",
        "SINGLE",
        "STRING"
      ]
    },
    "constants": {
      "description": "Built-in constants and literals",
      "keywords": [
        "_BASE64DECODE$",
        "_BASE64ENCODE$",
        "_MIDDLE",
        "_PI",
        "_PIXELSIZE",
        "CONST",
        "OPTION BASE"
      ]
    },
    "legacy": {
      "description": "Legacy QBasic keywords and compatibility items",
      "keywords": [
        "' Apostrophe",
        "ERROR code"
      ]
    }
  },
  "keywords": {
    "_ACCEPTFILEDROP": {
      "name": "_ACCEPTFILEDROP",
      "type": "statement",
      "category": "statements",
      "description": "turns a program window into a valid drop destination for dragging files from Windows Explorer.",
      "syntax": "_ACCEPTFILEDROP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_ACCEPTFILEDROP\nIF _TOTALDROPPEDFILES > 0 THEN\n    FOR i = 1 TO _TOTALDROPPEDFILES\n        PRINT _DROPPEDFILE(i)\n    NEXT\n    _FINISHDROP\nEND IF",
      "related": [
        "FILES",
        "WINDOW",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT",
        "GET"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_ACOS": {
      "name": "_ACOS",
      "type": "function",
      "category": "functions",
      "description": "arccosine function returns the angle in radians based on an input COSine value range from -1 to 1.",
      "syntax": "result = _ACOS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ACOS()",
      "related": [
        "FUNCTION",
        "INPUT",
        "TO",
        "ON",
        "COSine",
        "SIN",
        "COS",
        "TAN"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ACOSH": {
      "name": "_ACOSH",
      "type": "function",
      "category": "functions",
      "description": "Returns the nonnegative arc hyperbolic cosine of x, expressed in radians.",
      "syntax": "result = _ACOSH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ACOSH()",
      "related": [
        "FUNCTION",
        "COSine",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ADLER32": {
      "name": "_ADLER32",
      "type": "function",
      "category": "functions",
      "description": "Returns the Adler-32 checksum of any arbitrary string.",
      "syntax": "result = _ADLER32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ADLER32()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ALLOWFULLSCREEN": {
      "name": "_ALLOWFULLSCREEN",
      "type": "statement",
      "category": "statements",
      "description": "allows setting the behavior of the ALT+ENTER combo.",
      "syntax": "_ALLOWFULLSCREEN [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_ALLOWFULLSCREEN",
      "related": [
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE",
        "_FREEIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_ALPHA": {
      "name": "_ALPHA",
      "type": "function",
      "category": "functions",
      "description": "returns the alpha channel transparency level of a color value used on a screen page or image.",
      "syntax": "result = _ALPHA([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ALPHA()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "ON",
        "alpha"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ALPHA32": {
      "name": "_ALPHA32",
      "type": "function",
      "category": "functions",
      "description": "returns the alpha channel transparency level of a color value used on a 32 bit screen page or image.",
      "syntax": "result = _ALPHA32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ALPHA32()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "ON",
        "alpha"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ANDALSO": {
      "name": "_ANDALSO",
      "type": "operator",
      "category": "operators",
      "description": "performs short-circuiting logical conjunction on two expressions.",
      "syntax": "result = operand1 _ANDALSO operand2",
      "parameters": [],
      "returns": null,
      "example": "IF condition1 _ANDALSO condition2 THEN",
      "related": [
        "ON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ]
    },
    "_ARCCOT": {
      "name": "_ARCCOT",
      "type": "function",
      "category": "functions",
      "description": "is the inverse function of the cotangent.",
      "syntax": "result = _ARCCOT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ARCCOT()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ARCCSC": {
      "name": "_ARCCSC",
      "type": "function",
      "category": "functions",
      "description": "is the inverse function of the cosecant.",
      "syntax": "result = _ARCCSC([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ARCCSC()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ARCSEC": {
      "name": "_ARCSEC",
      "type": "function",
      "category": "functions",
      "description": "is the inverse function of the secant.",
      "syntax": "result = _ARCSEC([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ARCSEC()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ASIN": {
      "name": "_ASIN",
      "type": "function",
      "category": "functions",
      "description": "Returns the principal value of the arc sine of x, expressed in radians.",
      "syntax": "result = _ASIN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ASIN()",
      "related": [
        "FUNCTION",
        "SINe",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ACOS",
        "_ATAN2"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ASINH": {
      "name": "_ASINH",
      "type": "function",
      "category": "functions",
      "description": "Returns the arc hyperbolic sine of x, expressed in radians.",
      "syntax": "result = _ASINH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ASINH()",
      "related": [
        "FUNCTION",
        "SINe",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ASSERT": {
      "name": "_ASSERT",
      "type": "statement",
      "category": "statements",
      "description": "Performs debug tests.",
      "syntax": "_ASSERT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_ASSERT",
      "related": [],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "$ASSERTS": {
      "name": "$ASSERTS",
      "type": "metacommand",
      "category": "metacommands",
      "description": "enables debug tests with the _ASSERT macro.",
      "syntax": "'$ASSERTS: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$ASSERTS:",
      "related": [
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_ATAN2": {
      "name": "_ATAN2",
      "type": "function",
      "category": "functions",
      "description": "Returns the principal value of the arc tangent of y/x, expressed in radians.",
      "syntax": "result = _ATAN2([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ATAN2()",
      "related": [
        "FUNCTION",
        "tangent",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ATANH": {
      "name": "_ATANH",
      "type": "function",
      "category": "functions",
      "description": "Returns the arc hyperbolic tangent of x, expressed in radians.",
      "syntax": "result = _ATANH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ATANH()",
      "related": [
        "FUNCTION",
        "tangent",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_AUTODISPLAY": {
      "name": "_AUTODISPLAY",
      "type": "function",
      "category": "functions",
      "description": "returns the current display mode as true (-1) if automatic or false (0) if per request using _DISPLAY.",
      "syntax": "result = _AUTODISPLAY([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _AUTODISPLAY()",
      "related": [
        "AS",
        "OR",
        "OR",
        "IF",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_AXIS": {
      "name": "_AXIS",
      "type": "function",
      "category": "functions",
      "description": "returns a SINGLE value between -1 and 1 indicating the maximum distance from the device axis center, 0.",
      "syntax": "result = _AXIS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _AXIS()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "SINGLE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BACKGROUNDCOLOR": {
      "name": "_BACKGROUNDCOLOR",
      "type": "function",
      "category": "functions",
      "description": "returns the current background color for an image handle or page.",
      "syntax": "result = _BACKGROUNDCOLOR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _BACKGROUNDCOLOR()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR",
        "_RGB32",
        "_RGBA32",
        "_RED32",
        "_GREEN32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BASE64DECODE$": {
      "name": "_BASE64DECODE$",
      "type": "constant",
      "category": "constants",
      "description": "Decodes a Base64-encoded string.",
      "syntax": "_BASE64DECODE$",
      "parameters": [],
      "returns": null,
      "example": "_BASE64DECODE$",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "constant",
        "constants"
      ]
    },
    "_BASE64ENCODE$": {
      "name": "_BASE64ENCODE$",
      "type": "constant",
      "category": "constants",
      "description": "Encodes a string into Base64 format.",
      "syntax": "_BASE64ENCODE$",
      "parameters": [],
      "returns": null,
      "example": "_BASE64ENCODE$",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "constant",
        "constants"
      ]
    },
    "_BIT": {
      "name": "_BIT",
      "type": "type",
      "category": "types",
      "description": "can return only signed values of 0 (bit off) and -1 (bit on). Unsigned 0 or 1.",
      "syntax": "DIM variable AS _BIT",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS _BIT",
      "related": [
        "AND",
        "AND",
        "OFF",
        "OR",
        "OR",
        "RETURN",
        "TYPE",
        "ON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "_BIN$": {
      "name": "_BIN$",
      "type": "function",
      "category": "functions",
      "description": "returns the binary (base 2) STRING representation of the INTEGER part of any value.",
      "syntax": "string_result = _BIN$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _BIN$()",
      "related": [
        "BINARY",
        "FUNCTION",
        "INTEGER",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BLEND": {
      "name": "_BLEND",
      "type": "function",
      "category": "functions",
      "description": "returns -1 if enabled or 0 if disabled by _DONTBLEND statement.",
      "syntax": "result = _BLEND([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _BLEND()",
      "related": [
        "OR",
        "OR",
        "IF",
        "LEFT$",
        "RIGHT$",
        "MID$",
        "LEN",
        "INSTR"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BLINK": {
      "name": "_BLINK",
      "type": "function",
      "category": "functions",
      "description": "returns -1 if enabled or 0 if disabled by _BLINK statement.",
      "syntax": "result = _BLINK([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _BLINK()",
      "related": [
        "OR",
        "OR",
        "IF"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BLUE": {
      "name": "_BLUE",
      "type": "function",
      "category": "functions",
      "description": "function returns the palette or the blue component intensity of a 32-bit image color.",
      "syntax": "result = _BLUE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _BLUE()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR",
        "PALETTE",
        "_RGB32",
        "_RGBA32",
        "_RED32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BLUE32": {
      "name": "_BLUE32",
      "type": "function",
      "category": "functions",
      "description": "returns the blue component intensity of a 32-bit color value.",
      "syntax": "result = _BLUE32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _BLUE32()",
      "related": [
        "COLOR",
        "FUNCTION",
        "_RGB32",
        "_RGBA32",
        "_RED32",
        "_GREEN32",
        "_ALPHA32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BRIGHTNESS32": {
      "name": "_BRIGHTNESS32",
      "type": "function",
      "category": "functions",
      "description": "returns the brightness value (HSB colorspace) of a given 32-bit ARGB color.",
      "syntax": "result = _BRIGHTNESS32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _BRIGHTNESS32()",
      "related": [
        "COLOR",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BUTTON": {
      "name": "_BUTTON",
      "type": "function",
      "category": "functions",
      "description": "returns -1 when a controller device button is pressed and 0 when button is released.",
      "syntax": "result = _BUTTON([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _BUTTON()",
      "related": [
        "AND",
        "AND",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BUTTONCHANGE": {
      "name": "_BUTTONCHANGE",
      "type": "function",
      "category": "functions",
      "description": "returns -1 when a device button has been pressed and 1 when released. Zero indicates no change.",
      "syntax": "result = _BUTTONCHANGE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _BUTTONCHANGE()",
      "related": [
        "AND",
        "AND",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_BYTE": {
      "name": "_BYTE",
      "type": "type",
      "category": "types",
      "description": "can hold signed values from -128 to 127 (one byte or _BIT * 8). Unsigned from 0 to 255.",
      "syntax": "DIM variable AS _BYTE",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS _BYTE",
      "related": [
        "OR",
        "OR",
        "TO",
        "TYPE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "_CAPSLOCK": {
      "name": "_CAPSLOCK",
      "type": "statement",
      "category": "statements",
      "description": "sets Caps Lock key state",
      "syntax": "_CAPSLOCK [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_CAPSLOCK",
      "related": [
        "LOCK"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_CAST": {
      "name": "_CAST",
      "type": "function",
      "category": "functions",
      "description": "performs a C-like cast of a numerical value to a specified numerical type.",
      "syntax": "result = _CAST([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CAST()",
      "related": [
        "FUNCTION",
        "TO",
        "TYPE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$CHECKING": {
      "name": "$CHECKING",
      "type": "metacommand",
      "category": "metacommands",
      "description": "turns event and error checking OFF or ON.",
      "syntax": "'$CHECKING: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$CHECKING:",
      "related": [
        "AND",
        "AND",
        "ERROR",
        "OFF",
        "OR",
        "OR",
        "ON",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_CEIL": {
      "name": "_CEIL",
      "type": "function",
      "category": "functions",
      "description": "Rounds x upward, returning the smallest integral value that is not less than x.",
      "syntax": "result = _CEIL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CEIL()",
      "related": [
        "FUNCTION",
        "NOT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CINP": {
      "name": "_CINP",
      "type": "function",
      "category": "functions",
      "description": "Returns a key code from $CONSOLE input",
      "syntax": "result = _CINP([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CINP()",
      "related": [
        "$CONSOLE",
        "FUNCTION",
        "INPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CLAMP": {
      "name": "_CLAMP",
      "type": "function",
      "category": "functions",
      "description": "Forces the given numeric value into a specific range.",
      "syntax": "result = _CLAMP([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CLAMP()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CLEARCOLOR": {
      "name": "_CLEARCOLOR",
      "type": "statement",
      "category": "statements",
      "description": "sets a specific color index of an image to be transparent",
      "syntax": "_CLEARCOLOR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_CLEARCOLOR",
      "related": [
        "COLOR",
        "TO",
        "_RGB32",
        "_RGBA32",
        "_RED32",
        "_GREEN32",
        "_BLUE32",
        "_ALPHA32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_CLIP": {
      "name": "_CLIP",
      "type": "statement",
      "category": "statements",
      "description": "allows placement of an image partially off of the screen.",
      "syntax": "_CLIP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_CLIP",
      "related": [
        "OFF",
        "PUT",
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_CLIPBOARD$": {
      "name": "_CLIPBOARD$",
      "type": "function",
      "category": "functions",
      "description": "sets and overwrites the STRING value in the operating system's clipboard.",
      "syntax": "string_result = _CLIPBOARD$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _CLIPBOARD$()",
      "related": [
        "AND",
        "AND",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CLIPBOARDIMAGE": {
      "name": "_CLIPBOARDIMAGE",
      "type": "statement",
      "category": "statements",
      "description": "copies a valid QB64 image to the clipboard.",
      "syntax": "_CLIPBOARDIMAGE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_CLIPBOARDIMAGE myArray(10) AS INTEGER",
      "related": [
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "$COLOR": {
      "name": "$COLOR",
      "type": "metacommand",
      "category": "metacommands",
      "description": "includes named color constants in a program.",
      "syntax": "'$COLOR: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$COLOR:",
      "related": [
        "COLOR",
        "Metacommand",
        "_RGB32",
        "_RGBA32",
        "_RED32",
        "_GREEN32",
        "_BLUE32",
        "_ALPHA32"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_COLORCHOOSERDIALOG": {
      "name": "_COLORCHOOSERDIALOG",
      "type": "function",
      "category": "functions",
      "description": "Displays a standard color picker dialog box and returns a 32-bit RGBA color selected by the user.",
      "syntax": "result = _COLORCHOOSERDIALOG([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _COLORCHOOSERDIALOG()",
      "related": [
        "AND",
        "AND",
        "COLOR",
        "FUNCTION",
        "_RGB32",
        "_RGBA32",
        "_RED32",
        "_GREEN32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_COMMANDCOUNT": {
      "name": "_COMMANDCOUNT",
      "type": "function",
      "category": "functions",
      "description": "returns the number of arguments passed to the compiled program from the command line.",
      "syntax": "result = _COMMANDCOUNT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _COMMANDCOUNT()",
      "related": [
        "FUNCTION",
        "LINE",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CONNECTED": {
      "name": "_CONNECTED",
      "type": "function",
      "category": "functions",
      "description": "returns the status of a TCP/IP connection handle.",
      "syntax": "result = _CONNECTED([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CONNECTED()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CONNECTIONADDRESS$": {
      "name": "_CONNECTIONADDRESS$",
      "type": "function",
      "category": "functions",
      "description": "returns a connected user's STRING IP address value using the handle.",
      "syntax": "string_result = _CONNECTIONADDRESS$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _CONNECTIONADDRESS$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$CONSOLE": {
      "name": "$CONSOLE",
      "type": "metacommand",
      "category": "metacommands",
      "description": "creates a console window that can be used throughout a program.",
      "syntax": "'$CONSOLE: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$CONSOLE:ONLY",
      "related": [
        "WINDOW",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_CONSOLE": {
      "name": "_CONSOLE",
      "type": "statement",
      "category": "statements",
      "description": "used to turn a console window OFF or ON or to designate _DEST _CONSOLE for output.",
      "syntax": "_CONSOLE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_CONSOLE",
      "related": [
        "OFF",
        "OR",
        "OR",
        "OUTPUT",
        "TO",
        "WINDOW",
        "ON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_CONSOLEINPUT": {
      "name": "_CONSOLEINPUT",
      "type": "function",
      "category": "functions",
      "description": "fetches input data from a $CONSOLE window to be read later (both mouse and keyboard)",
      "syntax": "result = _CONSOLEINPUT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CONSOLEINPUT()",
      "related": [
        "$CONSOLE",
        "AND",
        "AND",
        "DATA",
        "FUNCTION",
        "INPUT",
        "READ",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CONSOLECURSOR": {
      "name": "_CONSOLECURSOR",
      "type": "statement",
      "category": "statements",
      "description": "is used to switch the text cursor in Console Windows off/on or change its size.",
      "syntax": "_CONSOLECURSOR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_CONSOLECURSOR",
      "related": [
        "OR",
        "OR",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_CONSOLEFONT": {
      "name": "_CONSOLEFONT",
      "type": "statement",
      "category": "statements",
      "description": "is used to change the text font used in Console Windows or change its size.",
      "syntax": "_CONSOLEFONT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_CONSOLEFONT",
      "related": [
        "OR",
        "OR",
        "TO",
        "font"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_CONSOLETITLE": {
      "name": "_CONSOLETITLE",
      "type": "statement",
      "category": "statements",
      "description": "creates the title of the console window using a literal or variable string.",
      "syntax": "_CONSOLETITLE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_CONSOLETITLE",
      "related": [
        "OR",
        "OR",
        "STRING",
        "WINDOW",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_CONTINUE": {
      "name": "_CONTINUE",
      "type": "statement",
      "category": "statements",
      "description": "skips the remaining lines in a control block (DO/LOOP, FOR/NEXT or WHILE/WEND)",
      "syntax": "_CONTINUE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_CONTINUE",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_CONTROLCHR": {
      "name": "_CONTROLCHR",
      "type": "function",
      "category": "functions",
      "description": "returns the current state of _CONTROLCHR as 1 when OFF and 0 when ON.",
      "syntax": "result = _CONTROLCHR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CONTROLCHR()",
      "related": [
        "AND",
        "AND",
        "AS",
        "OFF",
        "ON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_COPYIMAGE": {
      "name": "_COPYIMAGE",
      "type": "function",
      "category": "functions",
      "description": "copies an image handle value to a new designated handle.",
      "syntax": "result = _COPYIMAGE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _COPYIMAGE()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_COPYPALETTE": {
      "name": "_COPYPALETTE",
      "type": "statement",
      "category": "statements",
      "description": "copies the color palette intensities from one 4 or 8 BPP image to another image.",
      "syntax": "_COPYPALETTE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_COPYPALETTE",
      "related": [
        "COLOR",
        "OR",
        "OR",
        "PALETTE",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_COT": {
      "name": "_COT",
      "type": "function",
      "category": "functions",
      "description": "the mathematical function cotangent defined by 1/TAN.",
      "syntax": "result = _COT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _COT()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_COTH": {
      "name": "_COTH",
      "type": "function",
      "category": "functions",
      "description": "Returns the hyperbolic cotangent.",
      "syntax": "result = _COTH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _COTH()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_COSH": {
      "name": "_COSH",
      "type": "function",
      "category": "functions",
      "description": "Returns the hyperbolic cosine of x radians.",
      "syntax": "result = _COSH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _COSH()",
      "related": [
        "FUNCTION",
        "COSine",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CRC32": {
      "name": "_CRC32",
      "type": "function",
      "category": "functions",
      "description": "Returns the Crc-32 checksum of any arbitrary string.",
      "syntax": "result = _CRC32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CRC32()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CSC": {
      "name": "_CSC",
      "type": "function",
      "category": "functions",
      "description": "the mathematical function cosecant defined by 1/SIN.",
      "syntax": "result = _CSC([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CSC()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CSCH": {
      "name": "_CSCH",
      "type": "function",
      "category": "functions",
      "description": "Returns the hyperbolic cosecant.",
      "syntax": "result = _CSCH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CSCH()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CV": {
      "name": "_CV",
      "type": "function",
      "category": "functions",
      "description": "converts any _MK$ STRING value to the designated numerical type value.",
      "syntax": "result = _CV([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _CV()",
      "related": [
        "FUNCTION",
        "STRING",
        "TO",
        "TYPE",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_CWD$": {
      "name": "_CWD$",
      "type": "function",
      "category": "functions",
      "description": "returns the current working directory as a STRING value.",
      "syntax": "string_result = _CWD$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _CWD$()",
      "related": [
        "AS",
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_D2G": {
      "name": "_D2G",
      "type": "function",
      "category": "functions",
      "description": "converts degrees to gradient angle values.",
      "syntax": "result = _D2G([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _D2G()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_D2R": {
      "name": "_D2R",
      "type": "function",
      "category": "functions",
      "description": "converts degrees to radian angle values.",
      "syntax": "result = _D2R([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _D2R()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$DEBUG": {
      "name": "$DEBUG",
      "type": "metacommand",
      "category": "metacommands",
      "description": "enables debugging features, allowing you to step through your code line by line.",
      "syntax": "'$DEBUG: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$DEBUG:",
      "related": [
        "LINE",
        "STEP",
        "TO",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_DECODEURL$": {
      "name": "_DECODEURL$",
      "type": "function",
      "category": "functions",
      "description": "returns the decoded plain text URL of the given encoded URL.",
      "syntax": "string_result = _DECODEURL$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _DECODEURL$()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DEFAULTCOLOR": {
      "name": "_DEFAULTCOLOR",
      "type": "function",
      "category": "functions",
      "description": "returns the current default (text/drawing) color for an image handle or page.",
      "syntax": "result = _DEFAULTCOLOR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _DEFAULTCOLOR()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR",
        "_RGB32",
        "_RGBA32",
        "_RED32",
        "_GREEN32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DEFINE": {
      "name": "_DEFINE",
      "type": "statement",
      "category": "statements",
      "description": "defines a range of variable names according to their first character as a data type.",
      "syntax": "_DEFINE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_DEFINE",
      "related": [
        "AS",
        "DATA",
        "TO",
        "TYPE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_DEFLATE$": {
      "name": "_DEFLATE$",
      "type": "function",
      "category": "functions",
      "description": "Compresses a string.",
      "syntax": "string_result = _DEFLATE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _DEFLATE$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DELAY": {
      "name": "_DELAY",
      "type": "statement",
      "category": "statements",
      "description": "suspends program execution for a SINGLE number of seconds.",
      "syntax": "_DELAY [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_DELAY",
      "related": [
        "SINGLE",
        "TIMER",
        "SLEEP",
        "_LIMIT",
        "ON TIMER"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_DEPTHBUFFER": {
      "name": "_DEPTHBUFFER",
      "type": "statement",
      "category": "statements",
      "description": "enables, disables, locks or clears depth buffering.",
      "syntax": "_DEPTHBUFFER [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_DEPTHBUFFER",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_DESKTOPHEIGHT": {
      "name": "_DESKTOPHEIGHT",
      "type": "function",
      "category": "functions",
      "description": "returns the height of the desktop (not program window).",
      "syntax": "result = _DESKTOPHEIGHT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _DESKTOPHEIGHT()",
      "related": [
        "FUNCTION",
        "NOT",
        "WINDOW"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DESKTOPWIDTH": {
      "name": "_DESKTOPWIDTH",
      "type": "function",
      "category": "functions",
      "description": "returns the width of the desktop (not program window).",
      "syntax": "result = _DESKTOPWIDTH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _DESKTOPWIDTH()",
      "related": [
        "FUNCTION",
        "NOT",
        "WIDTH",
        "WINDOW"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DEST": {
      "name": "_DEST",
      "type": "function",
      "category": "functions",
      "description": "returns the current destination screen page or image handle value.",
      "syntax": "result = _DEST([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _DEST()",
      "related": [
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DEVICE$": {
      "name": "_DEVICE$",
      "type": "function",
      "category": "functions",
      "description": "returns a STRING expression listing a designated numbered input device name and types of input.",
      "syntax": "string_result = _DEVICE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _DEVICE$()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "INPUT",
        "NAME",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DEVICEINPUT": {
      "name": "_DEVICEINPUT",
      "type": "function",
      "category": "functions",
      "description": "returns the _DEVICES number of an _AXIS, _BUTTON or _WHEEL event.",
      "syntax": "result = _DEVICEINPUT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _DEVICEINPUT()",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DEVICES": {
      "name": "_DEVICES",
      "type": "function",
      "category": "functions",
      "description": "returns the number of input devices found on a computer system including the keyboard and mouse.",
      "syntax": "result = _DEVICES([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _DEVICES()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "INPUT",
        "SYSTEM",
        "ON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DIR$": {
      "name": "_DIR$",
      "type": "function",
      "category": "functions",
      "description": "returns common paths in Windows only, like My Documents, My Pictures, My Music, Desktop.",
      "syntax": "string_result = _DIR$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _DIR$()",
      "related": [
        "COMMON",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "Windows",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DIREXISTS": {
      "name": "_DIREXISTS",
      "type": "function",
      "category": "functions",
      "description": "returns -1 if the Directory folder name string parameter exists. Zero if it does not.",
      "syntax": "result = _DIREXISTS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _DIREXISTS()",
      "related": [
        "FUNCTION",
        "NAME",
        "NOT",
        "STRING",
        "string",
        "IF"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DISPLAY": {
      "name": "_DISPLAY",
      "type": "function",
      "category": "functions",
      "description": "returns the handle of the current image that is displayed on the screen.",
      "syntax": "result = _DISPLAY([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _DISPLAY()",
      "related": [
        "SCREEN",
        "SCREEN",
        "ON",
        "screen",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_PUTIMAGE",
        "_FREEIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_DISPLAYORDER": {
      "name": "_DISPLAYORDER",
      "type": "statement",
      "category": "statements",
      "description": "designates the order to render software, hardware and custom-opengl-code.",
      "syntax": "_DISPLAYORDER [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_DISPLAYORDER",
      "related": [
        "AND",
        "AND",
        "TO",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_DONTBLEND": {
      "name": "_DONTBLEND",
      "type": "statement",
      "category": "statements",
      "description": "statement turns off default _BLEND 32 bit alpha blending for the current image or screen.",
      "syntax": "_DONTBLEND [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_DONTBLEND",
      "related": [
        "OFF",
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "alpha",
        "ALPHA",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_DONTWAIT": {
      "name": "_DONTWAIT",
      "type": "statement",
      "category": "statements",
      "description": "specifies that the program should not wait until the shelled command/program is finished.",
      "syntax": "_DONTWAIT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_DONTWAIT",
      "related": [
        "NOT",
        "SHELL",
        "SHELL",
        "UNTIL",
        "WAIT",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_DROPPEDFILE": {
      "name": "_DROPPEDFILE",
      "type": "function",
      "category": "functions",
      "description": "returns the list of items (files or folders) dropped in a program's window after _ACCEPTFILEDROP is enabled.",
      "syntax": "result = _DROPPEDFILE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _DROPPEDFILE()",
      "related": [
        "FILES",
        "FUNCTION",
        "LIST",
        "OR",
        "OR",
        "WINDOW",
        "OPEN",
        "CLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ECHO": {
      "name": "_ECHO",
      "type": "statement",
      "category": "statements",
      "description": "used in conjunction with $IF for the precompiler.",
      "syntax": "_ECHO [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_ECHO",
      "related": [
        "$IF"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "$ELSE": {
      "name": "$ELSE",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used in conjunction with $IF for the precompiler.",
      "syntax": "'$ELSE: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$ELSE:",
      "related": [
        "$IF",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "$ELSEIF": {
      "name": "$ELSEIF",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used in conjunction with $IF for the precompiler.",
      "syntax": "'$ELSEIF: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$ELSEIF:",
      "related": [
        "$IF",
        "Metacommand",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "$EMBED": {
      "name": "$EMBED",
      "type": "metacommand",
      "category": "metacommands",
      "description": "is used to embed any file's contents into the compiled executable.",
      "syntax": "'$EMBED: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$EMBED:",
      "related": [
        "TO",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_EMBEDDED$": {
      "name": "_EMBEDDED$",
      "type": "function",
      "category": "functions",
      "description": "recalls the contents of a file embedded using $EMBED.",
      "syntax": "string_result = _EMBEDDED$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _EMBEDDED$()",
      "related": [
        "$EMBED",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$END IF": {
      "name": "$END IF",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used in conjunction with $IF for the precompiler.",
      "syntax": "'$END IF: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$END IF:",
      "related": [
        "$IF",
        "Metacommand",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_ENCODEURL$": {
      "name": "_ENCODEURL$",
      "type": "function",
      "category": "functions",
      "description": "returns the so called percent encoded representation of the given URL.",
      "syntax": "string_result = _ENCODEURL$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _ENCODEURL$()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ENVIRONCOUNT": {
      "name": "_ENVIRONCOUNT",
      "type": "function",
      "category": "functions",
      "description": "returns the number of key/value pairs currently exist in the environment table.",
      "syntax": "result = _ENVIRONCOUNT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ENVIRONCOUNT()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$ERROR": {
      "name": "$ERROR",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used to trigger compiler errors from within the precompiling pass.",
      "syntax": "'$ERROR: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$ERROR:",
      "related": [
        "TO",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_ERRORLINE": {
      "name": "_ERRORLINE",
      "type": "function",
      "category": "functions",
      "description": "returns the source code line number that caused the most recent runtime error.",
      "syntax": "result = _ERRORLINE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ERRORLINE()",
      "related": [
        "ERROR",
        "FUNCTION",
        "LINE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ERRORMESSAGE$": {
      "name": "_ERRORMESSAGE$",
      "type": "function",
      "category": "functions",
      "description": "returns a human-readable message describing the most recent runtime error.",
      "syntax": "string_result = _ERRORMESSAGE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _ERRORMESSAGE$()",
      "related": [
        "ERROR",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$EXEICON": {
      "name": "$EXEICON",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used with a .ICO icon file name to embed the image into the QB64 executable.",
      "syntax": "'$EXEICON: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$EXEICON:",
      "related": [
        "NAME",
        "TO",
        "Metacommand"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_EXIT": {
      "name": "_EXIT",
      "type": "function",
      "category": "functions",
      "description": "prevents a user exit and indicates if a user has clicked the close X window button or CTRL + BREAK.",
      "syntax": "result = _EXIT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _EXIT()",
      "related": [
        "AND",
        "AND",
        "CLOSE",
        "EXIT",
        "OR",
        "OR",
        "WINDOW",
        "IF"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_FILEEXISTS": {
      "name": "_FILEEXISTS",
      "type": "function",
      "category": "functions",
      "description": "returns -1 if the file name string parameter exists. Zero if it does not.",
      "syntax": "result = _FILEEXISTS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _FILEEXISTS()",
      "related": [
        "FUNCTION",
        "NAME",
        "NOT",
        "STRING",
        "string",
        "IF",
        "OPEN",
        "CLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_FILES$": {
      "name": "_FILES$",
      "type": "function",
      "category": "functions",
      "description": "returns a file or directory name that matches the specified pattern.",
      "syntax": "string_result = _FILES$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _FILES$()",
      "related": [
        "FUNCTION",
        "NAME",
        "OR",
        "OR",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_FINISHDROP": {
      "name": "_FINISHDROP",
      "type": "statement",
      "category": "statements",
      "description": "resets _TOTALDROPPEDFILES and clears the _DROPPEDFILE list of items (files/folders).",
      "syntax": "_FINISHDROP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_FINISHDROP",
      "related": [
        "AND",
        "AND",
        "LIST"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_FLOAT": {
      "name": "_FLOAT",
      "type": "type",
      "category": "types",
      "description": "offers the maximum floating-point decimal precision available using QB64.",
      "syntax": "DIM variable AS _FLOAT",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS _FLOAT",
      "related": [
        "TYPE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "_FONT": {
      "name": "_FONT",
      "type": "function",
      "category": "functions",
      "description": "creates a new font handle from a designated image handle.",
      "syntax": "result = _FONT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _FONT()",
      "related": [
        "font"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_FONTHEIGHT": {
      "name": "_FONTHEIGHT",
      "type": "function",
      "category": "functions",
      "description": "returns the current text or font height.",
      "syntax": "result = _FONTHEIGHT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _FONTHEIGHT()",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "font"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_FONTWIDTH": {
      "name": "_FONTWIDTH",
      "type": "function",
      "category": "functions",
      "description": "returns the current text or font width.",
      "syntax": "result = _FONTWIDTH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _FONTWIDTH()",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "WIDTH",
        "font"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$FORMAT": {
      "name": "$FORMAT",
      "type": "metacommand",
      "category": "metacommands",
      "description": "controls the code formatting behavior in QB64-PE.",
      "syntax": "'$FORMAT: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$FORMAT:",
      "related": [
        "Metacommand",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_FREEFONT": {
      "name": "_FREEFONT",
      "type": "statement",
      "category": "statements",
      "description": "releases the current font handle from memory.",
      "syntax": "_FREEFONT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_FREEFONT",
      "related": [
        "font"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_FREEIMAGE": {
      "name": "_FREEIMAGE",
      "type": "statement",
      "category": "statements",
      "description": "releases a designated image handle from memory.",
      "syntax": "_FREEIMAGE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_FREEIMAGE",
      "related": [],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_FREETIMER": {
      "name": "_FREETIMER",
      "type": "function",
      "category": "functions",
      "description": "returns an unused timer number value to use with ON TIMER(n).",
      "syntax": "result = _FREETIMER([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "seconds! = _FREETIMER ' Current time in seconds",
      "related": [
        "FUNCTION",
        "TIMER",
        "TIMER",
        "TO",
        "ON",
        "_DELAY",
        "SLEEP",
        "_LIMIT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_FULLPATH$": {
      "name": "_FULLPATH$",
      "type": "function",
      "category": "functions",
      "description": "returns an absolute or full path name for the specified relative path name.",
      "syntax": "string_result = _FULLPATH$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _FULLPATH$()",
      "related": [
        "ABSOLUTE",
        "FUNCTION",
        "NAME",
        "OR",
        "OR"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_FULLSCREEN": {
      "name": "_FULLSCREEN",
      "type": "function",
      "category": "functions",
      "description": "returns the fullscreen mode in use by the program.",
      "syntax": "result = _FULLSCREEN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _FULLSCREEN()",
      "related": [
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE",
        "_FREEIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_G2D": {
      "name": "_G2D",
      "type": "function",
      "category": "functions",
      "description": "converts gradient to degree angle values.",
      "syntax": "result = _G2D([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _G2D()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_G2R": {
      "name": "_G2R",
      "type": "function",
      "category": "functions",
      "description": "converts gradient to radian angle values.",
      "syntax": "result = _G2R([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _G2R()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_GLRENDER": {
      "name": "_GLRENDER",
      "type": "statement",
      "category": "statements",
      "description": "sets whether context is displayed, on top of or behind the software rendering.",
      "syntax": "_GLRENDER [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_GLRENDER",
      "related": [
        "OR",
        "OR",
        "ON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_GREEN": {
      "name": "_GREEN",
      "type": "function",
      "category": "functions",
      "description": "function returns the palette or the green component intensity of a 32-bit image color.",
      "syntax": "result = _GREEN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _GREEN()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR",
        "PALETTE",
        "_RGB32",
        "_RGBA32",
        "_RED32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_GREEN32": {
      "name": "_GREEN32",
      "type": "function",
      "category": "functions",
      "description": "returns the green component intensity of a 32-bit color value.",
      "syntax": "result = _GREEN32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _GREEN32()",
      "related": [
        "COLOR",
        "FUNCTION",
        "_RGB32",
        "_RGBA32",
        "_RED32",
        "_BLUE32",
        "_ALPHA32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_HEIGHT": {
      "name": "_HEIGHT",
      "type": "function",
      "category": "functions",
      "description": "returns the height of a designated image handle.",
      "syntax": "result = _HEIGHT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _HEIGHT()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_HIDE": {
      "name": "_HIDE",
      "type": "statement",
      "category": "statements",
      "description": "hides the command line display during a shell.",
      "syntax": "_HIDE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_HIDE",
      "related": [
        "LINE",
        "SHELL",
        "SHELL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_HSB32": {
      "name": "_HSB32",
      "type": "function",
      "category": "functions",
      "description": "returns the 32-bit ARGB color value equivalent to the specified HSB colorspace values.",
      "syntax": "result = _HSB32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _HSB32()",
      "related": [
        "COLOR",
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_HSBA32": {
      "name": "_HSBA32",
      "type": "function",
      "category": "functions",
      "description": "returns the 32-bit ARGB color value equivalent to the specified HSB colorspace values + alpha channel.",
      "syntax": "result = _HSBA32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _HSBA32()",
      "related": [
        "COLOR",
        "FUNCTION",
        "TO",
        "alpha",
        "ALPHA"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_HUE32": {
      "name": "_HUE32",
      "type": "function",
      "category": "functions",
      "description": "returns the hue value (HSB colorspace) of a given 32-bit ARGB color.",
      "syntax": "result = _HUE32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _HUE32()",
      "related": [
        "COLOR",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_HYPOT": {
      "name": "_HYPOT",
      "type": "function",
      "category": "functions",
      "description": "Returns the hypotenuse of a right-angled triangle whose legs are x and y.",
      "syntax": "result = _HYPOT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _HYPOT()",
      "related": [
        "AND",
        "AND",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$IF": {
      "name": "$IF",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used to set an IF condition for the precompiler.",
      "syntax": "'$IF: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$IF:",
      "related": [
        "TO",
        "IF",
        "Metacommand",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_ICON": {
      "name": "_ICON",
      "type": "statement",
      "category": "statements",
      "description": "designates a _LOADIMAGE image file handle to be used as the program's icon or loads the embedded icon (see $EXEICON).",
      "syntax": "_ICON [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_ICON",
      "related": [
        "$EXEICON",
        "AS",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_IIF": {
      "name": "_IIF",
      "type": "function",
      "category": "functions",
      "description": "provides conditional evaluations similar to a ternary operator, with short-circuiting behavior.",
      "syntax": "result = _IIF([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _IIF()",
      "related": [
        "FUNCTION",
        "TO",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_INCLERRORFILE$": {
      "name": "_INCLERRORFILE$",
      "type": "function",
      "category": "functions",
      "description": "returns the name of the original source code $INCLUDE module that caused the most recent error.",
      "syntax": "string_result = _INCLERRORFILE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _INCLERRORFILE$()",
      "related": [
        "ERROR",
        "FUNCTION",
        "$INCLUDE",
        "NAME",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_INCLERRORLINE": {
      "name": "_INCLERRORLINE",
      "type": "function",
      "category": "functions",
      "description": "returns the line number in an included file that caused the most recent error.",
      "syntax": "result = _INCLERRORLINE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _INCLERRORLINE()",
      "related": [
        "ERROR",
        "FUNCTION",
        "LINE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$INCLUDEONCE": {
      "name": "$INCLUDEONCE",
      "type": "metacommand",
      "category": "metacommands",
      "description": "prevents that include file contents is injected multiple times into a program.",
      "syntax": "'$INCLUDEONCE: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$INCLUDEONCE: 'mylib.bi'",
      "related": [
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_INFLATE$": {
      "name": "_INFLATE$",
      "type": "function",
      "category": "functions",
      "description": "Decompresses a string.",
      "syntax": "string_result = _INFLATE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _INFLATE$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_INPUTBOX$": {
      "name": "_INPUTBOX$",
      "type": "function",
      "category": "functions",
      "description": "displays a prompt in a dialog box, waits for the user to input text or click a button, and returns a string containing the contents of the text box.",
      "syntax": "string_result = _INPUTBOX$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _INPUTBOX$(10) ' Read 10 characters",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "INPUT",
        "OR",
        "OR",
        "STRING",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_INSTRREV": {
      "name": "_INSTRREV",
      "type": "function",
      "category": "functions",
      "description": "allows searching for a substring inside another string, but unlike INSTR it returns the last occurrence instead of the first one.",
      "syntax": "result = _INSTRREV([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _INSTRREV()",
      "related": [
        "FUNCTION",
        "INSTR",
        "STRING",
        "string",
        "LEFT$",
        "RIGHT$",
        "MID$",
        "LEN"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_INTEGER64": {
      "name": "_INTEGER64",
      "type": "type",
      "category": "types",
      "description": "can hold whole numerical values from -9223372036854775808 to 9223372036854775807.",
      "syntax": "DIM variable AS _INTEGER64",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS _INTEGER64",
      "related": [
        "TO",
        "TYPE",
        "whole"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "_KEYCLEAR": {
      "name": "_KEYCLEAR",
      "type": "statement",
      "category": "statements",
      "description": "clears the keyboard buffers for INKEY$, _KEYHIT, and INP.",
      "syntax": "_KEYCLEAR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_KEYCLEAR",
      "related": [
        "AND",
        "AND",
        "INKEY$",
        "INP",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_MOUSEBUTTON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_KEYHIT": {
      "name": "_KEYHIT",
      "type": "function",
      "category": "functions",
      "description": "returns ASCII one and two byte, SDL Virtual Key and Unicode keyboard key press codes.",
      "syntax": "result = _KEYHIT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _KEYHIT()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "Unicode",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_MOUSEBUTTON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_KEYDOWN": {
      "name": "_KEYDOWN",
      "type": "function",
      "category": "functions",
      "description": "returns whether CTRL, ALT, SHIFT, combinations and other keys are pressed.",
      "syntax": "result = _KEYDOWN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _KEYDOWN()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$LET": {
      "name": "$LET",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used to set a variable for the precompiler.",
      "syntax": "'$LET: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$LET:",
      "related": [
        "TO",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_LASTAXIS": {
      "name": "_LASTAXIS",
      "type": "function",
      "category": "functions",
      "description": "returns the number of axis available on a specified number device listed by _DEVICE$.",
      "syntax": "result = _LASTAXIS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _LASTAXIS()",
      "related": [
        "FUNCTION",
        "ON",
        "DEVICE$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_LASTBUTTON": {
      "name": "_LASTBUTTON",
      "type": "function",
      "category": "functions",
      "description": "returns the number of buttons available on a specified number device listed by DEVICE$.",
      "syntax": "result = _LASTBUTTON([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _LASTBUTTON()",
      "related": [
        "FUNCTION",
        "ON",
        "DEVICE$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_LASTWHEEL": {
      "name": "_LASTWHEEL",
      "type": "function",
      "category": "functions",
      "description": "returns the number of scroll wheels available on a specified number device listed by _DEVICE$.",
      "syntax": "result = _LASTWHEEL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _LASTWHEEL()",
      "related": [
        "FUNCTION",
        "ON",
        "DEVICE$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_LIMIT": {
      "name": "_LIMIT",
      "type": "statement",
      "category": "statements",
      "description": "sets the loops per second rate to slow down loops and limit CPU usage.",
      "syntax": "_LIMIT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_LIMIT",
      "related": [
        "AND",
        "AND",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_LOADFONT": {
      "name": "_LOADFONT",
      "type": "function",
      "category": "functions",
      "description": "designates a font TTF file to load and returns a handle value.",
      "syntax": "result = _LOADFONT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _LOADFONT()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "TO",
        "font"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_LOADIMAGE": {
      "name": "_LOADIMAGE",
      "type": "function",
      "category": "functions",
      "description": "designates an image file to load and returns a handle value.",
      "syntax": "result = _LOADIMAGE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _LOADIMAGE()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "TO",
        "SCREEN",
        "_NEWIMAGE",
        "_DISPLAY",
        "_PUTIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_LOGERROR": {
      "name": "_LOGERROR",
      "type": "statement",
      "category": "statements",
      "description": "writes a log message at the Error level with an accompanying stacktrace.",
      "syntax": "_LOGERROR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_LOGERROR",
      "related": [
        "ERROR",
        "LOG"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_LOGINFO": {
      "name": "_LOGINFO",
      "type": "statement",
      "category": "statements",
      "description": "writes a log message at the Information level.",
      "syntax": "_LOGINFO [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_LOGINFO",
      "related": [
        "LOG"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_LOGMINLEVEL": {
      "name": "_LOGMINLEVEL",
      "type": "function",
      "category": "functions",
      "description": "returns the current minimum logging level that is being output.",
      "syntax": "result = _LOGMINLEVEL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _LOGMINLEVEL()",
      "related": [
        "FUNCTION",
        "OUTPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_LOGTRACE": {
      "name": "_LOGTRACE",
      "type": "statement",
      "category": "statements",
      "description": "writes a log message at the Trace level.",
      "syntax": "_LOGTRACE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_LOGTRACE",
      "related": [
        "LOG"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_LOGWARN": {
      "name": "_LOGWARN",
      "type": "statement",
      "category": "statements",
      "description": "writes a log message at the Warning level.",
      "syntax": "_LOGWARN [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_LOGWARN",
      "related": [
        "LOG"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MAPTRIANGLE": {
      "name": "_MAPTRIANGLE",
      "type": "statement",
      "category": "statements",
      "description": "maps a triangular image source area to put on a destination area.",
      "syntax": "_MAPTRIANGLE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MAPTRIANGLE",
      "related": [
        "PUT",
        "TO",
        "ON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MAPUNICODE": {
      "name": "_MAPUNICODE",
      "type": "function",
      "category": "functions",
      "description": "returns the Unicode (UTF32) code point value of a mapped ASCII character code.",
      "syntax": "result = _MAPUNICODE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MAPUNICODE()",
      "related": [
        "POINT",
        "Unicode"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MAX": {
      "name": "_MAX",
      "type": "function",
      "category": "functions",
      "description": "Returns the greater of two given numeric values.",
      "syntax": "result = _MAX([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MAX()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MD5$": {
      "name": "_MD5$",
      "type": "function",
      "category": "functions",
      "description": "Returns the MD5 hash value of any arbitrary string.",
      "syntax": "string_result = _MD5$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _MD5$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MEM": {
      "name": "_MEM",
      "type": "type",
      "category": "types",
      "description": "contains read only dot elements for the OFFSET, SIZE, TYPE and ELEMENTSIZE of a block of memory.",
      "syntax": "DIM mem_var AS _MEM",
      "parameters": [],
      "returns": null,
      "example": "DIM buffer AS _MEM",
      "related": [
        "AND",
        "AND",
        "READ",
        "TYPE",
        "_MEMGET",
        "_MEMPUT",
        "_MEMFREE",
        "_MEMNEW"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "_MEMCOPY": {
      "name": "_MEMCOPY",
      "type": "statement",
      "category": "statements",
      "description": "copies a value from a designated OFFSET and SIZE TO a block of memory at a designated OFFSET.",
      "syntax": "_MEMCOPY [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MEMCOPY",
      "related": [
        "AND",
        "AND",
        "TO",
        "_MEM",
        "_MEMGET",
        "_MEMPUT",
        "_MEMFREE",
        "_MEMNEW"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MEMELEMENT": {
      "name": "_MEMELEMENT",
      "type": "function",
      "category": "functions",
      "description": "returns a _MEM block referring to a variable's memory (but not past it).",
      "syntax": "result = _MEMELEMENT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MEMELEMENT()",
      "related": [
        "FUNCTION",
        "NOT",
        "TO",
        "MEM",
        "_MEM",
        "_MEMGET",
        "_MEMPUT",
        "_MEMFREE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MEMEXISTS": {
      "name": "_MEMEXISTS",
      "type": "function",
      "category": "functions",
      "description": "verifies that a memory block exists for a memory variable name or returns zero.",
      "syntax": "result = _MEMEXISTS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MEMEXISTS()",
      "related": [
        "FUNCTION",
        "NAME",
        "OR",
        "OR",
        "_MEM",
        "_MEMGET",
        "_MEMPUT",
        "_MEMFREE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MEMFILL": {
      "name": "_MEMFILL",
      "type": "statement",
      "category": "statements",
      "description": "fills a designated memory block OFFSET with a certain SIZE and TYPE of value.",
      "syntax": "_MEMFILL [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MEMFILL",
      "related": [
        "AND",
        "AND",
        "TYPE",
        "_MEM",
        "_MEMGET",
        "_MEMPUT",
        "_MEMFREE",
        "_MEMNEW"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MEMFREE": {
      "name": "_MEMFREE",
      "type": "statement",
      "category": "statements",
      "description": "frees a designated memory block in a program. Only free memory blocks once.",
      "syntax": "_MEMFREE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MEMFREE",
      "related": [
        "FREE",
        "_MEM",
        "_MEMGET",
        "_MEMPUT",
        "_MEMNEW",
        "PEEK",
        "POKE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MEMGET": {
      "name": "_MEMGET",
      "type": "function",
      "category": "functions",
      "description": "returns a value from a designated memory block and OFFSET using a designated variable TYPE.",
      "syntax": "result = _MEMGET([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MEMGET()",
      "related": [
        "AND",
        "AND",
        "TYPE",
        "_MEM",
        "_MEMPUT",
        "_MEMFREE",
        "_MEMNEW",
        "PEEK"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MEMIMAGE": {
      "name": "_MEMIMAGE",
      "type": "function",
      "category": "functions",
      "description": "returns a _MEM block referring to a designated image handle's memory",
      "syntax": "result = _MEMIMAGE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MEMIMAGE()",
      "related": [
        "FUNCTION",
        "TO",
        "MEM",
        "_MEM",
        "_MEMGET",
        "_MEMPUT",
        "_MEMFREE",
        "_MEMNEW"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MEMNEW": {
      "name": "_MEMNEW",
      "type": "function",
      "category": "functions",
      "description": "allocates new memory with a designated SIZE and returns a _MEM block referring to it.",
      "syntax": "result = _MEMNEW([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MEMNEW()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "TO",
        "MEM",
        "_MEM",
        "_MEMGET",
        "_MEMPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MEMPUT": {
      "name": "_MEMPUT",
      "type": "statement",
      "category": "statements",
      "description": "places a designated value into a designated memory block OFFSET",
      "syntax": "_MEMPUT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MEMPUT",
      "related": [
        "_MEM",
        "_MEMGET",
        "_MEMFREE",
        "_MEMNEW",
        "PEEK",
        "POKE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MEMSOUND": {
      "name": "_MEMSOUND",
      "type": "function",
      "category": "functions",
      "description": "returns a _MEM block referring to a designated sound handle's memory",
      "syntax": "result = _MEMSOUND([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MEMSOUND()",
      "related": [
        "FUNCTION",
        "SOUND",
        "TO",
        "MEM",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MESSAGEBOX": {
      "name": "_MESSAGEBOX",
      "type": "statement",
      "category": "statements",
      "description": "Displays a message dialog box, which presents a message to the user.",
      "syntax": "_MESSAGEBOX [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MESSAGEBOX",
      "related": [
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MIDDLE": {
      "name": "_MIDDLE",
      "type": "constant",
      "category": "constants",
      "description": "centers the program window on the desktop in any screen resolution.",
      "syntax": "_MIDDLE",
      "parameters": [],
      "returns": null,
      "example": "_MIDDLE",
      "related": [
        "SCREEN",
        "SCREEN",
        "WINDOW",
        "ON",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "constant",
        "constants"
      ]
    },
    "_MIDISOUNDBANK": {
      "name": "_MIDISOUNDBANK",
      "type": "statement",
      "category": "statements",
      "description": "enables _SNDOPEN to use external FM Banks or SoundFonts when playing MIDI files.",
      "syntax": "_MIDISOUNDBANK [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MIDISOUNDBANK",
      "related": [
        "FILES",
        "OR",
        "OR",
        "TO",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "$MIDISOUNDFONT": {
      "name": "$MIDISOUNDFONT",
      "type": "metacommand",
      "category": "metacommands",
      "description": "(deprecated) enables the MIDI support for _SNDOPEN.",
      "syntax": "'$MIDISOUNDFONT: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$MIDISOUNDFONT:",
      "related": [
        "Metacommand",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "SOUND",
        "PLAY"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_MIN": {
      "name": "_MIN",
      "type": "function",
      "category": "functions",
      "description": "Returns the lesser of two given numeric values.",
      "syntax": "result = _MIN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MIN()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MK$": {
      "name": "_MK$",
      "type": "function",
      "category": "functions",
      "description": "converts a numerical value to a designated ASCII STRING value.",
      "syntax": "string_result = _MK$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _MK$()",
      "related": [
        "FUNCTION",
        "STRING",
        "TO",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MOUSEBUTTON": {
      "name": "_MOUSEBUTTON",
      "type": "function",
      "category": "functions",
      "description": "returns the status of a designated mouse button.",
      "syntax": "result = _MOUSEBUTTON([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MOUSEBUTTON()",
      "related": [
        "FUNCTION",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_KEYHIT",
        "_KEYDOWN",
        "INKEY$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MOUSEHIDDEN": {
      "name": "_MOUSEHIDDEN",
      "type": "function",
      "category": "functions",
      "description": "returns the current state of the mouse pointer.",
      "syntax": "result = _MOUSEHIDDEN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MOUSEHIDDEN()",
      "related": [
        "FUNCTION",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_MOUSEBUTTON",
        "_KEYHIT",
        "_KEYDOWN",
        "INKEY$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MOUSEHIDE": {
      "name": "_MOUSEHIDE",
      "type": "statement",
      "category": "statements",
      "description": "hides the mouse pointer from view",
      "syntax": "_MOUSEHIDE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MOUSEHIDE",
      "related": [
        "VIEW",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_MOUSEBUTTON",
        "_KEYHIT",
        "_KEYDOWN",
        "INKEY$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MOUSEINPUT": {
      "name": "_MOUSEINPUT",
      "type": "function",
      "category": "functions",
      "description": "returns a value if the mouse status has changed since the last read.",
      "syntax": "result = _MOUSEINPUT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MOUSEINPUT()",
      "related": [
        "FUNCTION",
        "READ",
        "IF",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MOUSEMOVE": {
      "name": "_MOUSEMOVE",
      "type": "statement",
      "category": "statements",
      "description": "moves the mouse pointer to a designated position on the program SCREEN.",
      "syntax": "_MOUSEMOVE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MOUSEMOVE",
      "related": [
        "SCREEN",
        "SCREEN",
        "TO",
        "ON",
        "screen",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MOUSEMOVEMENTX": {
      "name": "_MOUSEMOVEMENTX",
      "type": "function",
      "category": "functions",
      "description": "returns the relative horizontal position of the mouse cursor compared to the previous position.",
      "syntax": "result = _MOUSEMOVEMENTX([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MOUSEMOVEMENTX()",
      "related": [
        "FUNCTION",
        "TO",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_MOUSEBUTTON",
        "_KEYHIT",
        "_KEYDOWN"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MOUSEMOVEMENTY": {
      "name": "_MOUSEMOVEMENTY",
      "type": "function",
      "category": "functions",
      "description": "returns the relative vertical position of the mouse cursor compared to the previous position.",
      "syntax": "result = _MOUSEMOVEMENTY([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MOUSEMOVEMENTY()",
      "related": [
        "FUNCTION",
        "TO",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_MOUSEBUTTON",
        "_KEYHIT",
        "_KEYDOWN"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MOUSESHOW": {
      "name": "_MOUSESHOW",
      "type": "statement",
      "category": "statements",
      "description": "displays the mouse cursor after it has been hidden or can change the cursor shape.",
      "syntax": "_MOUSESHOW [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_MOUSESHOW",
      "related": [
        "OR",
        "OR",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_MOUSEBUTTON",
        "_KEYHIT",
        "_KEYDOWN"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_MOUSEWHEEL": {
      "name": "_MOUSEWHEEL",
      "type": "function",
      "category": "functions",
      "description": "returns the number of mouse scroll wheel \"clicks\" since last read.",
      "syntax": "result = _MOUSEWHEEL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MOUSEWHEEL()",
      "related": [
        "FUNCTION",
        "READ",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_MOUSEBUTTON",
        "_KEYHIT",
        "_KEYDOWN"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MOUSEX": {
      "name": "_MOUSEX",
      "type": "function",
      "category": "functions",
      "description": "returns the current horizontal position of the mouse cursor.",
      "syntax": "result = _MOUSEX([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MOUSEX()",
      "related": [
        "FUNCTION",
        "_MOUSEINPUT",
        "_MOUSEY",
        "_MOUSEBUTTON",
        "_KEYHIT",
        "_KEYDOWN",
        "INKEY$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_MOUSEY": {
      "name": "_MOUSEY",
      "type": "function",
      "category": "functions",
      "description": "returns the current vertical position of the mouse cursor.",
      "syntax": "result = _MOUSEY([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _MOUSEY()",
      "related": [
        "FUNCTION",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEBUTTON",
        "_KEYHIT",
        "_KEYDOWN",
        "INKEY$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_NEGATE": {
      "name": "_NEGATE",
      "type": "operator",
      "category": "operators",
      "description": "returns True when a boolean evaluation is False and vice-versa.",
      "syntax": "result = operand1 _NEGATE operand2",
      "parameters": [],
      "returns": null,
      "example": "result = a _NEGATE b",
      "related": [
        "AND",
        "AND",
        "boolean"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ]
    },
    "_NEWIMAGE": {
      "name": "_NEWIMAGE",
      "type": "function",
      "category": "functions",
      "description": "creates a designated size program SCREEN or page image and returns a handle value.",
      "syntax": "result = _NEWIMAGE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _NEWIMAGE()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$NOPREFIX": {
      "name": "$NOPREFIX",
      "type": "metacommand",
      "category": "metacommands",
      "description": "(deprecated) allows QB64-specific keywords to be used without the underscore prefix.",
      "syntax": "'$NOPREFIX: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$NOPREFIX:",
      "related": [
        "TO",
        "Metacommand"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_NOTIFYPOPUP": {
      "name": "_NOTIFYPOPUP",
      "type": "statement",
      "category": "statements",
      "description": "Shows a system notification popup.",
      "syntax": "_NOTIFYPOPUP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_NOTIFYPOPUP",
      "related": [
        "SYSTEM",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_NUMLOCK": {
      "name": "_NUMLOCK",
      "type": "statement",
      "category": "statements",
      "description": "sets Num Lock key state",
      "syntax": "_NUMLOCK [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_NUMLOCK",
      "related": [
        "LOCK"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_OFFSET": {
      "name": "_OFFSET",
      "type": "type",
      "category": "types",
      "description": "can be used store the value of an offset in memory when using DECLARE LIBRARY or MEM only.",
      "syntax": "DIM variable AS _OFFSET",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS _OFFSET",
      "related": [
        "OR",
        "OR",
        "TYPE",
        "MEM"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "_OPENCLIENT": {
      "name": "_OPENCLIENT",
      "type": "function",
      "category": "functions",
      "description": "connects to a Host on the Internet as a Client and returns the Client status handle.",
      "syntax": "result = _OPENCLIENT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _OPENCLIENT()",
      "related": [
        "AND",
        "AND",
        "AS",
        "FUNCTION",
        "TO",
        "ON",
        "OPEN",
        "CLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_OPENCONNECTION": {
      "name": "_OPENCONNECTION",
      "type": "function",
      "category": "functions",
      "description": "open's a connection from a client that the host has detected and returns a status handle.",
      "syntax": "result = _OPENCONNECTION([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _OPENCONNECTION()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_OPENFILEDIALOG$": {
      "name": "_OPENFILEDIALOG$",
      "type": "function",
      "category": "functions",
      "description": "Displays a standard dialog box that prompts the user to open a file.",
      "syntax": "string_result = _OPENFILEDIALOG$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _OPENFILEDIALOG$()",
      "related": [
        "FUNCTION",
        "OPEN",
        "TO",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT",
        "GET"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_OPENHOST": {
      "name": "_OPENHOST",
      "type": "function",
      "category": "functions",
      "description": "opens a Host and returns a Host status handle.",
      "syntax": "result = _OPENHOST([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _OPENHOST()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "OPTION _EXPLICIT": {
      "name": "OPTION _EXPLICIT",
      "type": "type",
      "category": "types",
      "description": "instructs the compiler to require variable declaration with DIM or an equivalent statement.",
      "syntax": "OPTION _EXPLICIT",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS OPTION _EXPLICIT",
      "related": [
        "DIM",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "OPTION _EXPLICITARRAY": {
      "name": "OPTION _EXPLICITARRAY",
      "type": "type",
      "category": "types",
      "description": "instructs the compiler to require array declaration with DIM or an equivalent statement.",
      "syntax": "OPTION _EXPLICITARRAY",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS OPTION _EXPLICITARRAY",
      "related": [
        "DIM",
        "OR",
        "OR",
        "TO",
        "array"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "_ORELSE": {
      "name": "_ORELSE",
      "type": "operator",
      "category": "operators",
      "description": "performs short-circuiting inclusive logical disjunction on two expressions.",
      "syntax": "result = operand1 _ORELSE operand2",
      "parameters": [],
      "returns": null,
      "example": "IF condition1 _ORELSE condition2 THEN",
      "related": [
        "ON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ]
    },
    "_OS$": {
      "name": "_OS$",
      "type": "function",
      "category": "functions",
      "description": "returns the QB64 compiler version in which the program was compiled as [WINDOWS], [LINUX] or [MACOSX] and [32BIT] or [64BIT].",
      "syntax": "string_result = _OS$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _OS$()",
      "related": [
        "AND",
        "AND",
        "AS",
        "FUNCTION",
        "OR",
        "OR"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_PALETTECOLOR": {
      "name": "_PALETTECOLOR",
      "type": "function",
      "category": "functions",
      "description": "return the 32 bit attribute color setting of an image or screen page handle's palette.",
      "syntax": "result = _PALETTECOLOR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _PALETTECOLOR()",
      "related": [
        "COLOR",
        "OR",
        "OR",
        "PALETTE",
        "RETURN",
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_PI": {
      "name": "_PI",
      "type": "constant",
      "category": "constants",
      "description": "returns the value of π or parameter multiples for angle or circle calculations.",
      "syntax": "_PI",
      "parameters": [],
      "returns": null,
      "example": "_PI",
      "related": [
        "CIRCLE",
        "FUNCTION",
        "OR",
        "OR",
        "circle"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "constant",
        "constants"
      ]
    },
    "_PIXELSIZE": {
      "name": "_PIXELSIZE",
      "type": "constant",
      "category": "constants",
      "description": "returns the pixel palette mode of a designated image handle.",
      "syntax": "_PIXELSIZE",
      "parameters": [],
      "returns": null,
      "example": "_PIXELSIZE",
      "related": [
        "FUNCTION",
        "PALETTE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "constant",
        "constants"
      ]
    },
    "_PRESERVE": {
      "name": "_PRESERVE",
      "type": "statement",
      "category": "statements",
      "description": "preserves the data presently in an array when REDIM is used.",
      "syntax": "_PRESERVE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_PRESERVE",
      "related": [
        "DATA",
        "REDIM",
        "array"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_PRINTIMAGE": {
      "name": "_PRINTIMAGE",
      "type": "statement",
      "category": "statements",
      "description": "sends an image to the printer that is stretched to the current printer paper size.",
      "syntax": "_PRINTIMAGE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_PRINTIMAGE \"Hello, World!\"",
      "related": [
        "TO",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT",
        "GET",
        "PUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_PRINTMODE": {
      "name": "_PRINTMODE",
      "type": "function",
      "category": "functions",
      "description": "returns the present _PRINTMODE value number.",
      "syntax": "result = _PRINTMODE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _PRINTMODE()",
      "related": [
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT",
        "GET",
        "PUT",
        "EOF"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_PRINTSTRING": {
      "name": "_PRINTSTRING",
      "type": "statement",
      "category": "statements",
      "description": "locates and prints a text string using graphic coordinates.",
      "syntax": "_PRINTSTRING [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_PRINTSTRING \"Hello, World!\"",
      "related": [
        "AND",
        "AND",
        "STRING",
        "string",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_PRINTWIDTH": {
      "name": "_PRINTWIDTH",
      "type": "function",
      "category": "functions",
      "description": "returns the pixel width of a text string to be printed using _PRINTSTRING.",
      "syntax": "result = _PRINTWIDTH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _PRINTWIDTH()",
      "related": [
        "FUNCTION",
        "STRING",
        "TO",
        "WIDTH",
        "string",
        "OPEN",
        "CLOSE",
        "INPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_PUTIMAGE": {
      "name": "_PUTIMAGE",
      "type": "statement",
      "category": "statements",
      "description": "maps a rectangular image source area to an image destination area.",
      "syntax": "_PUTIMAGE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_PUTIMAGE",
      "related": [
        "TO",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_FREEIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_R2D": {
      "name": "_R2D",
      "type": "function",
      "category": "functions",
      "description": "converts radians to degree angle values.",
      "syntax": "result = _R2D([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _R2D()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_R2G": {
      "name": "_R2G",
      "type": "function",
      "category": "functions",
      "description": "converts radians to gradient angle values.",
      "syntax": "result = _R2G([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _R2G()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_RED": {
      "name": "_RED",
      "type": "function",
      "category": "functions",
      "description": "function returns the palette or the red component intensity of a 32-bit image color.",
      "syntax": "result = _RED([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _RED()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR",
        "PALETTE",
        "_RGB32",
        "_RGBA32",
        "_RED32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_RED32": {
      "name": "_RED32",
      "type": "function",
      "category": "functions",
      "description": "returns the red component intensity of a 32-bit color value.",
      "syntax": "result = _RED32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _RED32()",
      "related": [
        "COLOR",
        "FUNCTION",
        "_RGB32",
        "_RGBA32",
        "_GREEN32",
        "_BLUE32",
        "_ALPHA32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_READBIT": {
      "name": "_READBIT",
      "type": "function",
      "category": "functions",
      "description": "returns the state of the specified bit of an integer variable.",
      "syntax": "result = _READBIT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _READBIT()",
      "related": [
        "FUNCTION",
        "INTEGER"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_READFILE$": {
      "name": "_READFILE$",
      "type": "function",
      "category": "functions",
      "description": "directly read a file into a string, without OPEN/CLOSE overhead.",
      "syntax": "string_result = _READFILE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _READFILE$()",
      "related": [
        "FUNCTION",
        "READ",
        "STRING",
        "string",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_RESETBIT": {
      "name": "_RESETBIT",
      "type": "function",
      "category": "functions",
      "description": "is used to set the specified bit of an integer variable to 0.",
      "syntax": "result = _RESETBIT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _RESETBIT()",
      "related": [
        "FUNCTION",
        "INTEGER",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$RESIZE": {
      "name": "$RESIZE",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used with ON allows a user to resize the program window where OFF does not.",
      "syntax": "'$RESIZE: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$RESIZE:",
      "related": [
        "NOT",
        "OFF",
        "TO",
        "WINDOW",
        "ON",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_RESIZE": {
      "name": "_RESIZE",
      "type": "function",
      "category": "functions",
      "description": "returns -1 when a program user wants to resize the program screen.",
      "syntax": "result = _RESIZE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _RESIZE()",
      "related": [
        "SCREEN",
        "SCREEN",
        "TO",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_RESIZEHEIGHT": {
      "name": "_RESIZEHEIGHT",
      "type": "function",
      "category": "functions",
      "description": "returns the requested new user screen height when $RESIZE:ON allows it.",
      "syntax": "result = _RESIZEHEIGHT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _RESIZEHEIGHT()",
      "related": [
        "FUNCTION",
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_RESIZEWIDTH": {
      "name": "_RESIZEWIDTH",
      "type": "function",
      "category": "functions",
      "description": "returns the requested new user screen width when $RESIZE:ON allows it.",
      "syntax": "result = _RESIZEWIDTH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _RESIZEWIDTH()",
      "related": [
        "FUNCTION",
        "SCREEN",
        "SCREEN",
        "WIDTH",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_RGB": {
      "name": "_RGB",
      "type": "function",
      "category": "functions",
      "description": "returns the closest palette index OR the LONG 32 bit color value in 32 bit screens.",
      "syntax": "result = _RGB([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "color& = _RGB(255, 0, 0) ' Red color",
      "related": [
        "COLOR",
        "FUNCTION",
        "LONG",
        "OR",
        "OR",
        "PALETTE",
        "_RGB32",
        "_RGBA32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_RGB32": {
      "name": "_RGB32",
      "type": "function",
      "category": "functions",
      "description": "returns the LONG 32 bit color value in 32 bit screens only",
      "syntax": "result = _RGB32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "color& = _RGB32(255, 0, 0) ' Red color",
      "related": [
        "COLOR",
        "FUNCTION",
        "LONG",
        "_RGBA32",
        "_RED32",
        "_GREEN32",
        "_BLUE32",
        "_ALPHA32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_RGBA": {
      "name": "_RGBA",
      "type": "function",
      "category": "functions",
      "description": "returns the closest palette index OR the LONG 32 bit color value in 32 bit screens with the ALPHA",
      "syntax": "result = _RGBA([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "color& = _RGBA(255, 0, 0) ' Red color",
      "related": [
        "COLOR",
        "FUNCTION",
        "LONG",
        "OR",
        "OR",
        "PALETTE",
        "alpha",
        "ALPHA"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_RGBA32": {
      "name": "_RGBA32",
      "type": "function",
      "category": "functions",
      "description": "returns the LONG 32 bit color value in 32 bit screens only with the ALPHA",
      "syntax": "result = _RGBA32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "color& = _RGBA32(255, 0, 0) ' Red color",
      "related": [
        "COLOR",
        "FUNCTION",
        "LONG",
        "alpha",
        "ALPHA",
        "_RGB32",
        "_RED32",
        "_GREEN32"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ROL": {
      "name": "_ROL",
      "type": "function",
      "category": "functions",
      "description": "used to rotate the bits of a numerical value to the left",
      "syntax": "result = _ROL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ROL()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ROR": {
      "name": "_ROR",
      "type": "function",
      "category": "functions",
      "description": "used to rotate the bits of a numerical value to the right.",
      "syntax": "result = _ROR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ROR()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ROUND": {
      "name": "_ROUND",
      "type": "function",
      "category": "functions",
      "description": "rounds to the closest INTEGER, LONG or _INTEGER64 numerical value.",
      "syntax": "result = _ROUND([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ROUND()",
      "related": [
        "FUNCTION",
        "INTEGER",
        "LONG",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SATURATION32": {
      "name": "_SATURATION32",
      "type": "function",
      "category": "functions",
      "description": "returns the saturation value (HSB colorspace) of a given 32-bit ARGB color.",
      "syntax": "result = _SATURATION32([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SATURATION32()",
      "related": [
        "COLOR",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SAVEFILEDIALOG$": {
      "name": "_SAVEFILEDIALOG$",
      "type": "function",
      "category": "functions",
      "description": "Displays a standard dialog box that prompts the user to save a file.",
      "syntax": "string_result = _SAVEFILEDIALOG$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _SAVEFILEDIALOG$()",
      "related": [
        "FUNCTION",
        "TO",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT",
        "GET"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SAVEIMAGE": {
      "name": "_SAVEIMAGE",
      "type": "statement",
      "category": "statements",
      "description": "Saves the screen or an image handle to an image file.",
      "syntax": "_SAVEIMAGE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SAVEIMAGE",
      "related": [
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "TO",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SEC": {
      "name": "_SEC",
      "type": "function",
      "category": "functions",
      "description": "the mathematical function secant defined by 1/COS.",
      "syntax": "result = _SEC([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SEC()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SECH": {
      "name": "_SECH",
      "type": "function",
      "category": "functions",
      "description": "Returns the hyperbolic secant.",
      "syntax": "result = _SECH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SECH()",
      "related": [
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SELECTFOLDERDIALOG$": {
      "name": "_SELECTFOLDERDIALOG$",
      "type": "function",
      "category": "functions",
      "description": "Displays a dialog box that enables the user to select a folder (directory).",
      "syntax": "string_result = _SELECTFOLDERDIALOG$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _SELECTFOLDERDIALOG$()",
      "related": [
        "FUNCTION",
        "TO",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SCREENCLICK": {
      "name": "_SCREENCLICK",
      "type": "statement",
      "category": "statements",
      "description": "simulates clicking on a point on the desktop screen with the left mouse button.",
      "syntax": "_SCREENCLICK [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SCREENCLICK",
      "related": [
        "POINT",
        "SCREEN",
        "SCREEN",
        "ON",
        "screen",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SCREENEXISTS": {
      "name": "_SCREENEXISTS",
      "type": "function",
      "category": "functions",
      "description": "returns a -1 value once a screen has been created.",
      "syntax": "result = _SCREENEXISTS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SCREENEXISTS()",
      "related": [
        "FUNCTION",
        "SCREEN",
        "SCREEN",
        "screen",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$SCREENHIDE": {
      "name": "$SCREENHIDE",
      "type": "metacommand",
      "category": "metacommands",
      "description": "hides the program window from view.",
      "syntax": "'$SCREENHIDE: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$SCREENHIDE:",
      "related": [
        "VIEW",
        "WINDOW",
        "Metacommand",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_SCREENHIDE": {
      "name": "_SCREENHIDE",
      "type": "statement",
      "category": "statements",
      "description": "hides the program window from view.",
      "syntax": "_SCREENHIDE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SCREENHIDE",
      "related": [
        "VIEW",
        "WINDOW",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE",
        "_FREEIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SCREENICON": {
      "name": "_SCREENICON",
      "type": "statement",
      "category": "statements",
      "description": "minimizes the program window to an icon on the taskbar.",
      "syntax": "_SCREENICON [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SCREENICON",
      "related": [
        "TO",
        "WINDOW",
        "ON",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SCREENIMAGE": {
      "name": "_SCREENIMAGE",
      "type": "function",
      "category": "functions",
      "description": "creates an image of the current desktop and returns an image handle.",
      "syntax": "result = _SCREENIMAGE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SCREENIMAGE()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SCREENMOVE": {
      "name": "_SCREENMOVE",
      "type": "statement",
      "category": "statements",
      "description": "positions program window on the desktop using designated coordinates or the _MIDDLE option.",
      "syntax": "_SCREENMOVE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SCREENMOVE",
      "related": [
        "OR",
        "OR",
        "WINDOW",
        "ON",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SCREENPRINT": {
      "name": "_SCREENPRINT",
      "type": "statement",
      "category": "statements",
      "description": "simulates typing text into a Windows program using the keyboard.",
      "syntax": "_SCREENPRINT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SCREENPRINT \"Hello, World!\"",
      "related": [
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE",
        "_FREEIMAGE",
        "OPEN",
        "CLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "$SCREENSHOW": {
      "name": "$SCREENSHOW",
      "type": "metacommand",
      "category": "metacommands",
      "description": "displays the program window after it was hidden.",
      "syntax": "'$SCREENSHOW: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$SCREENSHOW:",
      "related": [
        "WINDOW",
        "Metacommand",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE",
        "_FREEIMAGE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_SCREENSHOW": {
      "name": "_SCREENSHOW",
      "type": "statement",
      "category": "statements",
      "description": "displays the program window after it has been hidden by _SCREENHIDE.",
      "syntax": "_SCREENSHOW [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SCREENSHOW",
      "related": [
        "WINDOW",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE",
        "_FREEIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SCREENX": {
      "name": "_SCREENX",
      "type": "function",
      "category": "functions",
      "description": "returns the program window's upper left corner horizontal position on the desktop.",
      "syntax": "result = _SCREENX([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SCREENX()",
      "related": [
        "FUNCTION",
        "ON",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE",
        "_FREEIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SCREENY": {
      "name": "_SCREENY",
      "type": "function",
      "category": "functions",
      "description": "returns the program window's upper left corner vertical position on the desktop.",
      "syntax": "result = _SCREENY([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SCREENY()",
      "related": [
        "FUNCTION",
        "ON",
        "SCREEN",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE",
        "_FREEIMAGE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SCROLLLOCK": {
      "name": "_SCROLLLOCK",
      "type": "statement",
      "category": "statements",
      "description": "sets Scroll Lock key state",
      "syntax": "_SCROLLLOCK [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SCROLLLOCK",
      "related": [
        "LOCK"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SETALPHA": {
      "name": "_SETALPHA",
      "type": "statement",
      "category": "statements",
      "description": "sets the alpha channel transparency level of some or all of the pixels of an image.",
      "syntax": "_SETALPHA [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SETALPHA",
      "related": [
        "OR",
        "OR",
        "alpha",
        "ALPHA"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SETBIT": {
      "name": "_SETBIT",
      "type": "function",
      "category": "functions",
      "description": "is used to set the specified bit of an integer variable to 1.",
      "syntax": "result = _SETBIT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SETBIT()",
      "related": [
        "FUNCTION",
        "INTEGER",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SHELLHIDE": {
      "name": "_SHELLHIDE",
      "type": "function",
      "category": "functions",
      "description": "returns the code sent by a program exit using END or SYSTEM followed by an INTEGER value.",
      "syntax": "result = _SHELLHIDE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SHELLHIDE()",
      "related": [
        "END",
        "EXIT",
        "FUNCTION",
        "INTEGER",
        "OR",
        "OR",
        "SYSTEM"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SHL": {
      "name": "_SHL",
      "type": "function",
      "category": "functions",
      "description": "used to shift the bits of a numerical value to the left",
      "syntax": "result = _SHL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SHL()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SHR": {
      "name": "_SHR",
      "type": "function",
      "category": "functions",
      "description": "used to shift the bits of a numerical value to the right.",
      "syntax": "result = _SHR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SHR()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SINH": {
      "name": "_SINH",
      "type": "function",
      "category": "functions",
      "description": "Returns the hyperbolic sine of x radians.",
      "syntax": "result = _SINH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SINH()",
      "related": [
        "FUNCTION",
        "SINe",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SMOOTH": {
      "name": "_SMOOTH",
      "type": "function",
      "category": "functions",
      "description": "checks whether the current _FULLSCREEN mode has antialiasing enabled or not.",
      "syntax": "result = _SMOOTH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SMOOTH()",
      "related": [
        "NOT",
        "OR",
        "OR"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDBAL": {
      "name": "_SNDBAL",
      "type": "statement",
      "category": "statements",
      "description": "attempts to set the balance or 3D position of a sound file.",
      "syntax": "_SNDBAL [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDBAL",
      "related": [
        "OR",
        "OR",
        "SOUND",
        "TO",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDCLOSE": {
      "name": "_SNDCLOSE",
      "type": "statement",
      "category": "statements",
      "description": "frees and unloads an open sound using the sound handle created by _SNDOPEN.",
      "syntax": "_SNDCLOSE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDCLOSE",
      "related": [
        "AND",
        "AND",
        "OPEN",
        "SOUND",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDCOPY": {
      "name": "_SNDCOPY",
      "type": "function",
      "category": "functions",
      "description": "copies a sound handle value to a new designated handle.",
      "syntax": "result = _SNDCOPY([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDCOPY()",
      "related": [
        "FUNCTION",
        "SOUND",
        "TO",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDGETPOS": {
      "name": "_SNDGETPOS",
      "type": "function",
      "category": "functions",
      "description": "returns the current playing position in seconds from a sound file.",
      "syntax": "result = _SNDGETPOS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDGETPOS()",
      "related": [
        "FUNCTION",
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDLEN": {
      "name": "_SNDLEN",
      "type": "function",
      "category": "functions",
      "description": "returns the length of a sound in seconds from a sound file.",
      "syntax": "result = _SNDLEN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDLEN()",
      "related": [
        "FUNCTION",
        "SOUND",
        "LEFT$",
        "RIGHT$",
        "MID$",
        "LEN",
        "INSTR",
        "CHR$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDLIMIT": {
      "name": "_SNDLIMIT",
      "type": "statement",
      "category": "statements",
      "description": "stops playing a sound after it has been playing for a set number of seconds.",
      "syntax": "_SNDLIMIT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDLIMIT",
      "related": [
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDLOOP": {
      "name": "_SNDLOOP",
      "type": "statement",
      "category": "statements",
      "description": "plays a sound repeatedly until _SNDSTOP is used.",
      "syntax": "_SNDLOOP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDLOOP",
      "related": [
        "SOUND",
        "UNTIL",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDNEW": {
      "name": "_SNDNEW",
      "type": "function",
      "category": "functions",
      "description": "creates a raw empty sound in memory and returns a LONG handle value for later access.",
      "syntax": "result = _SNDNEW([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDNEW()",
      "related": [
        "ACCESS",
        "AND",
        "AND",
        "FUNCTION",
        "LONG",
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDOPEN": {
      "name": "_SNDOPEN",
      "type": "function",
      "category": "functions",
      "description": "loads a sound file and returns a sound handle.",
      "syntax": "result = _SNDOPEN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDOPEN()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "SOUND",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDOPENRAW": {
      "name": "_SNDOPENRAW",
      "type": "function",
      "category": "functions",
      "description": "opens a new channel to shove _SNDRAW content into without mixing.",
      "syntax": "result = _SNDOPENRAW([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDOPENRAW()",
      "related": [
        "FUNCTION",
        "TO",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT",
        "GET"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDPAUSE": {
      "name": "_SNDPAUSE",
      "type": "statement",
      "category": "statements",
      "description": "stops playing a sound file until resumed.",
      "syntax": "_SNDPAUSE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDPAUSE",
      "related": [
        "SOUND",
        "UNTIL",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDPAUSED": {
      "name": "_SNDPAUSED",
      "type": "function",
      "category": "functions",
      "description": "returns the current pause status of a sound file handle.",
      "syntax": "result = _SNDPAUSED([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDPAUSED()",
      "related": [
        "FUNCTION",
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDPLAY": {
      "name": "_SNDPLAY",
      "type": "statement",
      "category": "statements",
      "description": "plays a sound file handle that was created by _SNDOPEN or _SNDCOPY.",
      "syntax": "_SNDPLAY [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDPLAY",
      "related": [
        "OR",
        "OR",
        "SOUND",
        "_SNDOPEN",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDPLAYCOPY": {
      "name": "_SNDPLAYCOPY",
      "type": "statement",
      "category": "statements",
      "description": "copies a sound handle, plays it and automatically closes the copy when done.",
      "syntax": "_SNDPLAYCOPY [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDPLAYCOPY",
      "related": [
        "AND",
        "AND",
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDPLAYFILE": {
      "name": "_SNDPLAYFILE",
      "type": "statement",
      "category": "statements",
      "description": "directly plays a designated sound file.",
      "syntax": "_SNDPLAYFILE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDPLAYFILE",
      "related": [
        "SOUND",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT",
        "GET",
        "PUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDPLAYING": {
      "name": "_SNDPLAYING",
      "type": "function",
      "category": "functions",
      "description": "returns the current playing status of a sound handle.",
      "syntax": "result = _SNDPLAYING([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDPLAYING()",
      "related": [
        "FUNCTION",
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDRATE": {
      "name": "_SNDRATE",
      "type": "function",
      "category": "functions",
      "description": "returns the sound card sample rate to set _SNDRAW durations.",
      "syntax": "result = _SNDRATE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDRATE()",
      "related": [
        "FUNCTION",
        "SOUND",
        "TO",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDRAW": {
      "name": "_SNDRAW",
      "type": "statement",
      "category": "statements",
      "description": "plays a mono or stereo sound sample frame.",
      "syntax": "_SNDRAW [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDRAW",
      "related": [
        "OR",
        "OR",
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDRAWBATCH": {
      "name": "_SNDRAWBATCH",
      "type": "statement",
      "category": "statements",
      "description": "plays a batch of mono or stereo sound sample frames from an array.",
      "syntax": "_SNDRAWBATCH [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDRAWBATCH",
      "related": [
        "OR",
        "OR",
        "SOUND",
        "array",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDRAWDONE": {
      "name": "_SNDRAWDONE",
      "type": "statement",
      "category": "statements",
      "description": "pads a _SNDRAW stream so the final (partially filled) buffer section is played.",
      "syntax": "_SNDRAWDONE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDRAWDONE",
      "related": [
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "SOUND",
        "PLAY",
        "IF...THEN",
        "FOR...NEXT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDRAWLEN": {
      "name": "_SNDRAWLEN",
      "type": "function",
      "category": "functions",
      "description": "returns a value until the _SNDRAW buffer is empty.",
      "syntax": "result = _SNDRAWLEN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SNDRAWLEN()",
      "related": [
        "FUNCTION",
        "UNTIL",
        "LEFT$",
        "RIGHT$",
        "MID$",
        "LEN",
        "INSTR",
        "CHR$"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_SNDSETPOS": {
      "name": "_SNDSETPOS",
      "type": "statement",
      "category": "statements",
      "description": "sets the playing position of a sound handle.",
      "syntax": "_SNDSETPOS [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDSETPOS",
      "related": [
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDSTOP": {
      "name": "_SNDSTOP",
      "type": "statement",
      "category": "statements",
      "description": "stops playing a sound handle.",
      "syntax": "_SNDSTOP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDSTOP",
      "related": [
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SNDVOL": {
      "name": "_SNDVOL",
      "type": "statement",
      "category": "statements",
      "description": "sets the volume of a sound file handle.",
      "syntax": "_SNDVOL [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_SNDVOL",
      "related": [
        "SOUND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_SOURCE": {
      "name": "_SOURCE",
      "type": "function",
      "category": "functions",
      "description": "returns the present source image handle value.",
      "syntax": "result = _SOURCE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _SOURCE()",
      "related": [],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_STARTDIR$": {
      "name": "_STARTDIR$",
      "type": "function",
      "category": "functions",
      "description": "returns the user's program calling path as a STRING.",
      "syntax": "string_result = _STARTDIR$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _STARTDIR$()",
      "related": [
        "AS",
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_STATUSCODE": {
      "name": "_STATUSCODE",
      "type": "function",
      "category": "functions",
      "description": "gives the HTTP status code of an HTTP response that was opened using _OPENCLIENT.",
      "syntax": "result = _STATUSCODE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _STATUSCODE()",
      "related": [
        "FUNCTION",
        "opened"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_STRCMP": {
      "name": "_STRCMP",
      "type": "function",
      "category": "functions",
      "description": "compares the relationship between two strings.",
      "syntax": "result = _STRCMP([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _STRCMP()",
      "related": [
        "FUNCTION",
        "STRINGs",
        "strings"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_STRICMP": {
      "name": "_STRICMP",
      "type": "function",
      "category": "functions",
      "description": "compares the relationship between two strings, without regard for case-sensitivity.",
      "syntax": "result = _STRICMP([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _STRICMP()",
      "related": [
        "FUNCTION",
        "STRINGs",
        "strings"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_TANH": {
      "name": "_TANH",
      "type": "function",
      "category": "functions",
      "description": "Returns the hyperbolic tangent of x radians.",
      "syntax": "result = _TANH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _TANH()",
      "related": [
        "FUNCTION",
        "tangent",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_TITLE": {
      "name": "_TITLE",
      "type": "statement",
      "category": "statements",
      "description": "sets the program title string value.",
      "syntax": "_TITLE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_TITLE",
      "related": [
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_TITLE$": {
      "name": "_TITLE$",
      "type": "function",
      "category": "functions",
      "description": "gets the program title string value.",
      "syntax": "string_result = _TITLE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _TITLE$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_TOGGLEBIT": {
      "name": "_TOGGLEBIT",
      "type": "function",
      "category": "functions",
      "description": "is used to toggle the specified bit of an integer variable from 1 to 0 or 0 to 1.",
      "syntax": "result = _TOGGLEBIT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _TOGGLEBIT()",
      "related": [
        "FUNCTION",
        "INTEGER",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_TOSTR$": {
      "name": "_TOSTR$",
      "type": "function",
      "category": "functions",
      "description": "Returns the STRING representation of a numerical value. It's a successor of the legacy STR$ function.",
      "syntax": "string_result = _TOSTR$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _TOSTR$()",
      "related": [
        "FUNCTION",
        "STR$",
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_TOTALDROPPEDFILES": {
      "name": "_TOTALDROPPEDFILES",
      "type": "function",
      "category": "functions",
      "description": "returns the number of items (files or folders) dropped in a program's window after _ACCEPTFILEDROP is enabled.",
      "syntax": "result = _TOTALDROPPEDFILES([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _TOTALDROPPEDFILES()",
      "related": [
        "FILES",
        "FUNCTION",
        "OR",
        "OR",
        "WINDOW",
        "OPEN",
        "CLOSE",
        "INPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_TRIM$": {
      "name": "_TRIM$",
      "type": "function",
      "category": "functions",
      "description": "shorthand to LTRIM$(RTRIM$(\"text\"))",
      "syntax": "string_result = _TRIM$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = _TRIM$()",
      "related": [
        "FUNCTION",
        "LTRIM$",
        "RTRIM$",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_UCHARPOS": {
      "name": "_UCHARPOS",
      "type": "function",
      "category": "functions",
      "description": "calculates the starting pixel positions of every character of a (unicode) text string.",
      "syntax": "result = _UCHARPOS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _UCHARPOS()",
      "related": [
        "FUNCTION",
        "STRING",
        "string",
        "Unicode"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_UFONTHEIGHT": {
      "name": "_UFONTHEIGHT",
      "type": "function",
      "category": "functions",
      "description": "returns the global glyph height (incl. ascender/descender) of a loaded font.",
      "syntax": "result = _UFONTHEIGHT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _UFONTHEIGHT()",
      "related": [
        "FUNCTION",
        "font"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_ULINESPACING": {
      "name": "_ULINESPACING",
      "type": "function",
      "category": "functions",
      "description": "returns the vertical line spacing (distance between two consecutive baselines) in pixels.",
      "syntax": "result = _ULINESPACING([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _ULINESPACING()",
      "related": [
        "FUNCTION",
        "LINE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_UNSIGNED": {
      "name": "_UNSIGNED",
      "type": "type",
      "category": "types",
      "description": "expands the positive range of numerical INTEGER, LONG or _INTEGER64 values returned.",
      "syntax": "DIM variable AS _UNSIGNED",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS _UNSIGNED",
      "related": [
        "INTEGER",
        "LONG",
        "OR",
        "OR",
        "TYPE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "$UNSTABLE": {
      "name": "$UNSTABLE",
      "type": "metacommand",
      "category": "metacommands",
      "description": "will enable the use of features that have not yet been made a permanent part of the language.",
      "syntax": "'$UNSTABLE: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$UNSTABLE:",
      "related": [
        "NOT",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_UPRINTSTRING": {
      "name": "_UPRINTSTRING",
      "type": "statement",
      "category": "statements",
      "description": "locates and prints a (unicode) text string using graphic coordinates.",
      "syntax": "_UPRINTSTRING [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_UPRINTSTRING \"Hello, World!\"",
      "related": [
        "AND",
        "AND",
        "STRING",
        "string",
        "Unicode",
        "OPEN",
        "CLOSE",
        "INPUT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_UPRINTWIDTH": {
      "name": "_UPRINTWIDTH",
      "type": "function",
      "category": "functions",
      "description": "returns the pixel width of a (unicode) text string to be printed using _UPRINTSTRING.",
      "syntax": "result = _UPRINTWIDTH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _UPRINTWIDTH()",
      "related": [
        "FUNCTION",
        "STRING",
        "TO",
        "WIDTH",
        "string",
        "Unicode",
        "OPEN",
        "CLOSE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "$VERSIONINFO": {
      "name": "$VERSIONINFO",
      "type": "metacommand",
      "category": "metacommands",
      "description": "adds metadata to Windows only binaries for identification purposes across the OS.",
      "syntax": "'$VERSIONINFO: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$VERSIONINFO:",
      "related": [
        "TO",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "Windows",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "_WAVE": {
      "name": "_WAVE",
      "type": "statement",
      "category": "statements",
      "description": "defines the waveform shape for a specified audio channel when used with SOUND or PLAY.",
      "syntax": "_WAVE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_WAVE",
      "related": [
        "OR",
        "OR",
        "PLAY",
        "PLAY",
        "SOUND"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_WHEEL": {
      "name": "_WHEEL",
      "type": "function",
      "category": "functions",
      "description": "returns -1 when a control device wheel is scrolled up and 1 when scrolled down. Zero indicates no activity.",
      "syntax": "result = _WHEEL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _WHEEL()",
      "related": [
        "AND",
        "AND",
        "FUNCTION"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_WIDTH": {
      "name": "_WIDTH",
      "type": "function",
      "category": "functions",
      "description": "returns the width of a SCREEN or image handle.",
      "syntax": "result = _WIDTH([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _WIDTH()",
      "related": [
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "WIDTH",
        "screen"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_WINDOWHANDLE": {
      "name": "_WINDOWHANDLE",
      "type": "function",
      "category": "functions",
      "description": "returns the window handle assigned to the current program by the OS. Windows-only.",
      "syntax": "result = _WINDOWHANDLE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _WINDOWHANDLE()",
      "related": [
        "FUNCTION",
        "TO",
        "WINDOW",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QB64",
      "availability": "Windows",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_WINDOWHASFOCUS": {
      "name": "_WINDOWHASFOCUS",
      "type": "function",
      "category": "functions",
      "description": "returns true (-1) if the current program's window has focus. Windows-only.",
      "syntax": "result = _WINDOWHASFOCUS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = _WINDOWHASFOCUS()",
      "related": [
        "FUNCTION",
        "WINDOW",
        "IF",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QB64",
      "availability": "Windows",
      "tags": [
        "function",
        "functions"
      ]
    },
    "_WRITEFILE": {
      "name": "_WRITEFILE",
      "type": "statement",
      "category": "statements",
      "description": "directly write a string into a file, without OPEN/CLOSE overhead.",
      "syntax": "_WRITEFILE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_WRITEFILE",
      "related": [
        "STRING",
        "WRITE",
        "string",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ABS": {
      "name": "ABS",
      "type": "function",
      "category": "functions",
      "description": "converts any negative numerical value to a positive value.",
      "syntax": "result = ABS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = ABS()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "ABSOLUTE": {
      "name": "ABSOLUTE",
      "type": "type",
      "category": "types",
      "description": "is used to access computer interrupt registers.",
      "syntax": "DIM variable AS ABSOLUTE",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS ABSOLUTE",
      "related": [
        "ACCESS",
        "INTERRUPT",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "ACCESS": {
      "name": "ACCESS",
      "type": "statement",
      "category": "statements",
      "description": "sets the read and write access of a file when opened.",
      "syntax": "ACCESS [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ACCESS",
      "related": [
        "AND",
        "AND",
        "READ",
        "WRITE",
        "opened"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ALIAS": {
      "name": "ALIAS",
      "type": "statement",
      "category": "statements",
      "description": "denotes the actual name of an imported FUNCTION or SUB procedure.",
      "syntax": "ALIAS [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ALIAS",
      "related": [
        "FUNCTION",
        "NAME",
        "OR",
        "OR",
        "SUB"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "AND": {
      "name": "AND",
      "type": "operator",
      "category": "operators",
      "description": "is used to compare two numerical values bitwise.",
      "syntax": "result = operand1 AND operand2",
      "parameters": [],
      "returns": null,
      "example": "IF condition1 AND condition2 THEN",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ]
    },
    "AND (boolean)": {
      "name": "AND (boolean)",
      "type": "operator",
      "category": "operators",
      "description": "conditonal operator is used to include another evaluation in an IF...THEN or Boolean statement.",
      "syntax": "IF condition1 AND condition2 THEN",
      "parameters": [],
      "returns": null,
      "example": "IF condition1 AND condition2 THEN",
      "related": [
        "OR",
        "OR",
        "THEN",
        "TO",
        "boolean",
        "IF"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ],
      "aliases": [
        "AND"
      ]
    },
    "APPEND": {
      "name": "APPEND",
      "type": "statement",
      "category": "statements",
      "description": "creates a new file or allows an existing file to have data added using WRITE or PRINT",
      "syntax": "APPEND [parameters]",
      "parameters": [],
      "returns": null,
      "example": "APPEND",
      "related": [
        "DATA",
        "OR",
        "OR",
        "PRINT",
        "TO",
        "WRITE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "AS": {
      "name": "AS",
      "type": "statement",
      "category": "statements",
      "description": "is used to denote a variable type or file number.",
      "syntax": "AS [parameters]",
      "parameters": [],
      "returns": null,
      "example": "AS",
      "related": [
        "OR",
        "OR",
        "TO",
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ASC": {
      "name": "ASC",
      "type": "statement",
      "category": "statements",
      "description": "(QB64 only) sets the code value of an ASCII text character at a designated string position.",
      "syntax": "ASC [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ASC",
      "related": [
        "STRING",
        "string"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ATN": {
      "name": "ATN",
      "type": "function",
      "category": "functions",
      "description": "or arctangent returns the angle in radians of a numerical tangent value.",
      "syntax": "result = ATN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = ATN()",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "tangent",
        "SIN",
        "COS",
        "TAN",
        "_ASIN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "BEEP": {
      "name": "BEEP",
      "type": "statement",
      "category": "statements",
      "description": "creates an error sound of a fixed duration.",
      "syntax": "BEEP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "BEEP",
      "related": [
        "ERROR",
        "SOUND"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "BINARY": {
      "name": "BINARY",
      "type": "statement",
      "category": "statements",
      "description": "creates or opens an existing file for read and write byte-wise access.",
      "syntax": "BINARY [parameters]",
      "parameters": [],
      "returns": null,
      "example": "BINARY",
      "related": [
        "ACCESS",
        "AND",
        "AND",
        "OR",
        "OR",
        "READ",
        "WRITE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "BLOAD": {
      "name": "BLOAD",
      "type": "statement",
      "category": "statements",
      "description": "transfers the contents of a BINARY BSAVE file to a specific array.",
      "syntax": "BLOAD [parameters]",
      "parameters": [],
      "returns": null,
      "example": "BLOAD",
      "related": [
        "BINARY",
        "BSAVE",
        "TO",
        "array"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "BSAVE": {
      "name": "BSAVE",
      "type": "statement",
      "category": "statements",
      "description": "transfers the contents of an array to a specified size BINARY file.",
      "syntax": "BSAVE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "BSAVE",
      "related": [
        "BINARY",
        "TO",
        "array"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "BYVAL": {
      "name": "BYVAL",
      "type": "statement",
      "category": "statements",
      "description": "assigns a numerical variable value by its value, not the name.",
      "syntax": "BYVAL [parameters]",
      "parameters": [],
      "returns": null,
      "example": "BYVAL",
      "related": [
        "NAME",
        "NOT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CALL": {
      "name": "CALL",
      "type": "statement",
      "category": "statements",
      "description": "optional statement that sends the program to a SUB procedure. Requires parameters be enclosed in brackets(parenthesis).",
      "syntax": "CALL [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CALL",
      "related": [
        "SUB",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CALL ABSOLUTE": {
      "name": "CALL ABSOLUTE",
      "type": "statement",
      "category": "statements",
      "description": "is used to access computer interrupt registers.",
      "syntax": "CALL ABSOLUTE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CALL ABSOLUTE",
      "related": [
        "ACCESS",
        "INTERRUPT",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CASE": {
      "name": "CASE",
      "type": "statement",
      "category": "statements",
      "description": "designates specific conditions in a SELECT CASE statement block.",
      "syntax": "CASE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CASE",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CASE ELSE": {
      "name": "CASE ELSE",
      "type": "statement",
      "category": "statements",
      "description": "designates an alternative condition to be evaluated in a SELECT CASE statement block.",
      "syntax": "CASE ELSE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CASE ELSE",
      "related": [
        "CASE",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CASE IS": {
      "name": "CASE IS",
      "type": "statement",
      "category": "statements",
      "description": "designates specific conditions in a SELECT CASE statement block.",
      "syntax": "CASE IS [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CASE IS",
      "related": [
        "CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CDBL": {
      "name": "CDBL",
      "type": "function",
      "category": "functions",
      "description": "returns the closest DOUBLE value of a number.",
      "syntax": "result = CDBL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CDBL()",
      "related": [
        "DOUBLE",
        "FUNCTION"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CHAIN": {
      "name": "CHAIN",
      "type": "statement",
      "category": "statements",
      "description": "sends a program to another specified program module or compiled program.",
      "syntax": "CHAIN [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CHAIN",
      "related": [
        "OR",
        "OR",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CHDIR": {
      "name": "CHDIR",
      "type": "statement",
      "category": "statements",
      "description": "changes the current program path for file access.",
      "syntax": "CHDIR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CHDIR",
      "related": [
        "ACCESS"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CHR$": {
      "name": "CHR$",
      "type": "function",
      "category": "functions",
      "description": "returns a text string character by the specified ASCII code number.",
      "syntax": "string_result = CHR$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "char$ = CHR$(65) ' Returns \"A\"",
      "related": [
        "FUNCTION",
        "STRING",
        "string",
        "LEFT$",
        "RIGHT$",
        "MID$",
        "LEN",
        "INSTR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CINT": {
      "name": "CINT",
      "type": "function",
      "category": "functions",
      "description": "returns the closest INTEGER value of a numerical value.",
      "syntax": "result = CINT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CINT()",
      "related": [
        "FUNCTION",
        "INTEGER"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CIRCLE": {
      "name": "CIRCLE",
      "type": "statement",
      "category": "statements",
      "description": "creates a circle, ellipse or arc at a designated graphical coordinate position.",
      "syntax": "CIRCLE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CIRCLE (100, 100), 50 ' Circle at (100,100) with radius 50\nCIRCLE (200, 200), 30, _RGB32(255, 0, 0) ' Red circle",
      "related": [
        "OR",
        "OR",
        "circle"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CLEAR": {
      "name": "CLEAR",
      "type": "statement",
      "category": "statements",
      "description": "sets all variable and array values to zero number values or empty STRINGs.",
      "syntax": "CLEAR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CLEAR",
      "related": [
        "AND",
        "AND",
        "OR",
        "OR",
        "TO",
        "array",
        "STRINGs",
        "strings"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CLNG": {
      "name": "CLNG",
      "type": "function",
      "category": "functions",
      "description": "returns the closest LONG value of a numerical value.",
      "syntax": "result = CLNG([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CLNG()",
      "related": [
        "FUNCTION",
        "LONG"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CLOSE": {
      "name": "CLOSE",
      "type": "statement",
      "category": "statements",
      "description": "closes specific file number(s) or all files when a number is not specified.",
      "syntax": "CLOSE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CLOSE",
      "related": [
        "FILES",
        "NOT",
        "OR",
        "OR",
        "OPEN",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CLS": {
      "name": "CLS",
      "type": "statement",
      "category": "statements",
      "description": "clears a program screen, VIEW port or WINDOW.",
      "syntax": "CLS [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CLS",
      "related": [
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "VIEW",
        "WINDOW",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "COLOR": {
      "name": "COLOR",
      "type": "statement",
      "category": "statements",
      "description": "sets the current text foreground and/or background color to be used.",
      "syntax": "COLOR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "COLOR 15, 1 ' White text on blue background\nCOLOR _RGB32(255, 0, 0) ' Red text",
      "related": [
        "TO",
        "_RGB32",
        "_RGBA32",
        "_RED32",
        "_GREEN32",
        "_BLUE32",
        "_ALPHA32"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "COMMAND$": {
      "name": "COMMAND$",
      "type": "function",
      "category": "functions",
      "description": "returns the command line arguments passed when a program is run.",
      "syntax": "string_result = COMMAND$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = COMMAND$()",
      "related": [
        "FUNCTION",
        "LINE",
        "RUN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "COMMON": {
      "name": "COMMON",
      "type": "statement",
      "category": "statements",
      "description": "sets a variable name as shared by CHAINed program modules.",
      "syntax": "COMMON [parameters]",
      "parameters": [],
      "returns": null,
      "example": "COMMON",
      "related": [
        "AS",
        "NAME",
        "SHARED",
        "CHAINed"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "CONST": {
      "name": "CONST",
      "type": "constant",
      "category": "constants",
      "description": "sets a variable name and its value as a constant value to be used by all procedures.",
      "syntax": "CONST",
      "parameters": [],
      "returns": null,
      "example": "CONST",
      "related": [
        "AND",
        "AND",
        "AS",
        "NAME",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "constant",
        "constants"
      ]
    },
    "COS": {
      "name": "COS",
      "type": "function",
      "category": "functions",
      "description": "returns the cosine of a radian angle value.",
      "syntax": "result = COS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = COS()",
      "related": [
        "FUNCTION",
        "COSine",
        "SIN",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS",
        "_ATAN2"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CSNG": {
      "name": "CSNG",
      "type": "function",
      "category": "functions",
      "description": "returns the closest SINGLE value of a numerical value.",
      "syntax": "result = CSNG([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CSNG()",
      "related": [
        "FUNCTION",
        "SINGLE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CSRLIN": {
      "name": "CSRLIN",
      "type": "function",
      "category": "functions",
      "description": "returns the present PRINT cursor text row SCREEN coordinate position.",
      "syntax": "result = CSRLIN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CSRLIN()",
      "related": [
        "FUNCTION",
        "PRINT",
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CVD": {
      "name": "CVD",
      "type": "function",
      "category": "functions",
      "description": "returns the DOUBLE numerical value of an 8 byte MKD$ string.",
      "syntax": "result = CVD([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CVD()",
      "related": [
        "DOUBLE",
        "FUNCTION",
        "MKD$",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CVDMBF": {
      "name": "CVDMBF",
      "type": "function",
      "category": "functions",
      "description": "returns the DOUBLE numerical value of a Microsoft Binary Format string.",
      "syntax": "result = CVDMBF([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CVDMBF()",
      "related": [
        "BINARY",
        "DOUBLE",
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CVI": {
      "name": "CVI",
      "type": "function",
      "category": "functions",
      "description": "returns the INTEGER numerical value of a 2 byte MKI$ string.",
      "syntax": "result = CVI([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CVI()",
      "related": [
        "FUNCTION",
        "INTEGER",
        "MKI$",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CVL": {
      "name": "CVL",
      "type": "function",
      "category": "functions",
      "description": "returns the LONG numerical value of a 4 byte MKL$ string.",
      "syntax": "result = CVL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CVL()",
      "related": [
        "FUNCTION",
        "LONG",
        "MKL$",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CVS": {
      "name": "CVS",
      "type": "function",
      "category": "functions",
      "description": "returns the SINGLE numerical value of a 4 byte MKS$ string.",
      "syntax": "result = CVS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CVS()",
      "related": [
        "FUNCTION",
        "MKS$",
        "SINGLE",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CVSMBF": {
      "name": "CVSMBF",
      "type": "function",
      "category": "functions",
      "description": "returns the SINGLE numerical value of a Microsoft Binary Format string.",
      "syntax": "result = CVSMBF([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = CVSMBF()",
      "related": [
        "BINARY",
        "FUNCTION",
        "SINGLE",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "DATA": {
      "name": "DATA",
      "type": "statement",
      "category": "statements",
      "description": "creates a line of fixed program information separated by commas.",
      "syntax": "DATA [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DATA",
      "related": [
        "LINE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DATE$": {
      "name": "DATE$",
      "type": "function",
      "category": "functions",
      "description": "returns the present Operating System date string formatted as mm-dd-yyyy.",
      "syntax": "string_result = DATE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = DATE$()",
      "related": [
        "AS",
        "FUNCTION",
        "STRING",
        "SYSTEM",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "DECLARE LIBRARY (QB64 statement block)": {
      "name": "DECLARE LIBRARY (QB64 statement block)",
      "type": "statement",
      "category": "statements",
      "description": "declares a C++, SDL or Operating System SUB or FUNCTION to be used.",
      "syntax": "DECLARE LIBRARY [\"library_file\"]\n  FUNCTION|SUB name ALIAS \"actual_name\" (parameters)\nEND DECLARE",
      "parameters": [],
      "returns": null,
      "example": "DECLARE LIBRARY (QB64 statement block)",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "SUB",
        "SYSTEM",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DEF SEG": {
      "name": "DEF SEG",
      "type": "statement",
      "category": "statements",
      "description": "defines a segment in memory to be accessed by a memory procedure.",
      "syntax": "DEF SEG [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DEF SEG",
      "related": [
        "TO",
        "segment"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DEFDBL": {
      "name": "DEFDBL",
      "type": "statement",
      "category": "statements",
      "description": "defines a set of undefined variable name starting letters as DOUBLE type numerical values.",
      "syntax": "DEFDBL [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DEFDBL",
      "related": [
        "AS",
        "DOUBLE",
        "NAME",
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DEFINT": {
      "name": "DEFINT",
      "type": "statement",
      "category": "statements",
      "description": "defines a set of undefined variable name starting letters as INTEGER type numerical values.",
      "syntax": "DEFINT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DEFINT",
      "related": [
        "AS",
        "INTEGER",
        "NAME",
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DEFLNG": {
      "name": "DEFLNG",
      "type": "statement",
      "category": "statements",
      "description": "defines a set of undefined variable name starting letters as LONG type numerical values.",
      "syntax": "DEFLNG [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DEFLNG",
      "related": [
        "AS",
        "LONG",
        "NAME",
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DEFSNG": {
      "name": "DEFSNG",
      "type": "statement",
      "category": "statements",
      "description": "defines a set of undefined variable name starting letters as SINGLE type numerical values.",
      "syntax": "DEFSNG [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DEFSNG",
      "related": [
        "AS",
        "NAME",
        "SINGLE",
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DEFSTR": {
      "name": "DEFSTR",
      "type": "statement",
      "category": "statements",
      "description": "defines a set of undefined variable name starting letters as STRING type values.",
      "syntax": "DEFSTR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DEFSTR",
      "related": [
        "AS",
        "NAME",
        "STRING",
        "TYPE",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DIM": {
      "name": "DIM",
      "type": "statement",
      "category": "statements",
      "description": "defines a variable as a specified type and can size a STATIC array.",
      "syntax": "DIM [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DIM myArray(10) AS INTEGER",
      "related": [
        "AND",
        "AND",
        "AS",
        "STATIC",
        "TYPE",
        "array"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DO...LOOP": {
      "name": "DO...LOOP",
      "type": "statement",
      "category": "statements",
      "description": "sets a recursive procedure loop that can be ignored or exited using conditional arguments.",
      "syntax": "DO [WHILE|UNTIL condition]\n  statements\nLOOP [WHILE|UNTIL condition]",
      "parameters": [],
      "returns": null,
      "example": "DO\n    x = x + 1\nLOOP WHILE x < 10",
      "related": [
        "LOOP",
        "OR",
        "OR",
        "IF...THEN",
        "FOR...NEXT",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DOUBLE": {
      "name": "DOUBLE",
      "type": "type",
      "category": "types",
      "description": "8 byte value limited to values up to 15 decimal places.",
      "syntax": "DIM variable AS DOUBLE",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS DOUBLE",
      "related": [
        "TO",
        "TYPE",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "DRAW": {
      "name": "DRAW",
      "type": "statement",
      "category": "statements",
      "description": "uses a special string format that draws graphical lines in specific directions.",
      "syntax": "DRAW [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DRAW",
      "related": [
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "$DYNAMIC": {
      "name": "$DYNAMIC",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used at the start of a program to set all program arrays as changeable in size using REDIM.",
      "syntax": "'$DYNAMIC: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$DYNAMIC:",
      "related": [
        "AS",
        "REDIM",
        "TO",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "ELSE": {
      "name": "ELSE",
      "type": "statement",
      "category": "statements",
      "description": "is used to direct program flow when no other condition is evaluated as true.",
      "syntax": "ELSE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ELSE",
      "related": [
        "AS",
        "THEN",
        "TO",
        "IF"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ELSEIF": {
      "name": "ELSEIF",
      "type": "statement",
      "category": "statements",
      "description": "is used with THEN to set alternate conditional evaluations.",
      "syntax": "ELSEIF [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ELSEIF",
      "related": [
        "THEN",
        "TO",
        "IF",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "END": {
      "name": "END",
      "type": "statement",
      "category": "statements",
      "description": "sets the end of a program, sub-procedure, statement block, DECLARE LIBRARY or TYPE definition.",
      "syntax": "END [parameters]",
      "parameters": [],
      "returns": null,
      "example": "END",
      "related": [
        "OR",
        "OR",
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "END IF": {
      "name": "END IF",
      "type": "statement",
      "category": "statements",
      "description": "ENDs an IF...THEN conditional block statement using more than one line of code.",
      "syntax": "END IF [parameters]",
      "parameters": [],
      "returns": null,
      "example": "END IF",
      "related": [
        "LINE",
        "THEN",
        "IF",
        "ENDs",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ENVIRON": {
      "name": "ENVIRON",
      "type": "statement",
      "category": "statements",
      "description": "temporarily sets an environmental key/pair value.",
      "syntax": "ENVIRON [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ENVIRON",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ENVIRON$": {
      "name": "ENVIRON$",
      "type": "function",
      "category": "functions",
      "description": "returns a specified string setting or numerical position as an environmental STRING value.",
      "syntax": "string_result = ENVIRON$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = ENVIRON$()",
      "related": [
        "AS",
        "FUNCTION",
        "OR",
        "OR",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "EOF": {
      "name": "EOF",
      "type": "function",
      "category": "functions",
      "description": "returns -1 when a file INPUT or GET has reached the end of a file.",
      "syntax": "result = EOF([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = EOF()",
      "related": [
        "END",
        "FUNCTION",
        "GET",
        "INPUT",
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "EQV": {
      "name": "EQV",
      "type": "operator",
      "category": "operators",
      "description": "is used to compare two numerical values bitwise.",
      "syntax": "result = operand1 EQV operand2",
      "parameters": [],
      "returns": null,
      "example": "result = a EQV b",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ]
    },
    "ERASE": {
      "name": "ERASE",
      "type": "statement",
      "category": "statements",
      "description": "clears the values from $STATIC arrays and completely removes $DYNAMIC arrays.",
      "syntax": "ERASE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ERASE",
      "related": [
        "AND",
        "AND",
        "$DYNAMIC",
        "$STATIC"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ERL": {
      "name": "ERL",
      "type": "function",
      "category": "functions",
      "description": "returns the closest line number before an error occurred if line numbers are used.",
      "syntax": "result = ERL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = ERL()",
      "related": [
        "ERROR",
        "FUNCTION",
        "LINE",
        "IF"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "ERR": {
      "name": "ERR",
      "type": "function",
      "category": "functions",
      "description": "returns the ERROR code when a program error occurs.",
      "syntax": "result = ERR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = ERR()",
      "related": [
        "ERROR",
        "FUNCTION"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "ERROR": {
      "name": "ERROR",
      "type": "statement",
      "category": "statements",
      "description": "sets a specific ERROR code to be simulated.",
      "syntax": "ERROR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ERROR",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "EXIT": {
      "name": "EXIT",
      "type": "statement",
      "category": "statements",
      "description": "immediately exits a program FOR...NEXT, DO...LOOP, SUB or FUNCTION procedure.",
      "syntax": "EXIT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "EXIT",
      "related": [
        "FUNCTION",
        "LOOP",
        "NEXT",
        "OR",
        "OR",
        "SUB"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "EXP": {
      "name": "EXP",
      "type": "function",
      "category": "functions",
      "description": "returns the value of e to the exponential power specified.",
      "syntax": "result = EXP([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = EXP()",
      "related": [
        "FUNCTION",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "FIELD": {
      "name": "FIELD",
      "type": "statement",
      "category": "statements",
      "description": "defines the variable sizes to be written or read from a file.",
      "syntax": "FIELD [parameters]",
      "parameters": [],
      "returns": null,
      "example": "FIELD",
      "related": [
        "OR",
        "OR",
        "READ",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "FILES": {
      "name": "FILES",
      "type": "statement",
      "category": "statements",
      "description": "returns a list of files in the current directory path to the SCREEN.",
      "syntax": "FILES [parameters]",
      "parameters": [],
      "returns": null,
      "example": "FILES",
      "related": [
        "LIST",
        "SCREEN",
        "SCREEN",
        "TO",
        "screen",
        "OPEN",
        "CLOSE",
        "INPUT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "FIX": {
      "name": "FIX",
      "type": "function",
      "category": "functions",
      "description": "returns the rounded INTEGER value of a numerical value.",
      "syntax": "result = FIX([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = FIX()",
      "related": [
        "FUNCTION",
        "INTEGER"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "FOR...NEXT": {
      "name": "FOR...NEXT",
      "type": "statement",
      "category": "statements",
      "description": "creates a recursive loop procedure that loop a specified number of times.",
      "syntax": "FOR variable = start TO end [STEP increment]\n  statements\nNEXT [variable]",
      "parameters": [],
      "returns": null,
      "example": "FOR i = 1 TO 10\n    PRINT i\nNEXT i",
      "related": [
        "LOOP",
        "IF...THEN",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "FOR (file statement)": {
      "name": "FOR (file statement)",
      "type": "statement",
      "category": "statements",
      "description": "used in an OPEN file or device statement to indicate the access mode.",
      "syntax": "FOR (file statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "FOR (file statement)",
      "related": [
        "ACCESS",
        "OPEN",
        "OR",
        "OR",
        "TO",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "FREE": {
      "name": "FREE",
      "type": "statement",
      "category": "statements",
      "description": "frees a numbered TIMER event in QB64.",
      "syntax": "FREE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "FREE",
      "related": [
        "TIMER",
        "TIMER"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "FREEFILE": {
      "name": "FREEFILE",
      "type": "function",
      "category": "functions",
      "description": "returns a file number that is currently not in use by the Operating System.",
      "syntax": "result = FREEFILE([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = FREEFILE()",
      "related": [
        "FUNCTION",
        "NOT",
        "SYSTEM",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "FUNCTION": {
      "name": "FUNCTION",
      "type": "statement",
      "category": "statements",
      "description": "sub-procedure that can calculate and return one value to a program in its name.",
      "syntax": "FUNCTION name[(parameters)] [AS type]\n  statements\n  name = return_value\nEND FUNCTION",
      "parameters": [],
      "returns": null,
      "example": "FUNCTION",
      "related": [
        "AND",
        "AND",
        "NAME",
        "RETURN",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "GET": {
      "name": "GET",
      "type": "statement",
      "category": "statements",
      "description": "reads a file sequencially or at a specific position and returns the value as the variable type used.",
      "syntax": "GET [parameters]",
      "parameters": [],
      "returns": null,
      "example": "GET",
      "related": [
        "AND",
        "AND",
        "AS",
        "OR",
        "OR",
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "GET (HTTP statement)": {
      "name": "GET (HTTP statement)",
      "type": "statement",
      "category": "statements",
      "description": "reads the response of an HTTP request that was opened using _OPENCLIENT.",
      "syntax": "GET (HTTP statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "GET (HTTP statement)",
      "related": [
        "opened"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "GET (TCP/IP statement)": {
      "name": "GET (TCP/IP statement)",
      "type": "function",
      "category": "functions",
      "description": "reads a TCP/IP connection port to return a value.",
      "syntax": "result = GET (TCP/IP statement)([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = GET (TCP/IP statement)()",
      "related": [
        "RETURN",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "GET (graphics statement)": {
      "name": "GET (graphics statement)",
      "type": "statement",
      "category": "statements",
      "description": "maps an area the current screen's video information and places it in an INTEGER array.",
      "syntax": "GET (graphics statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "GET (graphics statement)",
      "related": [
        "AND",
        "AND",
        "INTEGER",
        "array"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "GOSUB": {
      "name": "GOSUB",
      "type": "statement",
      "category": "statements",
      "description": "sends the program to a designated line label procedure in the main program.",
      "syntax": "GOSUB [parameters]",
      "parameters": [],
      "returns": null,
      "example": "GOSUB",
      "related": [
        "LINE",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "GOTO": {
      "name": "GOTO",
      "type": "statement",
      "category": "statements",
      "description": "sends the program to a designated line number or line label in a procedure.",
      "syntax": "GOTO [parameters]",
      "parameters": [],
      "returns": null,
      "example": "GOTO",
      "related": [
        "LINE",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "HEX$": {
      "name": "HEX$",
      "type": "function",
      "category": "functions",
      "description": "returns the hexadecimal (base 16) STRING representation of the INTEGER part of any value.",
      "syntax": "string_result = HEX$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "hex$ = HEX$(255) ' Returns \"FF\"",
      "related": [
        "FUNCTION",
        "INTEGER",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "IF...THEN": {
      "name": "IF...THEN",
      "type": "statement",
      "category": "statements",
      "description": "a conditional block statement used control program flow.",
      "syntax": "IF condition THEN\n  statements\n[ELSEIF condition THEN\n  statements]\n[ELSE\n  statements]\nEND IF",
      "parameters": [],
      "returns": null,
      "example": "IF x > 10 THEN\n    PRINT \"Greater than 10\"\nELSE\n    PRINT \"10 or less\"\nEND IF",
      "related": [
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "IMP": {
      "name": "IMP",
      "type": "operator",
      "category": "operators",
      "description": "is used to compare two numerical values bitwise.",
      "syntax": "result = operand1 IMP operand2",
      "parameters": [],
      "returns": null,
      "example": "result = a IMP b",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ]
    },
    "$INCLUDE": {
      "name": "$INCLUDE",
      "type": "metacommand",
      "category": "metacommands",
      "description": "designates a text code library file to include with the program.",
      "syntax": "'$INCLUDE: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$INCLUDE: 'mylib.bi'",
      "related": [
        "TO",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "INKEY$": {
      "name": "INKEY$",
      "type": "function",
      "category": "functions",
      "description": "ASCII returns a string value entry from the keyboard.",
      "syntax": "string_result = INKEY$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = INKEY$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string",
        "_MOUSEINPUT",
        "_MOUSEX",
        "_MOUSEY",
        "_MOUSEBUTTON",
        "_KEYHIT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "INP": {
      "name": "INP",
      "type": "function",
      "category": "functions",
      "description": "returns a numerical value from a specified port register address. See Keyboard scancodes",
      "syntax": "result = INP([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = INP()",
      "related": [
        "FUNCTION"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "INPUT": {
      "name": "INPUT",
      "type": "statement",
      "category": "statements",
      "description": "a user input that returns a value to one or more specified variable(s).",
      "syntax": "INPUT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "INPUT \"Enter value: \", userValue",
      "related": [
        "OR",
        "OR",
        "TO",
        "OPEN",
        "CLOSE",
        "OUTPUT",
        "PRINT",
        "GET"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "INPUT (file mode)": {
      "name": "INPUT (file mode)",
      "type": "statement",
      "category": "statements",
      "description": "OPEN statement that only allows an existing file to be read using INPUT (file statement) or INPUT$.",
      "syntax": "INPUT (file mode) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "INPUT (file mode) \"Enter value: \", userValue",
      "related": [
        "INPUT",
        "INPUT$",
        "OPEN",
        "OR",
        "OR",
        "READ",
        "TO",
        "CLOSE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "INPUT (file statement)": {
      "name": "INPUT (file statement)",
      "type": "statement",
      "category": "statements",
      "description": "reads a file sequentially using the variable types designated.",
      "syntax": "INPUT (file statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "INPUT (file statement) \"Enter value: \", userValue",
      "related": [
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT",
        "GET",
        "PUT",
        "EOF"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "INPUT$": {
      "name": "INPUT$",
      "type": "function",
      "category": "functions",
      "description": "returns a designated number of string bytes from the keyboard entry or a file number.",
      "syntax": "string_result = INPUT$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = INPUT$(10) ' Read 10 characters",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "STRING",
        "string",
        "OPEN",
        "CLOSE",
        "INPUT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "INSTR": {
      "name": "INSTR",
      "type": "function",
      "category": "functions",
      "description": "returns the position in a text string where a character sequence match starts.",
      "syntax": "result = INSTR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = INSTR()",
      "related": [
        "FUNCTION",
        "STRING",
        "string",
        "LEFT$",
        "RIGHT$",
        "MID$",
        "LEN",
        "CHR$"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "INT": {
      "name": "INT",
      "type": "function",
      "category": "functions",
      "description": "rounds a numerical value to an INTEGER value by removing the decimal point fraction.",
      "syntax": "result = INT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = INT()",
      "related": [
        "FUNCTION",
        "INTEGER",
        "POINT",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "INTEGER": {
      "name": "INTEGER",
      "type": "type",
      "category": "types",
      "description": "2 byte whole values from -32768 to 32767.",
      "syntax": "DIM variable AS INTEGER",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS INTEGER",
      "related": [
        "TO",
        "TYPE",
        "whole"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "INTERRUPT": {
      "name": "INTERRUPT",
      "type": "statement",
      "category": "statements",
      "description": "is used to access computer interrupt registers.",
      "syntax": "INTERRUPT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "INTERRUPT",
      "related": [
        "ACCESS",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "INTERRUPTX": {
      "name": "INTERRUPTX",
      "type": "statement",
      "category": "statements",
      "description": "is used to access computer interrupt registers.",
      "syntax": "INTERRUPTX [parameters]",
      "parameters": [],
      "returns": null,
      "example": "INTERRUPTX",
      "related": [
        "ACCESS",
        "INTERRUPT",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "KEY n": {
      "name": "KEY n",
      "type": "statement",
      "category": "statements",
      "description": "used with ON KEY(n) events to assign a \"softkey\" string to a key or create a user defined key.",
      "syntax": "KEY n [parameters]",
      "parameters": [],
      "returns": null,
      "example": "KEY n",
      "related": [
        "OR",
        "OR",
        "STRING",
        "TO",
        "ON",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "KEY(n)": {
      "name": "KEY(n)",
      "type": "statement",
      "category": "statements",
      "description": "used with ON KEY(n) events to assign, enable, disable or suspend event trapping.",
      "syntax": "KEY(n) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "KEY(n)",
      "related": [
        "OR",
        "OR",
        "TO",
        "ON"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "KEY LIST": {
      "name": "KEY LIST",
      "type": "statement",
      "category": "statements",
      "description": "lists the 12 Function key soft key string assignments going down left side of screen.",
      "syntax": "KEY LIST [parameters]",
      "parameters": [],
      "returns": null,
      "example": "KEY LIST",
      "related": [
        "FUNCTION",
        "SCREEN",
        "SCREEN",
        "STRING",
        "string",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "KILL": {
      "name": "KILL",
      "type": "statement",
      "category": "statements",
      "description": "deletes the specified file without a warning. Remove empty folders with RMDIR.",
      "syntax": "KILL [parameters]",
      "parameters": [],
      "returns": null,
      "example": "KILL",
      "related": [
        "RMDIR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LBOUND": {
      "name": "LBOUND",
      "type": "function",
      "category": "functions",
      "description": "returns the lower boundary of the specified array.",
      "syntax": "result = LBOUND([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = LBOUND()",
      "related": [
        "FUNCTION",
        "array"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "LCASE$": {
      "name": "LCASE$",
      "type": "function",
      "category": "functions",
      "description": "returns the lower case value of a STRING.",
      "syntax": "string_result = LCASE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = LCASE$()",
      "related": [
        "CASE",
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "LEFT$": {
      "name": "LEFT$",
      "type": "function",
      "category": "functions",
      "description": "returns the specified number of text characters from the left end of a STRING.",
      "syntax": "string_result = LEFT$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = LEFT$()",
      "related": [
        "END",
        "FUNCTION",
        "STRING",
        "string",
        "RIGHT$",
        "MID$",
        "LEN",
        "INSTR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "LEN": {
      "name": "LEN",
      "type": "function",
      "category": "functions",
      "description": "returns the length or number of characters in a STRING value in bytes.",
      "syntax": "result = LEN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = LEN()",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "STRING",
        "string",
        "LEFT$",
        "RIGHT$",
        "MID$"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "LET": {
      "name": "LET",
      "type": "statement",
      "category": "statements",
      "description": "assigns a variable a literal value. Not required.",
      "syntax": "LET [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LET",
      "related": [
        "NOT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LINE": {
      "name": "LINE",
      "type": "statement",
      "category": "statements",
      "description": "creates a graphic line or box on the SCREEN.",
      "syntax": "LINE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LINE (0, 0)-(100, 100) ' Diagonal line\nLINE (50, 50)-(150, 100), _RGB32(0, 255, 0), BF ' Green filled box",
      "related": [
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "ON",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LINE INPUT": {
      "name": "LINE INPUT",
      "type": "statement",
      "category": "statements",
      "description": "user input can be any text character including commas and quotes as a STRING value only.",
      "syntax": "LINE INPUT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LINE INPUT \"Enter value: \", userValue",
      "related": [
        "AND",
        "AND",
        "AS",
        "INPUT",
        "STRING",
        "string",
        "OPEN",
        "CLOSE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LINE INPUT (file statement)": {
      "name": "LINE INPUT (file statement)",
      "type": "function",
      "category": "functions",
      "description": "returns an entire text file line and returns it as a STRING value.",
      "syntax": "result = LINE INPUT (file statement)([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = LINE INPUT (file statement)()",
      "related": [
        "AND",
        "AND",
        "AS",
        "LINE",
        "STRING",
        "string",
        "OPEN",
        "CLOSE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "LIST": {
      "name": "LIST",
      "type": "statement",
      "category": "statements",
      "description": "displays the current ON KEY(n) function key (F1 to F10) \"soft key\" settings.",
      "syntax": "LIST [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LIST",
      "related": [
        "FUNCTION",
        "TO",
        "ON"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LOC": {
      "name": "LOC",
      "type": "function",
      "category": "functions",
      "description": "returns the present file byte position or number of bytes in the OPEN COM buffer.",
      "syntax": "result = LOC([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = LOC()",
      "related": [
        "FUNCTION",
        "OPEN",
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "LOCATE": {
      "name": "LOCATE",
      "type": "statement",
      "category": "statements",
      "description": "sets the text cursor's row and column position for a PRINT or INPUT statement.",
      "syntax": "LOCATE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LOCATE",
      "related": [
        "AND",
        "AND",
        "INPUT",
        "OR",
        "OR",
        "PRINT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LOCK": {
      "name": "LOCK",
      "type": "statement",
      "category": "statements",
      "description": "restricts access to portions or all of a file by other programs or processes.",
      "syntax": "LOCK [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LOCK",
      "related": [
        "ACCESS",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LOF": {
      "name": "LOF",
      "type": "function",
      "category": "functions",
      "description": "returns the size of an OPEN file in bytes.",
      "syntax": "result = LOF([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = LOF()",
      "related": [
        "FUNCTION",
        "OPEN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "LOG": {
      "name": "LOG",
      "type": "function",
      "category": "functions",
      "description": "returns the natural logarithm of a specified numerical value",
      "syntax": "result = LOG([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = LOG()",
      "related": [
        "FUNCTION"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "LONG": {
      "name": "LONG",
      "type": "type",
      "category": "types",
      "description": "4 byte whole values from -2147483648 to 2147483647.",
      "syntax": "DIM variable AS LONG",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS LONG",
      "related": [
        "TO",
        "TYPE",
        "whole"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "LOOP": {
      "name": "LOOP",
      "type": "statement",
      "category": "statements",
      "description": "bottom end of a recursive DO loop.",
      "syntax": "LOOP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LOOP",
      "related": [
        "END"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LPOS": {
      "name": "LPOS",
      "type": "function",
      "category": "functions",
      "description": "returns the printer head position.",
      "syntax": "result = LPOS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = LPOS()",
      "related": [
        "FUNCTION"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "LPRINT": {
      "name": "LPRINT",
      "type": "statement",
      "category": "statements",
      "description": "sends STRING data to the default LPT or USB printer.",
      "syntax": "LPRINT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LPRINT \"Hello, World!\"",
      "related": [
        "DATA",
        "OR",
        "OR",
        "STRING",
        "TO",
        "string",
        "OPEN",
        "CLOSE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LPRINT USING": {
      "name": "LPRINT USING",
      "type": "statement",
      "category": "statements",
      "description": "sends template formatted text to the default LPT or USB printer.",
      "syntax": "LPRINT USING [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LPRINT USING \"Hello, World!\"",
      "related": [
        "OR",
        "OR",
        "TO",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LSET": {
      "name": "LSET",
      "type": "statement",
      "category": "statements",
      "description": "left justifies the text in a string so that there are no leading spaces.",
      "syntax": "LSET [parameters]",
      "parameters": [],
      "returns": null,
      "example": "LSET",
      "related": [
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "LTRIM$": {
      "name": "LTRIM$",
      "type": "function",
      "category": "functions",
      "description": "returns a string value with no leading spaces.",
      "syntax": "string_result = LTRIM$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = LTRIM$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "MID$": {
      "name": "MID$",
      "type": "function",
      "category": "functions",
      "description": "redefines existing characters in a STRING.",
      "syntax": "string_result = MID$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = MID$()",
      "related": [
        "STRING",
        "string",
        "LEFT$",
        "RIGHT$",
        "LEN",
        "INSTR",
        "CHR$",
        "ASC"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "MKD$": {
      "name": "MKD$",
      "type": "function",
      "category": "functions",
      "description": "returns an 8 byte ASCII string representation of a DOUBLE numerical value.",
      "syntax": "string_result = MKD$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = MKD$()",
      "related": [
        "DOUBLE",
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "MKDIR": {
      "name": "MKDIR",
      "type": "statement",
      "category": "statements",
      "description": "creates a new folder in the current or designated program path.",
      "syntax": "MKDIR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "MKDIR",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "MKDMBF$": {
      "name": "MKDMBF$",
      "type": "function",
      "category": "functions",
      "description": "returns an 8 byte Microsoft Binary Format STRING representation of a DOUBLE numerical value.",
      "syntax": "string_result = MKDMBF$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = MKDMBF$()",
      "related": [
        "BINARY",
        "DOUBLE",
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "MKI$": {
      "name": "MKI$",
      "type": "function",
      "category": "functions",
      "description": "returns a 2 byte ASCII string representation of an INTEGER.",
      "syntax": "string_result = MKI$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = MKI$()",
      "related": [
        "FUNCTION",
        "INTEGER",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "MKL$": {
      "name": "MKL$",
      "type": "function",
      "category": "functions",
      "description": "returns a 4 byte ASCII string representation of a LONG numerical value.",
      "syntax": "string_result = MKL$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = MKL$()",
      "related": [
        "FUNCTION",
        "LONG",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "MKS$": {
      "name": "MKS$",
      "type": "function",
      "category": "functions",
      "description": "returns a 4 byte ASCII string representation of a SINGLE numerical value.",
      "syntax": "string_result = MKS$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = MKS$()",
      "related": [
        "FUNCTION",
        "SINGLE",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "MKSMBF$": {
      "name": "MKSMBF$",
      "type": "function",
      "category": "functions",
      "description": "returns an 8 byte Microsoft Binary Format STRING representation of a DOUBLE numerical value.",
      "syntax": "string_result = MKSMBF$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = MKSMBF$()",
      "related": [
        "BINARY",
        "DOUBLE",
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "MOD": {
      "name": "MOD",
      "type": "operator",
      "category": "operators",
      "description": "performs integer remainder division on a numerical value.",
      "syntax": "result = operand1 MOD operand2",
      "parameters": [],
      "returns": null,
      "example": "result = a MOD b",
      "related": [
        "INTEGER",
        "ON"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ]
    },
    "NAME": {
      "name": "NAME",
      "type": "statement",
      "category": "statements",
      "description": "names an existing file name AS a new file name.",
      "syntax": "NAME [parameters]",
      "parameters": [],
      "returns": null,
      "example": "NAME",
      "related": [
        "AS"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "NEXT": {
      "name": "NEXT",
      "type": "statement",
      "category": "statements",
      "description": "bottom end of a FOR...NEXT counter loop to returns to the start or a RESUME NEXT error.",
      "syntax": "NEXT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "NEXT",
      "related": [
        "END",
        "ERROR",
        "LOOP",
        "OR",
        "OR",
        "RESUME",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "NOT": {
      "name": "NOT",
      "type": "operator",
      "category": "operators",
      "description": "inverts the value of a logic operation or returns True when a boolean evaluation is False.",
      "syntax": "result = operand1 NOT operand2",
      "parameters": [],
      "returns": null,
      "example": "result = a NOT b",
      "related": [
        "OR",
        "OR",
        "boolean"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ]
    },
    "OCT$": {
      "name": "OCT$",
      "type": "function",
      "category": "functions",
      "description": "returns the octal (base 8) STRING representation of the INTEGER part of any value.",
      "syntax": "string_result = OCT$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = OCT$()",
      "related": [
        "FUNCTION",
        "INTEGER",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "OFF": {
      "name": "OFF",
      "type": "statement",
      "category": "statements",
      "description": "turns off all ON event checking.",
      "syntax": "OFF [parameters]",
      "parameters": [],
      "returns": null,
      "example": "OFF",
      "related": [
        "ON"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ON ERROR": {
      "name": "ON ERROR",
      "type": "statement",
      "category": "statements",
      "description": "sets up and activates an error event checking procedure call. Use to avoid program errors.",
      "syntax": "ON ERROR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ON ERROR",
      "related": [
        "AND",
        "AND",
        "CALL",
        "ERROR",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ON KEY(n)": {
      "name": "ON KEY(n)",
      "type": "statement",
      "category": "statements",
      "description": "sets up a keyboard key entry event procedure.",
      "syntax": "ON KEY(n) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ON KEY(n)",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ON STRIG(n)": {
      "name": "ON STRIG(n)",
      "type": "statement",
      "category": "statements",
      "description": "sets up a joystick button event procedure call.",
      "syntax": "ON STRIG(n) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ON STRIG(n)",
      "related": [
        "CALL"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ON TIMER(n)": {
      "name": "ON TIMER(n)",
      "type": "statement",
      "category": "statements",
      "description": "sets up a timed event procedure call.",
      "syntax": "ON TIMER(n) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ON TIMER(n)",
      "related": [
        "CALL",
        "TIMER",
        "_DELAY",
        "SLEEP",
        "_LIMIT",
        "ON TIMER"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ON...GOSUB": {
      "name": "ON...GOSUB",
      "type": "statement",
      "category": "statements",
      "description": "sets up a numerical event procedure call.",
      "syntax": "ON...GOSUB [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ON...GOSUB",
      "related": [
        "CALL"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ON...GOTO": {
      "name": "ON...GOTO",
      "type": "statement",
      "category": "statements",
      "description": "sets up a numerical event procedure call.",
      "syntax": "ON...GOTO [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ON...GOTO",
      "related": [
        "CALL"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "OPEN": {
      "name": "OPEN",
      "type": "statement",
      "category": "statements",
      "description": "opens a file name for an access mode with a specific file number.",
      "syntax": "OPEN [parameters]",
      "parameters": [],
      "returns": null,
      "example": "OPEN",
      "related": [
        "ACCESS",
        "NAME",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT",
        "GET",
        "PUT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "OPEN COM": {
      "name": "OPEN COM",
      "type": "statement",
      "category": "statements",
      "description": "opens a serial communication port for access at a certain speed and mode.",
      "syntax": "OPEN COM [parameters]",
      "parameters": [],
      "returns": null,
      "example": "OPEN COM",
      "related": [
        "ACCESS",
        "AND",
        "AND",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "OPTION BASE": {
      "name": "OPTION BASE",
      "type": "constant",
      "category": "constants",
      "description": "can set the lower boundary of all arrays to 1.",
      "syntax": "OPTION BASE",
      "parameters": [],
      "returns": null,
      "example": "OPTION BASE",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "constant",
        "constants"
      ]
    },
    "OR": {
      "name": "OR",
      "type": "operator",
      "category": "operators",
      "description": "is used to compare two numerical values bitwise.",
      "syntax": "result = operand1 OR operand2",
      "parameters": [],
      "returns": null,
      "example": "IF condition1 OR condition2 THEN",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ]
    },
    "OR (boolean)": {
      "name": "OR (boolean)",
      "type": "operator",
      "category": "operators",
      "description": "conditonal operator is used to include an alternative evaluation in an IF...THEN or Boolean statement.",
      "syntax": "IF condition1 OR condition2 THEN",
      "parameters": [],
      "returns": null,
      "example": "IF condition1 OR condition2 THEN",
      "related": [
        "THEN",
        "TO",
        "boolean",
        "IF"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ],
      "aliases": [
        "OR"
      ]
    },
    "OUT": {
      "name": "OUT",
      "type": "statement",
      "category": "statements",
      "description": "writes numerical data to a specified register port.",
      "syntax": "OUT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "OUT",
      "related": [
        "DATA",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "OUTPUT": {
      "name": "OUTPUT",
      "type": "statement",
      "category": "statements",
      "description": "creates a new file or clears all data from an existing file to acess the file sequencially.",
      "syntax": "OUTPUT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "OUTPUT",
      "related": [
        "DATA",
        "OR",
        "OR",
        "TO",
        "OPEN",
        "CLOSE",
        "INPUT",
        "PRINT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PAINT": {
      "name": "PAINT",
      "type": "statement",
      "category": "statements",
      "description": "fills an enclosed area of a graphics screen with a color until it encounters a specific colored border.",
      "syntax": "PAINT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PAINT",
      "related": [
        "COLOR",
        "SCREEN",
        "SCREEN",
        "UNTIL",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PALETTE": {
      "name": "PALETTE",
      "type": "statement",
      "category": "statements",
      "description": "sets the Red, Green and Blue color attribute intensities using a RGB multiplier calculation.",
      "syntax": "PALETTE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PALETTE",
      "related": [
        "AND",
        "AND",
        "COLOR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PALETTE USING": {
      "name": "PALETTE USING",
      "type": "statement",
      "category": "statements",
      "description": "sets the color intensity settings using a designated array.",
      "syntax": "PALETTE USING [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PALETTE USING",
      "related": [
        "COLOR",
        "array",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PCOPY": {
      "name": "PCOPY",
      "type": "statement",
      "category": "statements",
      "description": "swaps two designated memory page images when page swapping is enabled in the SCREEN statement.",
      "syntax": "PCOPY [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PCOPY",
      "related": [
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PEEK": {
      "name": "PEEK",
      "type": "function",
      "category": "functions",
      "description": "returns a numerical value from a specified segment address in memory.",
      "syntax": "result = PEEK([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = PEEK()",
      "related": [
        "FUNCTION",
        "segment",
        "_MEM",
        "_MEMGET",
        "_MEMPUT",
        "_MEMFREE",
        "_MEMNEW",
        "POKE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "PLAY": {
      "name": "PLAY",
      "type": "function",
      "category": "functions",
      "description": "returns the number of remaining notes in the background music queue.",
      "syntax": "result = PLAY([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = PLAY()",
      "related": [
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "SOUND"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "PMAP": {
      "name": "PMAP",
      "type": "function",
      "category": "functions",
      "description": "returns the physical or WINDOW view graphic coordinates.",
      "syntax": "result = PMAP([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = PMAP()",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "VIEW",
        "WINDOW"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "POINT": {
      "name": "POINT",
      "type": "function",
      "category": "functions",
      "description": "returns the color attribute number or 32 bit _RGB32 value.",
      "syntax": "result = POINT([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = POINT()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "POKE": {
      "name": "POKE",
      "type": "statement",
      "category": "statements",
      "description": "writes a numerical value to a specified segment address in memory.",
      "syntax": "POKE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "POKE",
      "related": [
        "TO",
        "segment",
        "_MEM",
        "_MEMGET",
        "_MEMPUT",
        "_MEMFREE",
        "_MEMNEW",
        "PEEK"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "POS": {
      "name": "POS",
      "type": "function",
      "category": "functions",
      "description": "returns the current text column position of the text cursor.",
      "syntax": "result = POS([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = POS()",
      "related": [
        "FUNCTION"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "PRESET": {
      "name": "PRESET",
      "type": "statement",
      "category": "statements",
      "description": "sets a pixel coordinate to the background color unless one is specified.",
      "syntax": "PRESET [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PRESET",
      "related": [
        "COLOR",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PRINT": {
      "name": "PRINT",
      "type": "statement",
      "category": "statements",
      "description": "prints text strings or numerical values to the SCREEN.",
      "syntax": "PRINT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PRINT \"Hello, World!\"\nPRINT \"Number:\"; 42",
      "related": [
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "TO",
        "screen",
        "STRINGs",
        "strings"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PRINT (file statement)": {
      "name": "PRINT (file statement)",
      "type": "statement",
      "category": "statements",
      "description": "prints text strings or numerical values to a file.",
      "syntax": "PRINT (file statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PRINT (file statement) \"Hello, World!\"",
      "related": [
        "OR",
        "OR",
        "TO",
        "STRINGs",
        "strings",
        "OPEN",
        "CLOSE",
        "INPUT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PRINT USING": {
      "name": "PRINT USING",
      "type": "statement",
      "category": "statements",
      "description": "prints a template formatted string to the SCREEN.",
      "syntax": "PRINT USING [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PRINT USING \"Hello, World!\"",
      "related": [
        "SCREEN",
        "SCREEN",
        "STRING",
        "TO",
        "string",
        "screen",
        "OPEN",
        "CLOSE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PRINT USING (file statement)": {
      "name": "PRINT USING (file statement)",
      "type": "statement",
      "category": "statements",
      "description": "prints a template formatted string to a file.",
      "syntax": "PRINT USING (file statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PRINT USING (file statement) \"Hello, World!\"",
      "related": [
        "STRING",
        "TO",
        "string",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PSET": {
      "name": "PSET",
      "type": "statement",
      "category": "statements",
      "description": "sets a pixel coordinate to the current color unless a color is designated.",
      "syntax": "PSET [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PSET",
      "related": [
        "COLOR",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PUT": {
      "name": "PUT",
      "type": "statement",
      "category": "statements",
      "description": "writes data sequencially or to a designated position using a variable value.",
      "syntax": "PUT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PUT",
      "related": [
        "DATA",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PUT (QB64 TCP/IP statement)": {
      "name": "PUT (QB64 TCP/IP statement)",
      "type": "statement",
      "category": "statements",
      "description": "sends raw data to a user's connection handle.",
      "syntax": "PUT (QB64 TCP/IP statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PUT (QB64 TCP/IP statement)",
      "related": [
        "DATA",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "PUT (graphics statement)": {
      "name": "PUT (graphics statement)",
      "type": "statement",
      "category": "statements",
      "description": "places pixel data stored in an INTEGER array to a specified area of the SCREEN.",
      "syntax": "PUT (graphics statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "PUT (graphics statement)",
      "related": [
        "DATA",
        "INTEGER",
        "SCREEN",
        "SCREEN",
        "TO",
        "array",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RANDOM": {
      "name": "RANDOM",
      "type": "statement",
      "category": "statements",
      "description": "creates a file or opens an existing file to read and write records of a set byte size.",
      "syntax": "RANDOM [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RANDOM",
      "related": [
        "AND",
        "AND",
        "OR",
        "OR",
        "READ",
        "TO",
        "WRITE",
        "IF...THEN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RANDOMIZE": {
      "name": "RANDOMIZE",
      "type": "statement",
      "category": "statements",
      "description": "sets the random seed value for a specific sequence of random RND values.",
      "syntax": "RANDOMIZE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RANDOMIZE",
      "related": [
        "RANDOM",
        "RND",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RANDOMIZE USING (QB64 statement)": {
      "name": "RANDOMIZE USING (QB64 statement)",
      "type": "statement",
      "category": "statements",
      "description": "restarts the designated seed value's random sequence of values from the beginning.",
      "syntax": "RANDOMIZE USING (QB64 statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RANDOMIZE USING (QB64 statement)",
      "related": [
        "RANDOM",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS",
        "_ATAN2"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "READ": {
      "name": "READ",
      "type": "statement",
      "category": "statements",
      "description": "reads values from a DATA field. ACCESS READ is used with the OPEN statement.",
      "syntax": "READ [parameters]",
      "parameters": [],
      "returns": null,
      "example": "READ",
      "related": [
        "ACCESS",
        "DATA",
        "FIELD",
        "OPEN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "REDIM": {
      "name": "REDIM",
      "type": "statement",
      "category": "statements",
      "description": "creates a new dynamic array or resizes one without losing data when _PRESERVE is used.",
      "syntax": "REDIM [parameters]",
      "parameters": [],
      "returns": null,
      "example": "REDIM myArray(10) AS INTEGER",
      "related": [
        "DATA",
        "OR",
        "OR",
        "array",
        "dynamic"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "REM": {
      "name": "REM",
      "type": "statement",
      "category": "statements",
      "description": "or an apostrophe tells the program to ignore statements following it on the same line.",
      "syntax": "REM [parameters]",
      "parameters": [],
      "returns": null,
      "example": "REM",
      "related": [
        "LINE",
        "OR",
        "OR",
        "TO",
        "ON"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RESET": {
      "name": "RESET",
      "type": "statement",
      "category": "statements",
      "description": "closes all files and writes the directory information to a diskette before it is removed from a disk drive.",
      "syntax": "RESET [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RESET",
      "related": [
        "AND",
        "AND",
        "FILES",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RESTORE": {
      "name": "RESTORE",
      "type": "statement",
      "category": "statements",
      "description": "resets the DATA pointer to the start of a designated field of data.",
      "syntax": "RESTORE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RESTORE",
      "related": [
        "DATA",
        "FIELD",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RESUME": {
      "name": "RESUME",
      "type": "statement",
      "category": "statements",
      "description": "an error handling procedure exit that can send the program to a line number or the NEXT code line.",
      "syntax": "RESUME [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RESUME",
      "related": [
        "ERROR",
        "EXIT",
        "LINE",
        "NEXT",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RETURN": {
      "name": "RETURN",
      "type": "statement",
      "category": "statements",
      "description": "returns the program to the code immediately following a GOSUB call.",
      "syntax": "RETURN [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RETURN",
      "related": [
        "CALL",
        "GOSUB",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RIGHT$": {
      "name": "RIGHT$",
      "type": "function",
      "category": "functions",
      "description": "returns a specific number of text characters from the right end of a STRING.",
      "syntax": "string_result = RIGHT$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = RIGHT$()",
      "related": [
        "END",
        "FUNCTION",
        "STRING",
        "string",
        "LEFT$",
        "MID$",
        "LEN",
        "INSTR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "RMDIR": {
      "name": "RMDIR",
      "type": "statement",
      "category": "statements",
      "description": "removes an empty folder from the current path or the one designated.",
      "syntax": "RMDIR [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RMDIR",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RND": {
      "name": "RND",
      "type": "function",
      "category": "functions",
      "description": "returns a random number value from 0 to .9999999.",
      "syntax": "result = RND([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "random_num = RND ' Random number 0 to 1",
      "related": [
        "FUNCTION",
        "RANDOM",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "RSET": {
      "name": "RSET",
      "type": "statement",
      "category": "statements",
      "description": "right justifies a string value so that any end spaces are moved to the beginning.",
      "syntax": "RSET [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RSET",
      "related": [
        "END",
        "STRING",
        "TO",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RTRIM$": {
      "name": "RTRIM$",
      "type": "function",
      "category": "functions",
      "description": "returns a string with all spaces removed from the right end.",
      "syntax": "string_result = RTRIM$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = RTRIM$()",
      "related": [
        "END",
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "RUN": {
      "name": "RUN",
      "type": "statement",
      "category": "statements",
      "description": "clears and restarts the program currently in memory or executes another specified program.",
      "syntax": "RUN [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RUN",
      "related": [
        "AND",
        "AND",
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SADD": {
      "name": "SADD",
      "type": "function",
      "category": "functions",
      "description": "returns the address of a STRING variable as an offset from the current data segment.",
      "syntax": "result = SADD([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = SADD()",
      "related": [
        "AS",
        "DATA",
        "FUNCTION",
        "STRING",
        "string",
        "segment"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "SCREEN": {
      "name": "SCREEN",
      "type": "statement",
      "category": "statements",
      "description": "sets the display mode and size of the program window.",
      "syntax": "SCREEN [parameters]",
      "parameters": [],
      "returns": null,
      "example": "SCREEN _NEWIMAGE(800, 600, 32)\nSCREEN 13 ' Legacy 320x200 mode",
      "related": [
        "AND",
        "AND",
        "WINDOW",
        "_NEWIMAGE",
        "_LOADIMAGE",
        "_DISPLAY",
        "_PUTIMAGE",
        "_FREEIMAGE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SEEK": {
      "name": "SEEK",
      "type": "statement",
      "category": "statements",
      "description": "moves to a specified position in an opened file.",
      "syntax": "SEEK [parameters]",
      "parameters": [],
      "returns": null,
      "example": "SEEK",
      "related": [
        "TO",
        "opened"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SELECT CASE": {
      "name": "SELECT CASE",
      "type": "statement",
      "category": "statements",
      "description": "a program flow block that can handle numerous conditional evaluations.",
      "syntax": "SELECT CASE expression\n  CASE value\n    statements\n  CASE ELSE\n    statements\nEND SELECT",
      "parameters": [],
      "returns": null,
      "example": "SELECT CASE day\n    CASE 1\n        PRINT \"Monday\"\n    CASE 2\n        PRINT \"Tuesday\"\n    CASE ELSE\n        PRINT \"Other day\"\nEND SELECT",
      "related": [
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SGN": {
      "name": "SGN",
      "type": "function",
      "category": "functions",
      "description": "returns -1 for negative, 0 for zero, and 1 for positive numerical values.",
      "syntax": "result = SGN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = SGN()",
      "related": [
        "AND",
        "AND",
        "FUNCTION"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "SHARED": {
      "name": "SHARED",
      "type": "statement",
      "category": "statements",
      "description": "designates that a variable can be used by other procedures or the main procedure when in a sub-procedure.",
      "syntax": "SHARED [parameters]",
      "parameters": [],
      "returns": null,
      "example": "SHARED",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SHELL": {
      "name": "SHELL",
      "type": "function",
      "category": "functions",
      "description": "executes an external command or calls another program. Returns codes sent by END or SYSTEM.",
      "syntax": "result = SHELL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = SHELL()",
      "related": [
        "END",
        "OR",
        "OR",
        "SYSTEM"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "SIN": {
      "name": "SIN",
      "type": "function",
      "category": "functions",
      "description": "returns the sine of a radian angle.",
      "syntax": "result = SIN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = SIN()",
      "related": [
        "FUNCTION",
        "SINe",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS",
        "_ATAN2"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "SINGLE": {
      "name": "SINGLE",
      "type": "type",
      "category": "types",
      "description": "4 byte floating decimal point values up to 7 decimal places.",
      "syntax": "DIM variable AS SINGLE",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS SINGLE",
      "related": [
        "POINT",
        "TO",
        "TYPE",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "SLEEP": {
      "name": "SLEEP",
      "type": "statement",
      "category": "statements",
      "description": "pauses the program for a designated number of seconds or until a key is pressed.",
      "syntax": "SLEEP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "SLEEP",
      "related": [
        "OR",
        "OR",
        "UNTIL",
        "TIMER",
        "_DELAY",
        "_LIMIT",
        "ON TIMER"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SOUND": {
      "name": "SOUND",
      "type": "statement",
      "category": "statements",
      "description": "creates a sound of a specified frequency and duration.",
      "syntax": "SOUND [parameters]",
      "parameters": [],
      "returns": null,
      "example": "SOUND",
      "related": [
        "AND",
        "AND",
        "_SNDOPEN",
        "_SNDPLAY",
        "_SNDSTOP",
        "_SNDCLOSE",
        "PLAY"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SPACE$": {
      "name": "SPACE$",
      "type": "function",
      "category": "functions",
      "description": "returns a designated number of spaces to a STRING.",
      "syntax": "string_result = SPACE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = SPACE$()",
      "related": [
        "FUNCTION",
        "STRING",
        "TO",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "SPC": {
      "name": "SPC",
      "type": "function",
      "category": "functions",
      "description": "moves the text cursor a number of spaces on the SCREEN.",
      "syntax": "result = SPC([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = SPC()",
      "related": [
        "FUNCTION",
        "SCREEN",
        "SCREEN",
        "ON",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "SQR": {
      "name": "SQR",
      "type": "function",
      "category": "functions",
      "description": "returns the square root of a non-negative number.",
      "syntax": "result = SQR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = SQR()",
      "related": [
        "FUNCTION"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "STATIC": {
      "name": "STATIC",
      "type": "statement",
      "category": "statements",
      "description": "creates a SUB or FUNCTION variable that retains its value.",
      "syntax": "STATIC [parameters]",
      "parameters": [],
      "returns": null,
      "example": "STATIC",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "SUB"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "$STATIC": {
      "name": "$STATIC",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used at the start of a program to set all program arrays as unchangeable in size using DIM.",
      "syntax": "'$STATIC: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$STATIC:",
      "related": [
        "AS",
        "DIM",
        "TO",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "STEP": {
      "name": "STEP",
      "type": "statement",
      "category": "statements",
      "description": "move relatively from one graphic position or change the counting increment in a FOR...NEXT loop.",
      "syntax": "STEP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "STEP",
      "related": [
        "LOOP",
        "NEXT",
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "STICK": {
      "name": "STICK",
      "type": "function",
      "category": "functions",
      "description": "returns the present joystick position.",
      "syntax": "result = STICK([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = STICK()",
      "related": [
        "FUNCTION"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "STOP": {
      "name": "STOP",
      "type": "statement",
      "category": "statements",
      "description": "stops a program when troubleshooting or stops an ON event.",
      "syntax": "STOP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "STOP",
      "related": [
        "OR",
        "OR",
        "ON"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "STR$": {
      "name": "STR$",
      "type": "function",
      "category": "functions",
      "description": "returns a string value of a number with a leading space when it is positive.",
      "syntax": "string_result = STR$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = STR$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "STRIG": {
      "name": "STRIG",
      "type": "function",
      "category": "functions",
      "description": "returns the joystick button press values when read.",
      "syntax": "result = STRIG([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = STRIG()",
      "related": [
        "FUNCTION",
        "READ"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "STRIG(n)": {
      "name": "STRIG(n)",
      "type": "statement",
      "category": "statements",
      "description": "",
      "syntax": "STRIG(n) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "STRIG(n)",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "STRING": {
      "name": "STRING",
      "type": "type",
      "category": "types",
      "description": "one byte text variable with ASCII code values from 0 to 255.",
      "syntax": "DIM variable AS STRING",
      "parameters": [],
      "returns": null,
      "example": "DIM myVar AS STRING",
      "related": [
        "TO",
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "type",
        "types"
      ]
    },
    "STRING$": {
      "name": "STRING$",
      "type": "function",
      "category": "functions",
      "description": "returns a designated number of string characters.",
      "syntax": "string_result = STRING$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = STRING$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "SUB": {
      "name": "SUB",
      "type": "statement",
      "category": "statements",
      "description": "sub-procedure that can calculate and return multiple parameter values.",
      "syntax": "SUB name[(parameters)]\n  statements\nEND SUB",
      "parameters": [],
      "returns": null,
      "example": "SUB",
      "related": [
        "AND",
        "AND",
        "RETURN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SWAP": {
      "name": "SWAP",
      "type": "statement",
      "category": "statements",
      "description": "swaps two string or numerical values.",
      "syntax": "SWAP [parameters]",
      "parameters": [],
      "returns": null,
      "example": "SWAP",
      "related": [
        "OR",
        "OR",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SYSTEM": {
      "name": "SYSTEM",
      "type": "statement",
      "category": "statements",
      "description": "ends a program immediately.",
      "syntax": "SYSTEM [parameters]",
      "parameters": [],
      "returns": null,
      "example": "SYSTEM",
      "related": [
        "ENDs"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "TAB": {
      "name": "TAB",
      "type": "function",
      "category": "functions",
      "description": "moves a designated number of columns on the screen.",
      "syntax": "result = TAB([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = TAB()",
      "related": [
        "FUNCTION",
        "SCREEN",
        "SCREEN",
        "ON",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "TAN": {
      "name": "TAN",
      "type": "function",
      "category": "functions",
      "description": "returns the ratio of SINe to COSine or tangent value of an angle measured in radians.",
      "syntax": "result = TAN([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = TAN()",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "TO",
        "COSine",
        "tangent",
        "SINe",
        "SIN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "THEN": {
      "name": "THEN",
      "type": "statement",
      "category": "statements",
      "description": "must be used in a one line IF...THEN program flow statement.",
      "syntax": "THEN [parameters]",
      "parameters": [],
      "returns": null,
      "example": "THEN",
      "related": [
        "LINE",
        "IF"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "TIME$": {
      "name": "TIME$",
      "type": "function",
      "category": "functions",
      "description": "returns the present time setting of the Operating System as a format hh:mm:ss STRING.",
      "syntax": "string_result = TIME$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = TIME$()",
      "related": [
        "AS",
        "FUNCTION",
        "STRING",
        "SYSTEM",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "TIMER": {
      "name": "TIMER",
      "type": "statement",
      "category": "statements",
      "description": "events based on the designated time interval and timer number.",
      "syntax": "TIMER [parameters]",
      "parameters": [],
      "returns": null,
      "example": "TIMER",
      "related": [
        "AND",
        "AND",
        "ON",
        "_DELAY",
        "SLEEP",
        "_LIMIT",
        "ON TIMER"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "TO": {
      "name": "TO",
      "type": "statement",
      "category": "statements",
      "description": "indicates a range of numerical values or an assignment of one value to another.",
      "syntax": "TO [parameters]",
      "parameters": [],
      "returns": null,
      "example": "TO",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "TYPE": {
      "name": "TYPE",
      "type": "statement",
      "category": "statements",
      "description": "defines a variable type or file record that can include any STRING or numerical types.",
      "syntax": "TYPE type_name\n  element AS type\nEND TYPE",
      "parameters": [],
      "returns": null,
      "example": "TYPE",
      "related": [
        "OR",
        "OR",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "UBOUND": {
      "name": "UBOUND",
      "type": "function",
      "category": "functions",
      "description": "returns the upper-most index number of a designated array.",
      "syntax": "result = UBOUND([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = UBOUND()",
      "related": [
        "FUNCTION",
        "array"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "UCASE$": {
      "name": "UCASE$",
      "type": "function",
      "category": "functions",
      "description": "returns an uppercase representation of a specified STRING.",
      "syntax": "string_result = UCASE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = UCASE$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "UNLOCK": {
      "name": "UNLOCK",
      "type": "statement",
      "category": "statements",
      "description": "unlocks a designated file or portions of it.",
      "syntax": "UNLOCK [parameters]",
      "parameters": [],
      "returns": null,
      "example": "UNLOCK",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "UNTIL": {
      "name": "UNTIL",
      "type": "statement",
      "category": "statements",
      "description": "evaluates a DO...LOOP condition until it is True.",
      "syntax": "UNTIL [parameters]",
      "parameters": [],
      "returns": null,
      "example": "UNTIL",
      "related": [
        "LOOP"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "VAL": {
      "name": "VAL",
      "type": "function",
      "category": "functions",
      "description": "returns the numerical value of a string number.",
      "syntax": "result = VAL([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = VAL()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "VARPTR": {
      "name": "VARPTR",
      "type": "function",
      "category": "functions",
      "description": "returns the segment pointer address in memory.",
      "syntax": "result = VARPTR([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = VARPTR()",
      "related": [
        "FUNCTION",
        "segment"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "VARPTR$": {
      "name": "VARPTR$",
      "type": "function",
      "category": "functions",
      "description": "returns the string value of a numerical value in memory.",
      "syntax": "string_result = VARPTR$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = VARPTR$()",
      "related": [
        "FUNCTION",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "VARSEG": {
      "name": "VARSEG",
      "type": "function",
      "category": "functions",
      "description": "returns the segment address of a value in memory.",
      "syntax": "result = VARSEG([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = VARSEG()",
      "related": [
        "FUNCTION",
        "segment"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "VIEW": {
      "name": "VIEW",
      "type": "statement",
      "category": "statements",
      "description": "sets up a graphic view port area of the screen.",
      "syntax": "VIEW [parameters]",
      "parameters": [],
      "returns": null,
      "example": "VIEW",
      "related": [
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "VIEW PRINT": {
      "name": "VIEW PRINT",
      "type": "statement",
      "category": "statements",
      "description": "sets up a text viewport area of the screen.",
      "syntax": "VIEW PRINT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "VIEW PRINT \"Hello, World!\"",
      "related": [
        "SCREEN",
        "SCREEN",
        "screen",
        "OPEN",
        "CLOSE",
        "INPUT",
        "OUTPUT",
        "PRINT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "WAIT": {
      "name": "WAIT",
      "type": "statement",
      "category": "statements",
      "description": "waits until a vertical retrace is started or a screen draw ends.",
      "syntax": "WAIT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "WAIT",
      "related": [
        "DRAW",
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "UNTIL",
        "screen",
        "ENDs"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "WEND": {
      "name": "WEND",
      "type": "statement",
      "category": "statements",
      "description": "the bottom end of a WHILE...WEND loop.",
      "syntax": "WEND [parameters]",
      "parameters": [],
      "returns": null,
      "example": "WEND",
      "related": [
        "END",
        "LOOP",
        "WHILE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "WHILE": {
      "name": "WHILE",
      "type": "statement",
      "category": "statements",
      "description": "evaluates a DO...LOOP or WHILE...WEND condition until it is False.",
      "syntax": "WHILE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "WHILE",
      "related": [
        "LOOP",
        "OR",
        "OR",
        "UNTIL",
        "WEND",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "WHILE...WEND": {
      "name": "WHILE...WEND",
      "type": "statement",
      "category": "statements",
      "description": "sets a recursive procedure loop that can only be exited using the WHILE conditional argument.",
      "syntax": "WHILE condition\n  statements\nWEND",
      "parameters": [],
      "returns": null,
      "example": "WHILE x < 10\n    x = x + 1\nWEND",
      "related": [
        "LOOP",
        "WHILE",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "WIDTH": {
      "name": "WIDTH",
      "type": "statement",
      "category": "statements",
      "description": "sets the text column and row sizes in several SCREEN modes.",
      "syntax": "WIDTH [parameters]",
      "parameters": [],
      "returns": null,
      "example": "WIDTH",
      "related": [
        "AND",
        "AND",
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "WINDOW": {
      "name": "WINDOW",
      "type": "statement",
      "category": "statements",
      "description": "maps a window size different from the program's window size.",
      "syntax": "WINDOW [parameters]",
      "parameters": [],
      "returns": null,
      "example": "WINDOW",
      "related": [
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "WRITE": {
      "name": "WRITE",
      "type": "statement",
      "category": "statements",
      "description": "prints variable values to the screen with commas separating each value.",
      "syntax": "WRITE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "WRITE",
      "related": [
        "SCREEN",
        "SCREEN",
        "TO",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "WRITE (file statement)": {
      "name": "WRITE (file statement)",
      "type": "statement",
      "category": "statements",
      "description": "writes data to a file with each variable value separated by commas.",
      "syntax": "WRITE (file statement) [parameters]",
      "parameters": [],
      "returns": null,
      "example": "WRITE (file statement)",
      "related": [
        "DATA",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "XOR (boolean)": {
      "name": "XOR (boolean)",
      "type": "operator",
      "category": "operators",
      "description": "is used to compare two numerical values bitwise.",
      "syntax": "IF condition1 XOR condition2 THEN",
      "parameters": [],
      "returns": null,
      "example": "IF condition1 XOR condition2 THEN",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "operator",
        "operators"
      ],
      "aliases": [
        "XOR"
      ]
    },
    "SUB _GL": {
      "name": "SUB _GL",
      "type": "statement",
      "category": "statements",
      "description": "Important: see SUB _GL",
      "syntax": "SUB _GL [parameters]",
      "parameters": [],
      "returns": null,
      "example": "SUB _GL",
      "related": [
        "SUB"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_glAccum": {
      "name": "_glAccum",
      "type": "opengl",
      "category": "opengl",
      "description": "operates on the accumulation buffer",
      "syntax": "_glAccum [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glAccum",
      "related": [
        "ON",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glAlphaFunc": {
      "name": "_glAlphaFunc",
      "type": "opengl",
      "category": "opengl",
      "description": "enables your application to set the alpha test function.",
      "syntax": "_glAlphaFunc [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glAlphaFunc",
      "related": [
        "FUNCTION",
        "TO",
        "alpha",
        "ALPHA",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glAreTexturesResident": {
      "name": "_glAreTexturesResident",
      "type": "opengl",
      "category": "opengl",
      "description": "determines whether specified texture objects are resident in texture memory.",
      "syntax": "_glAreTexturesResident [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glAreTexturesResident",
      "related": [
        "FUNCTION",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glArrayElement": {
      "name": "_glArrayElement",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the array elements used to render a vertex.",
      "syntax": "_glArrayElement [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glArrayElement",
      "related": [
        "TO",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glBegin": {
      "name": "_glBegin",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glBegin and _glEnd statements delimit the vertices of a primitive or a group of like primitives.",
      "syntax": "_glBegin [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glBegin _GL_TRIANGLES\n_glVertex3f 0, 1, 0\n_glVertex3f -1, -1, 0\n_glVertex3f 1, -1, 0\n_glEnd",
      "related": [
        "AND",
        "AND",
        "OR",
        "OR"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glBindTexture": {
      "name": "_glBindTexture",
      "type": "opengl",
      "category": "opengl",
      "description": "enables the creation of a named texture that is bound to a texture target",
      "syntax": "_glBindTexture [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glBindTexture",
      "related": [
        "TO",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glBitmap": {
      "name": "_glBitmap",
      "type": "opengl",
      "category": "opengl",
      "description": "draws a bitmap.",
      "syntax": "_glBitmap [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glBitmap",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glBlendFunc": {
      "name": "_glBlendFunc",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies pixel arithmetic.",
      "syntax": "_glBlendFunc [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glBlendFunc",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glCallList": {
      "name": "_glCallList",
      "type": "opengl",
      "category": "opengl",
      "description": "executes a display list.",
      "syntax": "_glCallList [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glCallList",
      "related": [
        "LIST",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glCallLists": {
      "name": "_glCallLists",
      "type": "opengl",
      "category": "opengl",
      "description": "executes a list of display lists.",
      "syntax": "_glCallLists [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glCallLists",
      "related": [
        "LIST",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glClear": {
      "name": "_glClear",
      "type": "opengl",
      "category": "opengl",
      "description": "clears buffers to preset values.",
      "syntax": "_glClear [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glClear",
      "related": [
        "PRESET",
        "TO",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glClearAccum": {
      "name": "_glClearAccum",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the clear values for the accumulation buffer.",
      "syntax": "_glClearAccum [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glClearAccum",
      "related": [
        "CLEAR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glClearColor": {
      "name": "_glClearColor",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies clear values for the color buffers.",
      "syntax": "_glClearColor [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glClearColor",
      "related": [
        "CLEAR",
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glClearDepth": {
      "name": "_glClearDepth",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the clear value for the depth buffer.",
      "syntax": "_glClearDepth [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glClearDepth",
      "related": [
        "CLEAR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glClearIndex": {
      "name": "_glClearIndex",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the clear value for the color-index buffers.",
      "syntax": "_glClearIndex [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glClearIndex",
      "related": [
        "CLEAR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glClearStencil": {
      "name": "_glClearStencil",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the clear value for the stencil buffer.",
      "syntax": "_glClearStencil [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glClearStencil",
      "related": [
        "CLEAR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glClipPlane": {
      "name": "_glClipPlane",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a plane against which all geometry is clipped.",
      "syntax": "_glClipPlane [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glClipPlane",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3b": {
      "name": "_glColor3b",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor3b [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3b",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3bv": {
      "name": "_glColor3bv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor3bv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3bv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3d": {
      "name": "_glColor3d",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor3d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3d",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3dv": {
      "name": "_glColor3dv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor3dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3dv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3f": {
      "name": "_glColor3f",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor3f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3f",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3fv": {
      "name": "_glColor3fv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor3fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3fv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3i": {
      "name": "_glColor3i",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor3i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3i",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3iv": {
      "name": "_glColor3iv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor3iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3iv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3s": {
      "name": "_glColor3s",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor3s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3s",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3sv": {
      "name": "_glColor3sv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor3sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3sv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3ub": {
      "name": "_glColor3ub",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor3ub [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3ub",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3ubv": {
      "name": "_glColor3ubv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor3ubv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3ubv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3ui": {
      "name": "_glColor3ui",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor3ui [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3ui",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3uiv": {
      "name": "_glColor3uiv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor3uiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3uiv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3us": {
      "name": "_glColor3us",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor3us [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3us",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor3usv": {
      "name": "_glColor3usv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor3usv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor3usv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4b": {
      "name": "_glColor4b",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor4b [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4b",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4bv": {
      "name": "_glColor4bv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor4bv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4bv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4d": {
      "name": "_glColor4d",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor4d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4d",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4dv": {
      "name": "_glColor4dv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor4dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4dv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4f": {
      "name": "_glColor4f",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor4f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4f",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4fv": {
      "name": "_glColor4fv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor4fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4fv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4i": {
      "name": "_glColor4i",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor4i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4i",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4iv": {
      "name": "_glColor4iv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor4iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4iv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4s": {
      "name": "_glColor4s",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor4s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4s",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4sv": {
      "name": "_glColor4sv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor4sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4sv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4ub": {
      "name": "_glColor4ub",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor4ub [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4ub",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4ubv": {
      "name": "_glColor4ubv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor4ubv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4ubv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4ui": {
      "name": "_glColor4ui",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor4ui [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4ui",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4uiv": {
      "name": "_glColor4uiv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor4uiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4uiv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4us": {
      "name": "_glColor4us",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color.",
      "syntax": "_glColor4us [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4us",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColor4usv": {
      "name": "_glColor4usv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color from an already existing array of color values.",
      "syntax": "_glColor4usv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColor4usv",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColorMask": {
      "name": "_glColorMask",
      "type": "opengl",
      "category": "opengl",
      "description": "enables and disables writing of frame-buffer color components.",
      "syntax": "_glColorMask [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColorMask",
      "related": [
        "AND",
        "AND",
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColorMaterial": {
      "name": "_glColorMaterial",
      "type": "opengl",
      "category": "opengl",
      "description": "causes a material color to track the current color.",
      "syntax": "_glColorMaterial [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColorMaterial",
      "related": [
        "COLOR",
        "TO",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glColorPointer": {
      "name": "_glColorPointer",
      "type": "opengl",
      "category": "opengl",
      "description": "defines an array of colors.",
      "syntax": "_glColorPointer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glColorPointer",
      "related": [
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glCopyPixels": {
      "name": "_glCopyPixels",
      "type": "opengl",
      "category": "opengl",
      "description": "copies pixels in the framebuffer.",
      "syntax": "_glCopyPixels [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glCopyPixels",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glCopyTexImage1D": {
      "name": "_glCopyTexImage1D",
      "type": "opengl",
      "category": "opengl",
      "description": "copies pixels from the framebuffer into a one-dimensional texture image.",
      "syntax": "_glCopyTexImage1D [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glCopyTexImage1D",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glCopyTexImage2D": {
      "name": "_glCopyTexImage2D",
      "type": "opengl",
      "category": "opengl",
      "description": "copies pixels from the framebuffer into a two-dimensional texture image.",
      "syntax": "_glCopyTexImage2D [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glCopyTexImage2D",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glCopyTexSubImage1D": {
      "name": "_glCopyTexSubImage1D",
      "type": "opengl",
      "category": "opengl",
      "description": "copies a sub-image of a one-dimensional texture image from the framebuffer.",
      "syntax": "_glCopyTexSubImage1D [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glCopyTexSubImage1D",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glCopyTexSubImage2D": {
      "name": "_glCopyTexSubImage2D",
      "type": "opengl",
      "category": "opengl",
      "description": "copies a sub-image of a two-dimensional texture image from the framebuffer.",
      "syntax": "_glCopyTexSubImage2D [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glCopyTexSubImage2D",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glCullFace": {
      "name": "_glCullFace",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies whether front-facing or back-facing facets can be culled.",
      "syntax": "_glCullFace [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glCullFace",
      "related": [
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDeleteLists": {
      "name": "_glDeleteLists",
      "type": "opengl",
      "category": "opengl",
      "description": "deletes a contiguous group of display lists.",
      "syntax": "_glDeleteLists [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDeleteLists",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDeleteTextures": {
      "name": "_glDeleteTextures",
      "type": "opengl",
      "category": "opengl",
      "description": "deletes named textures.",
      "syntax": "_glDeleteTextures [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDeleteTextures",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDepthFunc": {
      "name": "_glDepthFunc",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the value used for depth-buffer comparisons.",
      "syntax": "_glDepthFunc [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDepthFunc",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDepthMask": {
      "name": "_glDepthMask",
      "type": "opengl",
      "category": "opengl",
      "description": "enables or disables writing into the depth buffer.",
      "syntax": "_glDepthMask [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDepthMask",
      "related": [
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDepthRange": {
      "name": "_glDepthRange",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the mapping of z values from normalized device coordinates to window coordinates.",
      "syntax": "_glDepthRange [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDepthRange",
      "related": [
        "TO",
        "WINDOW",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDisable": {
      "name": "_glDisable",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glEnable and _glDisable statements enable or disable OpenGL capabilities.",
      "syntax": "_glDisable [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDisable",
      "related": [
        "AND",
        "AND",
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDisableClientState": {
      "name": "_glDisableClientState",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glEnableClientState and _glDisableClientState statements enable and disable arrays.",
      "syntax": "_glDisableClientState [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDisableClientState",
      "related": [
        "AND",
        "AND",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDrawArrays": {
      "name": "_glDrawArrays",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies multiple primitives to render.",
      "syntax": "_glDrawArrays [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDrawArrays",
      "related": [
        "TO",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDrawBuffer": {
      "name": "_glDrawBuffer",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies which color buffers are to be drawn into.",
      "syntax": "_glDrawBuffer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDrawBuffer",
      "related": [
        "COLOR",
        "TO",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDrawElements": {
      "name": "_glDrawElements",
      "type": "opengl",
      "category": "opengl",
      "description": "renders primitives from array data.",
      "syntax": "_glDrawElements [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDrawElements",
      "related": [
        "DATA",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glDrawPixels": {
      "name": "_glDrawPixels",
      "type": "opengl",
      "category": "opengl",
      "description": "writes a block of pixels to the framebuffer.",
      "syntax": "_glDrawPixels [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glDrawPixels",
      "related": [
        "TO",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEdgeFlag": {
      "name": "_glEdgeFlag",
      "type": "opengl",
      "category": "opengl",
      "description": "flags edges as either boundary or nonboundary.",
      "syntax": "_glEdgeFlag [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEdgeFlag",
      "related": [
        "AS",
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEdgeFlagv": {
      "name": "_glEdgeFlagv",
      "type": "opengl",
      "category": "opengl",
      "description": "flags edges as either boundary or nonboundary.",
      "syntax": "_glEdgeFlagv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEdgeFlagv",
      "related": [
        "AS",
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEdgeFlagPointer": {
      "name": "_glEdgeFlagPointer",
      "type": "opengl",
      "category": "opengl",
      "description": "defines an array of edge flags.",
      "syntax": "_glEdgeFlagPointer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEdgeFlagPointer",
      "related": [
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEnable": {
      "name": "_glEnable",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glEnable and _glDisable statements enable or disable OpenGL capabilities.",
      "syntax": "_glEnable [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEnable",
      "related": [
        "AND",
        "AND",
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEnableClientState": {
      "name": "_glEnableClientState",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glEnableClientState and _glDisableClientState statements enable and disable arrays.",
      "syntax": "_glEnableClientState [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEnableClientState",
      "related": [
        "AND",
        "AND",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEnd": {
      "name": "_glEnd",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glBegin and _glEnd statements delimit the vertices of a primitive or a group of like primitives.",
      "syntax": "_glEnd [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEnd",
      "related": [
        "AND",
        "AND",
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEndList": {
      "name": "_glEndList",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glNewList and _glEndList statements create or replace a display list.",
      "syntax": "_glEndList [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEndList",
      "related": [
        "AND",
        "AND",
        "LIST",
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalCoord1d": {
      "name": "_glEvalCoord1d",
      "type": "opengl",
      "category": "opengl",
      "description": "evaluates enabled one-dimensional maps.",
      "syntax": "_glEvalCoord1d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalCoord1d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalCoord1dv": {
      "name": "_glEvalCoord1dv",
      "type": "opengl",
      "category": "opengl",
      "description": "evaluates enabled one-dimensional maps.",
      "syntax": "_glEvalCoord1dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalCoord1dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalCoord1f": {
      "name": "_glEvalCoord1f",
      "type": "opengl",
      "category": "opengl",
      "description": "evaluates enabled one-dimensional maps.",
      "syntax": "_glEvalCoord1f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalCoord1f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalCoord1fv": {
      "name": "_glEvalCoord1fv",
      "type": "opengl",
      "category": "opengl",
      "description": "evaluates enabled one-dimensional maps.",
      "syntax": "_glEvalCoord1fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalCoord1fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalCoord2d": {
      "name": "_glEvalCoord2d",
      "type": "opengl",
      "category": "opengl",
      "description": "evaluates enabled two-dimensional maps.",
      "syntax": "_glEvalCoord2d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalCoord2d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalCoord2dv": {
      "name": "_glEvalCoord2dv",
      "type": "opengl",
      "category": "opengl",
      "description": "evaluates enabled two-dimensional maps.",
      "syntax": "_glEvalCoord2dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalCoord2dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalCoord2f": {
      "name": "_glEvalCoord2f",
      "type": "opengl",
      "category": "opengl",
      "description": "evaluates enabled two-dimensional maps.",
      "syntax": "_glEvalCoord2f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalCoord2f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalCoord2fv": {
      "name": "_glEvalCoord2fv",
      "type": "opengl",
      "category": "opengl",
      "description": "evaluates enabled two-dimensional maps.",
      "syntax": "_glEvalCoord2fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalCoord2fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalMesh1": {
      "name": "_glEvalMesh1",
      "type": "opengl",
      "category": "opengl",
      "description": "computes a one-dimensional grid of points or lines.",
      "syntax": "_glEvalMesh1 [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalMesh1",
      "related": [
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalMesh2": {
      "name": "_glEvalMesh2",
      "type": "opengl",
      "category": "opengl",
      "description": "computes a two-dimensional grid of points or lines.",
      "syntax": "_glEvalMesh2 [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalMesh2",
      "related": [
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalPoint1": {
      "name": "_glEvalPoint1",
      "type": "opengl",
      "category": "opengl",
      "description": "generate and evaluate a single point in a mesh.",
      "syntax": "_glEvalPoint1 [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalPoint1",
      "related": [
        "AND",
        "AND",
        "POINT",
        "SINGLE",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glEvalPoint2": {
      "name": "_glEvalPoint2",
      "type": "opengl",
      "category": "opengl",
      "description": "generate and evaluate a single point in a mesh.",
      "syntax": "_glEvalPoint2 [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glEvalPoint2",
      "related": [
        "AND",
        "AND",
        "POINT",
        "SINGLE",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glFeedbackBuffer": {
      "name": "_glFeedbackBuffer",
      "type": "opengl",
      "category": "opengl",
      "description": "controls feedback mode.",
      "syntax": "_glFeedbackBuffer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glFeedbackBuffer",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glFinish": {
      "name": "_glFinish",
      "type": "opengl",
      "category": "opengl",
      "description": "blocks until all OpenGL execution is complete.",
      "syntax": "_glFinish [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glFinish",
      "related": [
        "UNTIL",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glFlush": {
      "name": "_glFlush",
      "type": "opengl",
      "category": "opengl",
      "description": "forces execution of OpenGL functions in finite time.",
      "syntax": "_glFlush [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glFlush",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glFogf": {
      "name": "_glFogf",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies fog parameters.",
      "syntax": "_glFogf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glFogf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glFogfv": {
      "name": "_glFogfv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies fog parameters.",
      "syntax": "_glFogfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glFogfv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glFogi": {
      "name": "_glFogi",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies fog parameters.",
      "syntax": "_glFogi [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glFogi",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glFogiv": {
      "name": "_glFogiv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies fog parameters.",
      "syntax": "_glFogiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glFogiv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glFrontFace": {
      "name": "_glFrontFace",
      "type": "opengl",
      "category": "opengl",
      "description": "defines front-facing and back-facing polygons.",
      "syntax": "_glFrontFace [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glFrontFace",
      "related": [
        "AND",
        "AND",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glFrustum": {
      "name": "_glFrustum",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by a perspective matrix.",
      "syntax": "_glFrustum [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glFrustum",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGenLists": {
      "name": "_glGenLists",
      "type": "opengl",
      "category": "opengl",
      "description": "generates a contiguous set of empty display lists.",
      "syntax": "_glGenLists [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGenLists",
      "related": [
        "FUNCTION",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGenTextures": {
      "name": "_glGenTextures",
      "type": "opengl",
      "category": "opengl",
      "description": "generates texture names.",
      "syntax": "_glGenTextures [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGenTextures",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetBooleanv": {
      "name": "_glGetBooleanv",
      "type": "opengl",
      "category": "opengl",
      "description": "returns the value or values of a selected parameter.",
      "syntax": "_glGetBooleanv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetBooleanv",
      "related": [
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetClipPlane": {
      "name": "_glGetClipPlane",
      "type": "opengl",
      "category": "opengl",
      "description": "returns the coefficients of the specified clipping plane.",
      "syntax": "_glGetClipPlane [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetClipPlane",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetDoublev": {
      "name": "_glGetDoublev",
      "type": "opengl",
      "category": "opengl",
      "description": "returns the value or values of a selected parameter.",
      "syntax": "_glGetDoublev [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetDoublev",
      "related": [
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetError": {
      "name": "_glGetError",
      "type": "opengl",
      "category": "opengl",
      "description": "returns error information.",
      "syntax": "_glGetError [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetError",
      "related": [
        "ERROR",
        "FUNCTION",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetFloatv": {
      "name": "_glGetFloatv",
      "type": "opengl",
      "category": "opengl",
      "description": "returns the value or values of a selected parameter.",
      "syntax": "_glGetFloatv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetFloatv",
      "related": [
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetIntegerv": {
      "name": "_glGetIntegerv",
      "type": "opengl",
      "category": "opengl",
      "description": "returns the value or values of a selected parameter.",
      "syntax": "_glGetIntegerv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetIntegerv",
      "related": [
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetLightfv": {
      "name": "_glGetLightfv",
      "type": "opengl",
      "category": "opengl",
      "description": "return light source parameter values.",
      "syntax": "_glGetLightfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetLightfv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetLightiv": {
      "name": "_glGetLightiv",
      "type": "opengl",
      "category": "opengl",
      "description": "return light source parameter values.",
      "syntax": "_glGetLightiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetLightiv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetMapdv": {
      "name": "_glGetMapdv",
      "type": "opengl",
      "category": "opengl",
      "description": "return evaluator parameters.",
      "syntax": "_glGetMapdv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetMapdv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetMapfv": {
      "name": "_glGetMapfv",
      "type": "opengl",
      "category": "opengl",
      "description": "return evaluator parameters.",
      "syntax": "_glGetMapfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetMapfv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetMapiv": {
      "name": "_glGetMapiv",
      "type": "opengl",
      "category": "opengl",
      "description": "return evaluator parameters.",
      "syntax": "_glGetMapiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetMapiv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetMaterialfv": {
      "name": "_glGetMaterialfv",
      "type": "opengl",
      "category": "opengl",
      "description": "return material parameters.",
      "syntax": "_glGetMaterialfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetMaterialfv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetMaterialiv": {
      "name": "_glGetMaterialiv",
      "type": "opengl",
      "category": "opengl",
      "description": "return material parameters.",
      "syntax": "_glGetMaterialiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetMaterialiv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetPixelMapfv": {
      "name": "_glGetPixelMapfv",
      "type": "opengl",
      "category": "opengl",
      "description": "return the specified pixel map.",
      "syntax": "_glGetPixelMapfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetPixelMapfv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetPixelMapuiv": {
      "name": "_glGetPixelMapuiv",
      "type": "opengl",
      "category": "opengl",
      "description": "return the specified pixel map.",
      "syntax": "_glGetPixelMapuiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetPixelMapuiv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetPixelMapusv": {
      "name": "_glGetPixelMapusv",
      "type": "opengl",
      "category": "opengl",
      "description": "return the specified pixel map.",
      "syntax": "_glGetPixelMapusv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetPixelMapusv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetPointerv": {
      "name": "_glGetPointerv",
      "type": "opengl",
      "category": "opengl",
      "description": "returns the address of a vertex data array.",
      "syntax": "_glGetPointerv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetPointerv",
      "related": [
        "DATA",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetPolygonStipple": {
      "name": "_glGetPolygonStipple",
      "type": "opengl",
      "category": "opengl",
      "description": "returns the polygon stipple pattern.",
      "syntax": "_glGetPolygonStipple [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetPolygonStipple",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetString": {
      "name": "_glGetString",
      "type": "opengl",
      "category": "opengl",
      "description": "returns a string describing the current OpenGL connection.",
      "syntax": "_glGetString [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetString",
      "related": [
        "FUNCTION",
        "STRING",
        "string",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexEnvfv": {
      "name": "_glGetTexEnvfv",
      "type": "opengl",
      "category": "opengl",
      "description": "return texture environment parameters.",
      "syntax": "_glGetTexEnvfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexEnvfv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexEnviv": {
      "name": "_glGetTexEnviv",
      "type": "opengl",
      "category": "opengl",
      "description": "return texture environment parameters.",
      "syntax": "_glGetTexEnviv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexEnviv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexGendv": {
      "name": "_glGetTexGendv",
      "type": "opengl",
      "category": "opengl",
      "description": "return texture coordinate generation parameters.",
      "syntax": "_glGetTexGendv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexGendv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexGenfv": {
      "name": "_glGetTexGenfv",
      "type": "opengl",
      "category": "opengl",
      "description": "return texture coordinate generation parameters.",
      "syntax": "_glGetTexGenfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexGenfv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexGeniv": {
      "name": "_glGetTexGeniv",
      "type": "opengl",
      "category": "opengl",
      "description": "return texture coordinate generation parameters.",
      "syntax": "_glGetTexGeniv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexGeniv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexImage": {
      "name": "_glGetTexImage",
      "type": "opengl",
      "category": "opengl",
      "description": "returns a texture image.",
      "syntax": "_glGetTexImage [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexImage",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexLevelParameterfv": {
      "name": "_glGetTexLevelParameterfv",
      "type": "opengl",
      "category": "opengl",
      "description": "return texture parameter values for a specific level of detail.",
      "syntax": "_glGetTexLevelParameterfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexLevelParameterfv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexLevelParameteriv": {
      "name": "_glGetTexLevelParameteriv",
      "type": "opengl",
      "category": "opengl",
      "description": "return texture parameter values for a specific level of detail.",
      "syntax": "_glGetTexLevelParameteriv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexLevelParameteriv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexParameterfv": {
      "name": "_glGetTexParameterfv",
      "type": "opengl",
      "category": "opengl",
      "description": "return texture parameter values.",
      "syntax": "_glGetTexParameterfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexParameterfv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glGetTexParameteriv": {
      "name": "_glGetTexParameteriv",
      "type": "opengl",
      "category": "opengl",
      "description": "return texture parameter values.",
      "syntax": "_glGetTexParameteriv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glGetTexParameteriv",
      "related": [
        "RETURN",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glHint": {
      "name": "_glHint",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies implementation-specific hints.",
      "syntax": "_glHint [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glHint",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexMask": {
      "name": "_glIndexMask",
      "type": "opengl",
      "category": "opengl",
      "description": "controls the writing of individual bits in the color-index buffers.",
      "syntax": "_glIndexMask [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexMask",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexPointer": {
      "name": "_glIndexPointer",
      "type": "opengl",
      "category": "opengl",
      "description": "defines an array of color indexes.",
      "syntax": "_glIndexPointer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexPointer",
      "related": [
        "COLOR",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexd": {
      "name": "_glIndexd",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexd [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexd",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexdv": {
      "name": "_glIndexdv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexdv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexdv",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexf": {
      "name": "_glIndexf",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexf",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexfv": {
      "name": "_glIndexfv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexfv",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexi": {
      "name": "_glIndexi",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexi [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexi",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexiv": {
      "name": "_glIndexiv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexiv",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexs": {
      "name": "_glIndexs",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexs [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexs",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexsv": {
      "name": "_glIndexsv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexsv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexsv",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexub": {
      "name": "_glIndexub",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexub [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexub",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIndexubv": {
      "name": "_glIndexubv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current color index.",
      "syntax": "_glIndexubv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIndexubv",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glInitNames": {
      "name": "_glInitNames",
      "type": "opengl",
      "category": "opengl",
      "description": "initializes the name stack.",
      "syntax": "_glInitNames [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glInitNames",
      "related": [
        "NAME",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glInterleavedArrays": {
      "name": "_glInterleavedArrays",
      "type": "opengl",
      "category": "opengl",
      "description": "simultaneously specifies and enables several interleaved arrays in a larger aggregate array.",
      "syntax": "_glInterleavedArrays [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glInterleavedArrays",
      "related": [
        "AND",
        "AND",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIsEnabled": {
      "name": "_glIsEnabled",
      "type": "opengl",
      "category": "opengl",
      "description": "tests whether a capability is enabled.",
      "syntax": "_glIsEnabled [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIsEnabled",
      "related": [
        "FUNCTION",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIsList": {
      "name": "_glIsList",
      "type": "opengl",
      "category": "opengl",
      "description": "tests for display list existence.",
      "syntax": "_glIsList [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIsList",
      "related": [
        "FUNCTION",
        "LIST",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glIsTexture": {
      "name": "_glIsTexture",
      "type": "opengl",
      "category": "opengl",
      "description": "determines if a name corresponds to a texture.",
      "syntax": "_glIsTexture [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glIsTexture",
      "related": [
        "FUNCTION",
        "NAME",
        "TO",
        "IF",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLightModelf": {
      "name": "_glLightModelf",
      "type": "opengl",
      "category": "opengl",
      "description": "sets lighting model parameters.",
      "syntax": "_glLightModelf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLightModelf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLightModelfv": {
      "name": "_glLightModelfv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets lighting model parameters.",
      "syntax": "_glLightModelfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLightModelfv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLightModeli": {
      "name": "_glLightModeli",
      "type": "opengl",
      "category": "opengl",
      "description": "sets lighting model parameters.",
      "syntax": "_glLightModeli [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLightModeli",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLightModeliv": {
      "name": "_glLightModeliv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets lighting model parameters.",
      "syntax": "_glLightModeliv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLightModeliv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLightf": {
      "name": "_glLightf",
      "type": "opengl",
      "category": "opengl",
      "description": "returns light source parameter values.",
      "syntax": "_glLightf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLightf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLightfv": {
      "name": "_glLightfv",
      "type": "opengl",
      "category": "opengl",
      "description": "returns light source parameter values.",
      "syntax": "_glLightfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLightfv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLighti": {
      "name": "_glLighti",
      "type": "opengl",
      "category": "opengl",
      "description": "returns light source parameter values.",
      "syntax": "_glLighti [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLighti",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLightiv": {
      "name": "_glLightiv",
      "type": "opengl",
      "category": "opengl",
      "description": "returns light source parameter values.",
      "syntax": "_glLightiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLightiv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLineStipple": {
      "name": "_glLineStipple",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the line stipple pattern.",
      "syntax": "_glLineStipple [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLineStipple",
      "related": [
        "LINE",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLineWidth": {
      "name": "_glLineWidth",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the width of rasterized lines.",
      "syntax": "_glLineWidth [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLineWidth",
      "related": [
        "WIDTH",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glListBase": {
      "name": "_glListBase",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the display list base for _glCallLists.",
      "syntax": "_glListBase [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glListBase",
      "related": [
        "LIST",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLoadIdentity": {
      "name": "_glLoadIdentity",
      "type": "opengl",
      "category": "opengl",
      "description": "replaces the current matrix with the identity matrix.",
      "syntax": "_glLoadIdentity [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLoadIdentity",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLoadMatrixd": {
      "name": "_glLoadMatrixd",
      "type": "opengl",
      "category": "opengl",
      "description": "replaces the current matrix with an arbitrary matrix.",
      "syntax": "_glLoadMatrixd [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLoadMatrixd",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLoadMatrixf": {
      "name": "_glLoadMatrixf",
      "type": "opengl",
      "category": "opengl",
      "description": "replaces the current matrix with an arbitrary matrix.",
      "syntax": "_glLoadMatrixf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLoadMatrixf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLoadName": {
      "name": "_glLoadName",
      "type": "opengl",
      "category": "opengl",
      "description": "loads a name onto the name stack.",
      "syntax": "_glLoadName [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLoadName",
      "related": [
        "NAME",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glLogicOp": {
      "name": "_glLogicOp",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a logical pixel operation for color index rendering.",
      "syntax": "_glLogicOp [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glLogicOp",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMap1d": {
      "name": "_glMap1d",
      "type": "opengl",
      "category": "opengl",
      "description": "defines a one-dimensional evaluator.",
      "syntax": "_glMap1d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMap1d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMap1f": {
      "name": "_glMap1f",
      "type": "opengl",
      "category": "opengl",
      "description": "defines a one-dimensional evaluator.",
      "syntax": "_glMap1f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMap1f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMap2d": {
      "name": "_glMap2d",
      "type": "opengl",
      "category": "opengl",
      "description": "defines a two-dimensional evaluator.",
      "syntax": "_glMap2d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMap2d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMap2f": {
      "name": "_glMap2f",
      "type": "opengl",
      "category": "opengl",
      "description": "defines a two-dimensional evaluator.",
      "syntax": "_glMap2f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMap2f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMapGrid1d": {
      "name": "_glMapGrid1d",
      "type": "opengl",
      "category": "opengl",
      "description": "defines a one-dimensional mesh.",
      "syntax": "_glMapGrid1d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMapGrid1d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMapGrid1f": {
      "name": "_glMapGrid1f",
      "type": "opengl",
      "category": "opengl",
      "description": "defines a one-dimensional mesh.",
      "syntax": "_glMapGrid1f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMapGrid1f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMapGrid2d": {
      "name": "_glMapGrid2d",
      "type": "opengl",
      "category": "opengl",
      "description": "defines a two-dimensional mesh.",
      "syntax": "_glMapGrid2d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMapGrid2d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMapGrid2f": {
      "name": "_glMapGrid2f",
      "type": "opengl",
      "category": "opengl",
      "description": "defines a two-dimensional mesh.",
      "syntax": "_glMapGrid2f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMapGrid2f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMaterialf": {
      "name": "_glMaterialf",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies material parameters for the lighting model.",
      "syntax": "_glMaterialf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMaterialf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMaterialfv": {
      "name": "_glMaterialfv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies material parameters for the lighting model.",
      "syntax": "_glMaterialfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMaterialfv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMateriali": {
      "name": "_glMateriali",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies material parameters for the lighting model.",
      "syntax": "_glMateriali [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMateriali",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMaterialiv": {
      "name": "_glMaterialiv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies material parameters for the lighting model.",
      "syntax": "_glMaterialiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMaterialiv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMatrixMode": {
      "name": "_glMatrixMode",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies which matrix is the current matrix.",
      "syntax": "_glMatrixMode [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMatrixMode",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMultMatrixd": {
      "name": "_glMultMatrixd",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by an arbitrary matrix.",
      "syntax": "_glMultMatrixd [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMultMatrixd",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glMultMatrixf": {
      "name": "_glMultMatrixf",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by an arbitrary matrix.",
      "syntax": "_glMultMatrixf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glMultMatrixf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNewList": {
      "name": "_glNewList",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glNewList and _glEndList statements create or replace a display list.",
      "syntax": "_glNewList [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNewList",
      "related": [
        "AND",
        "AND",
        "LIST",
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3b": {
      "name": "_glNormal3b",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3b [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3b",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3bv": {
      "name": "_glNormal3bv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3bv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3bv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3d": {
      "name": "_glNormal3d",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3dv": {
      "name": "_glNormal3dv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3f": {
      "name": "_glNormal3f",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3fv": {
      "name": "_glNormal3fv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3i": {
      "name": "_glNormal3i",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3iv": {
      "name": "_glNormal3iv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3s": {
      "name": "_glNormal3s",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormal3sv": {
      "name": "_glNormal3sv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current normal vector.",
      "syntax": "_glNormal3sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormal3sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glNormalPointer": {
      "name": "_glNormalPointer",
      "type": "opengl",
      "category": "opengl",
      "description": "defines an array of normals.",
      "syntax": "_glNormalPointer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glNormalPointer",
      "related": [
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glOrtho": {
      "name": "_glOrtho",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by an orthographic matrix.",
      "syntax": "_glOrtho [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glOrtho",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPassThrough": {
      "name": "_glPassThrough",
      "type": "opengl",
      "category": "opengl",
      "description": "places a marker in the feedback buffer.",
      "syntax": "_glPassThrough [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPassThrough",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_gluPerspective": {
      "name": "_gluPerspective",
      "type": "opengl",
      "category": "opengl",
      "description": "sets up a perspective projection matrix.",
      "syntax": "_gluPerspective [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_gluPerspective",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPixelMapfv": {
      "name": "_glPixelMapfv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets up pixel transfer maps.",
      "syntax": "_glPixelMapfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPixelMapfv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPixelMapuiv": {
      "name": "_glPixelMapuiv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets up pixel transfer maps.",
      "syntax": "_glPixelMapuiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPixelMapuiv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPixelMapusv": {
      "name": "_glPixelMapusv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets up pixel transfer maps.",
      "syntax": "_glPixelMapusv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPixelMapusv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPixelStoref": {
      "name": "_glPixelStoref",
      "type": "opengl",
      "category": "opengl",
      "description": "sets pixel storage modes.",
      "syntax": "_glPixelStoref [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPixelStoref",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPixelStorei": {
      "name": "_glPixelStorei",
      "type": "opengl",
      "category": "opengl",
      "description": "sets pixel storage modes.",
      "syntax": "_glPixelStorei [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPixelStorei",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPixelTransferf": {
      "name": "_glPixelTransferf",
      "type": "opengl",
      "category": "opengl",
      "description": "sets pixel transfer modes.",
      "syntax": "_glPixelTransferf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPixelTransferf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPixelTransferi": {
      "name": "_glPixelTransferi",
      "type": "opengl",
      "category": "opengl",
      "description": "sets pixel transfer modes.",
      "syntax": "_glPixelTransferi [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPixelTransferi",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPixelZoom": {
      "name": "_glPixelZoom",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the pixel zoom factors.",
      "syntax": "_glPixelZoom [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPixelZoom",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPointSize": {
      "name": "_glPointSize",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the diameter of rasterized points.",
      "syntax": "_glPointSize [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPointSize",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPolygonMode": {
      "name": "_glPolygonMode",
      "type": "opengl",
      "category": "opengl",
      "description": "selects a polygon rasterization mode.",
      "syntax": "_glPolygonMode [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPolygonMode",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPolygonOffset": {
      "name": "_glPolygonOffset",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the scale and units OpenGL uses to calculate depth values.",
      "syntax": "_glPolygonOffset [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPolygonOffset",
      "related": [
        "AND",
        "AND",
        "TO",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPolygonStipple": {
      "name": "_glPolygonStipple",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the polygon stippling pattern.",
      "syntax": "_glPolygonStipple [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPolygonStipple",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPopAttrib": {
      "name": "_glPopAttrib",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glPushAttrib and _glPopAttrib statements push and pop the attribute stack.",
      "syntax": "_glPopAttrib [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPopAttrib",
      "related": [
        "AND",
        "AND",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPopClientAttrib": {
      "name": "_glPopClientAttrib",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glPushClientAttrib and _glPopClientAttrib statements save and restore groups of client-state variables on the client-attribute stack.",
      "syntax": "_glPopClientAttrib [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPopClientAttrib",
      "related": [
        "AND",
        "AND",
        "RESTORE",
        "ON",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPopMatrix": {
      "name": "_glPopMatrix",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glPushMatrix and _glPopMatrix statements push and pop the current matrix stack.",
      "syntax": "_glPopMatrix [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPopMatrix",
      "related": [
        "AND",
        "AND",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPopName": {
      "name": "_glPopName",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glPushName and _glPopName statements push and pop the name stack.",
      "syntax": "_glPopName [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPopName",
      "related": [
        "AND",
        "AND",
        "NAME",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPrioritizeTextures": {
      "name": "_glPrioritizeTextures",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the residence priority of textures.",
      "syntax": "_glPrioritizeTextures [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPrioritizeTextures",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPushAttrib": {
      "name": "_glPushAttrib",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glPushAttrib and _glPopAttrib statements push and pop the attribute stack.",
      "syntax": "_glPushAttrib [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPushAttrib",
      "related": [
        "AND",
        "AND",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPushClientAttrib": {
      "name": "_glPushClientAttrib",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glPushClientAttrib and _glPopClientAttrib statements save and restore groups of client-state variables on the client-attribute stack.",
      "syntax": "_glPushClientAttrib [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPushClientAttrib",
      "related": [
        "AND",
        "AND",
        "RESTORE",
        "ON",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPushMatrix": {
      "name": "_glPushMatrix",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glPushMatrix and _glPopMatrix statements push and pop the current matrix stack.",
      "syntax": "_glPushMatrix [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPushMatrix",
      "related": [
        "AND",
        "AND",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glPushName": {
      "name": "_glPushName",
      "type": "opengl",
      "category": "opengl",
      "description": "the _glPushName and _glPopName statements push and pop the name stack.",
      "syntax": "_glPushName [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glPushName",
      "related": [
        "AND",
        "AND",
        "NAME",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos2d": {
      "name": "_glRasterPos2d",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos2d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos2d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos2dv": {
      "name": "_glRasterPos2dv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos2dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos2dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos2f": {
      "name": "_glRasterPos2f",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos2f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos2f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos2fv": {
      "name": "_glRasterPos2fv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos2fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos2fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos2i": {
      "name": "_glRasterPos2i",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos2i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos2i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos2iv": {
      "name": "_glRasterPos2iv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos2iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos2iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos2s": {
      "name": "_glRasterPos2s",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos2s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos2s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos2sv": {
      "name": "_glRasterPos2sv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos2sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos2sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos3d": {
      "name": "_glRasterPos3d",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos3d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos3d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos3dv": {
      "name": "_glRasterPos3dv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos3dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos3dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos3f": {
      "name": "_glRasterPos3f",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos3f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos3f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos3fv": {
      "name": "_glRasterPos3fv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos3fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos3fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos3i": {
      "name": "_glRasterPos3i",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos3i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos3i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos3iv": {
      "name": "_glRasterPos3iv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos3iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos3iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos3s": {
      "name": "_glRasterPos3s",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos3s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos3s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos3sv": {
      "name": "_glRasterPos3sv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos3sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos3sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos4d": {
      "name": "_glRasterPos4d",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos4d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos4d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos4dv": {
      "name": "_glRasterPos4dv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos4dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos4dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos4f": {
      "name": "_glRasterPos4f",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos4f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos4f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos4fv": {
      "name": "_glRasterPos4fv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos4fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos4fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos4i": {
      "name": "_glRasterPos4i",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos4i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos4i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos4iv": {
      "name": "_glRasterPos4iv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos4iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos4iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos4s": {
      "name": "_glRasterPos4s",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos4s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos4s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRasterPos4sv": {
      "name": "_glRasterPos4sv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies the raster position for pixel operations.",
      "syntax": "_glRasterPos4sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRasterPos4sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glReadBuffer": {
      "name": "_glReadBuffer",
      "type": "opengl",
      "category": "opengl",
      "description": "selects a color buffer source for pixels.",
      "syntax": "_glReadBuffer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glReadBuffer",
      "related": [
        "COLOR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glReadPixels": {
      "name": "_glReadPixels",
      "type": "opengl",
      "category": "opengl",
      "description": "reads a block of pixels from the framebuffer.",
      "syntax": "_glReadPixels [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glReadPixels",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRectd": {
      "name": "_glRectd",
      "type": "opengl",
      "category": "opengl",
      "description": "draws a rectangle.",
      "syntax": "_glRectd [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRectd",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRectdv": {
      "name": "_glRectdv",
      "type": "opengl",
      "category": "opengl",
      "description": "draws a rectangle.",
      "syntax": "_glRectdv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRectdv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRectf": {
      "name": "_glRectf",
      "type": "opengl",
      "category": "opengl",
      "description": "draws a rectangle.",
      "syntax": "_glRectf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRectf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRectfv": {
      "name": "_glRectfv",
      "type": "opengl",
      "category": "opengl",
      "description": "draws a rectangle.",
      "syntax": "_glRectfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRectfv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRecti": {
      "name": "_glRecti",
      "type": "opengl",
      "category": "opengl",
      "description": "draws a rectangle.",
      "syntax": "_glRecti [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRecti",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRectiv": {
      "name": "_glRectiv",
      "type": "opengl",
      "category": "opengl",
      "description": "draws a rectangle.",
      "syntax": "_glRectiv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRectiv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRects": {
      "name": "_glRects",
      "type": "opengl",
      "category": "opengl",
      "description": "draws a rectangle.",
      "syntax": "_glRects [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRects",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRectsv": {
      "name": "_glRectsv",
      "type": "opengl",
      "category": "opengl",
      "description": "draws a rectangle.",
      "syntax": "_glRectsv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRectsv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRenderMode": {
      "name": "_glRenderMode",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the rasterization mode and returns the previous active mode.",
      "syntax": "_glRenderMode [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRenderMode",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRotated": {
      "name": "_glRotated",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by a rotation matrix.",
      "syntax": "_glRotated [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRotated",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glRotatef": {
      "name": "_glRotatef",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by a rotation matrix.",
      "syntax": "_glRotatef [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glRotatef",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glScaled": {
      "name": "_glScaled",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by a general scaling matrix.",
      "syntax": "_glScaled [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glScaled",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glScalef": {
      "name": "_glScalef",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by a general scaling matrix.",
      "syntax": "_glScalef [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glScalef",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glScissor": {
      "name": "_glScissor",
      "type": "opengl",
      "category": "opengl",
      "description": "defines the scissor box.",
      "syntax": "_glScissor [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glScissor",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glSelectBuffer": {
      "name": "_glSelectBuffer",
      "type": "opengl",
      "category": "opengl",
      "description": "establishes a buffer for selection mode values.",
      "syntax": "_glSelectBuffer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glSelectBuffer",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glShadeModel": {
      "name": "_glShadeModel",
      "type": "opengl",
      "category": "opengl",
      "description": "selects flat or smooth shading.",
      "syntax": "_glShadeModel [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glShadeModel",
      "related": [
        "OR",
        "OR",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glStencilFunc": {
      "name": "_glStencilFunc",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the function and reference value for stencil testing.",
      "syntax": "_glStencilFunc [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glStencilFunc",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glStencilMask": {
      "name": "_glStencilMask",
      "type": "opengl",
      "category": "opengl",
      "description": "controls the writing of individual bits in the stencil planes.",
      "syntax": "_glStencilMask [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glStencilMask",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glStencilOp": {
      "name": "_glStencilOp",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the stencil test actions.",
      "syntax": "_glStencilOp [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glStencilOp",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord1d": {
      "name": "_glTexCoord1d",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord1d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord1d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord1dv": {
      "name": "_glTexCoord1dv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord1dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord1dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord1f": {
      "name": "_glTexCoord1f",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord1f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord1f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord1fv": {
      "name": "_glTexCoord1fv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord1fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord1fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord1i": {
      "name": "_glTexCoord1i",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord1i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord1i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord1iv": {
      "name": "_glTexCoord1iv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord1iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord1iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord1s": {
      "name": "_glTexCoord1s",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord1s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord1s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord1sv": {
      "name": "_glTexCoord1sv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord1sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord1sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord2d": {
      "name": "_glTexCoord2d",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord2d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord2d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord2dv": {
      "name": "_glTexCoord2dv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord2dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord2dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord2f": {
      "name": "_glTexCoord2f",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord2f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord2f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord2fv": {
      "name": "_glTexCoord2fv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord2fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord2fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord2i": {
      "name": "_glTexCoord2i",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord2i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord2i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord2iv": {
      "name": "_glTexCoord2iv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord2iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord2iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord2s": {
      "name": "_glTexCoord2s",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord2s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord2s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord2sv": {
      "name": "_glTexCoord2sv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord2sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord2sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord3d": {
      "name": "_glTexCoord3d",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord3d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord3d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord3dv": {
      "name": "_glTexCoord3dv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord3dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord3dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord3f": {
      "name": "_glTexCoord3f",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord3f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord3f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord3fv": {
      "name": "_glTexCoord3fv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord3fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord3fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord3i": {
      "name": "_glTexCoord3i",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord3i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord3i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord3iv": {
      "name": "_glTexCoord3iv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord3iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord3iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord3s": {
      "name": "_glTexCoord3s",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord3s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord3s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord3sv": {
      "name": "_glTexCoord3sv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord3sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord3sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord4d": {
      "name": "_glTexCoord4d",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord4d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord4d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord4dv": {
      "name": "_glTexCoord4dv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord4dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord4dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord4f": {
      "name": "_glTexCoord4f",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord4f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord4f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord4fv": {
      "name": "_glTexCoord4fv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord4fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord4fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord4i": {
      "name": "_glTexCoord4i",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord4i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord4i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord4iv": {
      "name": "_glTexCoord4iv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord4iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord4iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord4s": {
      "name": "_glTexCoord4s",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord4s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord4s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoord4sv": {
      "name": "_glTexCoord4sv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the current texture coordinates.",
      "syntax": "_glTexCoord4sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoord4sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexCoordPointer": {
      "name": "_glTexCoordPointer",
      "type": "opengl",
      "category": "opengl",
      "description": "defines an array of texture coordinates.",
      "syntax": "_glTexCoordPointer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexCoordPointer",
      "related": [
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexEnvf": {
      "name": "_glTexEnvf",
      "type": "opengl",
      "category": "opengl",
      "description": "sets a texture environment parameter.",
      "syntax": "_glTexEnvf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexEnvf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexEnvfv": {
      "name": "_glTexEnvfv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets a texture environment parameter.",
      "syntax": "_glTexEnvfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexEnvfv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexEnvi": {
      "name": "_glTexEnvi",
      "type": "opengl",
      "category": "opengl",
      "description": "sets a texture environment parameter.",
      "syntax": "_glTexEnvi [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexEnvi",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexEnviv": {
      "name": "_glTexEnviv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets a texture environment parameter.",
      "syntax": "_glTexEnviv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexEnviv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexGend": {
      "name": "_glTexGend",
      "type": "opengl",
      "category": "opengl",
      "description": "controls the generation of texture coordinates.",
      "syntax": "_glTexGend [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexGend",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexGendv": {
      "name": "_glTexGendv",
      "type": "opengl",
      "category": "opengl",
      "description": "controls the generation of texture coordinates.",
      "syntax": "_glTexGendv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexGendv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexGenf": {
      "name": "_glTexGenf",
      "type": "opengl",
      "category": "opengl",
      "description": "controls the generation of texture coordinates.",
      "syntax": "_glTexGenf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexGenf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexGenfv": {
      "name": "_glTexGenfv",
      "type": "opengl",
      "category": "opengl",
      "description": "controls the generation of texture coordinates.",
      "syntax": "_glTexGenfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexGenfv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexGeni": {
      "name": "_glTexGeni",
      "type": "opengl",
      "category": "opengl",
      "description": "controls the generation of texture coordinates.",
      "syntax": "_glTexGeni [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexGeni",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexGeniv": {
      "name": "_glTexGeniv",
      "type": "opengl",
      "category": "opengl",
      "description": "controls the generation of texture coordinates.",
      "syntax": "_glTexGeniv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexGeniv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexImage1D": {
      "name": "_glTexImage1D",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a one-dimensional texture image.",
      "syntax": "_glTexImage1D [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexImage1D",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexImage2D": {
      "name": "_glTexImage2D",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a two-dimensional texture image.",
      "syntax": "_glTexImage2D [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexImage2D",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexParameterf": {
      "name": "_glTexParameterf",
      "type": "opengl",
      "category": "opengl",
      "description": "sets texture parameters.",
      "syntax": "_glTexParameterf [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexParameterf",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexParameterfv": {
      "name": "_glTexParameterfv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets texture parameters.",
      "syntax": "_glTexParameterfv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexParameterfv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexParameteri": {
      "name": "_glTexParameteri",
      "type": "opengl",
      "category": "opengl",
      "description": "sets texture parameters.",
      "syntax": "_glTexParameteri [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexParameteri",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexParameteriv": {
      "name": "_glTexParameteriv",
      "type": "opengl",
      "category": "opengl",
      "description": "sets texture parameters.",
      "syntax": "_glTexParameteriv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexParameteriv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexSubImage1D": {
      "name": "_glTexSubImage1D",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a portion of an existing one-dimensional texture image.",
      "syntax": "_glTexSubImage1D [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexSubImage1D",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTexSubImage2D": {
      "name": "_glTexSubImage2D",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a portion of an existing one-dimensional texture image.",
      "syntax": "_glTexSubImage2D [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTexSubImage2D",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTranslated": {
      "name": "_glTranslated",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by a translation matrix.",
      "syntax": "_glTranslated [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTranslated",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glTranslatef": {
      "name": "_glTranslatef",
      "type": "opengl",
      "category": "opengl",
      "description": "multiplies the current matrix by a translation matrix.",
      "syntax": "_glTranslatef [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glTranslatef",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex2d": {
      "name": "_glVertex2d",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex2d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex2d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex2dv": {
      "name": "_glVertex2dv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex2dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex2dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex2f": {
      "name": "_glVertex2f",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex2f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex2f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex2fv": {
      "name": "_glVertex2fv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex2fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex2fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex2i": {
      "name": "_glVertex2i",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex2i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex2i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex2iv": {
      "name": "_glVertex2iv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex2iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex2iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex2s": {
      "name": "_glVertex2s",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex2s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex2s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex2sv": {
      "name": "_glVertex2sv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex2sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex2sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex3d": {
      "name": "_glVertex3d",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex3d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex3d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex3dv": {
      "name": "_glVertex3dv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex3dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex3dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex3f": {
      "name": "_glVertex3f",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex3f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex3f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex3fv": {
      "name": "_glVertex3fv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex3fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex3fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex3i": {
      "name": "_glVertex3i",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex3i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex3i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex3iv": {
      "name": "_glVertex3iv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex3iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex3iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex3s": {
      "name": "_glVertex3s",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex3s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex3s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex3sv": {
      "name": "_glVertex3sv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex3sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex3sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex4d": {
      "name": "_glVertex4d",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex4d [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex4d",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex4dv": {
      "name": "_glVertex4dv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex4dv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex4dv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex4f": {
      "name": "_glVertex4f",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex4f [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex4f",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex4fv": {
      "name": "_glVertex4fv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex4fv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex4fv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex4i": {
      "name": "_glVertex4i",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex4i [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex4i",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex4iv": {
      "name": "_glVertex4iv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex4iv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex4iv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex4s": {
      "name": "_glVertex4s",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex4s [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex4s",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertex4sv": {
      "name": "_glVertex4sv",
      "type": "opengl",
      "category": "opengl",
      "description": "specifies a vertex.",
      "syntax": "_glVertex4sv [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertex4sv",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glVertexPointer": {
      "name": "_glVertexPointer",
      "type": "opengl",
      "category": "opengl",
      "description": "defines an array of vertex data.",
      "syntax": "_glVertexPointer [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glVertexPointer",
      "related": [
        "DATA",
        "array",
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "_glViewport": {
      "name": "_glViewport",
      "type": "opengl",
      "category": "opengl",
      "description": "sets the viewport.",
      "syntax": "_glViewport [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_glViewport",
      "related": [
        "_glBegin",
        "_glEnd",
        "SUB _GL"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "opengl",
        "opengl"
      ]
    },
    "; Semicolon": {
      "name": "; Semicolon",
      "type": "statement",
      "category": "statements",
      "description": "after a PRINT stops invisible cursor at end of printed value. Can prevent screen rolling. A Semicolon after the INPUT prompt text will display a question mark after the text.",
      "syntax": "; Semicolon [parameters]",
      "parameters": [],
      "returns": null,
      "example": "; Semicolon",
      "related": [
        "END",
        "INPUT",
        "PRINT",
        "SCREEN",
        "SCREEN",
        "screen",
        "Semicolon"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    ", Comma": {
      "name": ", Comma",
      "type": "statement",
      "category": "statements",
      "description": "after a PRINT tabs invisible cursor past end of printed value. After the INPUT prompt text a comma displays no Question mark.",
      "syntax": ", Comma [parameters]",
      "parameters": [],
      "returns": null,
      "example": ", Comma",
      "related": [
        "END",
        "INPUT",
        "PRINT",
        "comma"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "\" Quotation mark": {
      "name": "\" Quotation mark",
      "type": "statement",
      "category": "statements",
      "description": "designates the ends of a literal STRING value. Use CHR$(34) to insert quotes in a text STRING.",
      "syntax": "\" Quotation mark [parameters]",
      "parameters": [],
      "returns": null,
      "example": "\" Quotation mark",
      "related": [
        "CHR$",
        "STRING",
        "TO",
        "string",
        "ENDs"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "? Question mark": {
      "name": "? Question mark",
      "type": "statement",
      "category": "statements",
      "description": "is a shortcut substitute for the PRINT keyword. Will change to PRINT when cursor leaves the code line.",
      "syntax": "? Question mark [parameters]",
      "parameters": [],
      "returns": null,
      "example": "? Question mark",
      "related": [
        "LINE",
        "PRINT",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "' Apostrophe": {
      "name": "' Apostrophe",
      "type": "legacy",
      "category": "legacy",
      "description": "ignores a line of code or program comment and must be used before a legacy QBasic Metacommand. Same as using REM.",
      "syntax": "' Apostrophe [parameters]",
      "parameters": [],
      "returns": null,
      "example": "' Apostrophe",
      "related": [
        "AND",
        "AND",
        "AS",
        "LINE",
        "OR",
        "OR",
        "REM",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "legacy",
        "legacy"
      ]
    },
    ": Colons": {
      "name": ": Colons",
      "type": "statement",
      "category": "statements",
      "description": "can be used to separate two procedure statements on one code line.",
      "syntax": ": Colons [parameters]",
      "parameters": [],
      "returns": null,
      "example": ": Colons",
      "related": [
        "LINE",
        "TO",
        "ON"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "$ Dollar sign": {
      "name": "$ Dollar sign",
      "type": "metacommand",
      "category": "metacommands",
      "description": "used as prefix denotes a legacy QBasic Metacommand, used as suffix it denotes a STRING variable.",
      "syntax": "'$ Dollar sign: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$ Dollar sign:",
      "related": [
        "AS",
        "STRING",
        "string",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "( ) Parenthesis": {
      "name": "( ) Parenthesis",
      "type": "statement",
      "category": "statements",
      "description": "enclose a math or conditional procedure order, SUB or FUNCTION parameters or to pass by value.",
      "syntax": "( ) Parenthesis [parameters]",
      "parameters": [],
      "returns": null,
      "example": "( ) Parenthesis",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "SUB",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "+ Plus": {
      "name": "+ Plus",
      "type": "statement",
      "category": "statements",
      "description": "concatenation operator MUST be used to combine literal string values in a variable definition.",
      "syntax": "+ Plus [parameters]",
      "parameters": [],
      "returns": null,
      "example": "+ Plus",
      "related": [
        "STRING",
        "TO",
        "string",
        "concatenation"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "_ Underscore": {
      "name": "_ Underscore",
      "type": "statement",
      "category": "statements",
      "description": "can be used to continue a line of code to the next program line in QB64.",
      "syntax": "_ Underscore [parameters]",
      "parameters": [],
      "returns": null,
      "example": "_ Underscore",
      "related": [
        "LINE",
        "NEXT",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "$ STRING": {
      "name": "$ STRING",
      "type": "metacommand",
      "category": "metacommands",
      "description": "text character type: 1 byte",
      "syntax": "'$ STRING: [parameters]",
      "parameters": [],
      "returns": null,
      "example": "'$ STRING:",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "metacommand",
        "metacommands"
      ]
    },
    "! SINGLE": {
      "name": "! SINGLE",
      "type": "statement",
      "category": "statements",
      "description": "floating decimal point numerical type (4 bytes)",
      "syntax": "! SINGLE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "! SINGLE",
      "related": [
        "POINT",
        "TYPE",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN",
        "_ACOS"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "# DOUBLE": {
      "name": "# DOUBLE",
      "type": "statement",
      "category": "statements",
      "description": "floating decimal point numerical type (8 bytes)",
      "syntax": "# DOUBLE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "# DOUBLE",
      "related": [
        "POINT",
        "TYPE",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP",
        "WHILE...WEND",
        "SELECT CASE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "## _FLOAT": {
      "name": "## _FLOAT",
      "type": "statement",
      "category": "statements",
      "description": "QB64 decimal point numerical type (32 bytes)",
      "syntax": "## _FLOAT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "## _FLOAT",
      "related": [
        "POINT",
        "TYPE"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "~ _UNSIGNED": {
      "name": "~ _UNSIGNED",
      "type": "statement",
      "category": "statements",
      "description": "QB64 whole positive numerical type when it precedes the 6 numerical suffixes below:",
      "syntax": "~ _UNSIGNED [parameters]",
      "parameters": [],
      "returns": null,
      "example": "~ _UNSIGNED",
      "related": [
        "TYPE",
        "whole"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "% INTEGER": {
      "name": "% INTEGER",
      "type": "statement",
      "category": "statements",
      "description": "whole numerical type (2 bytes)",
      "syntax": "% INTEGER [parameters]",
      "parameters": [],
      "returns": null,
      "example": "% INTEGER",
      "related": [
        "TYPE",
        "whole"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "& LONG": {
      "name": "& LONG",
      "type": "statement",
      "category": "statements",
      "description": "whole numerical type (4 bytes}",
      "syntax": "& LONG [parameters]",
      "parameters": [],
      "returns": null,
      "example": "& LONG",
      "related": [
        "TYPE",
        "whole"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "&& _INTEGER64": {
      "name": "&& _INTEGER64",
      "type": "statement",
      "category": "statements",
      "description": "QB64 whole numerical type (8 bytes)",
      "syntax": "&& _INTEGER64 [parameters]",
      "parameters": [],
      "returns": null,
      "example": "&& _INTEGER64",
      "related": [
        "TYPE",
        "whole"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "` _BIT": {
      "name": "` _BIT",
      "type": "statement",
      "category": "statements",
      "description": "QB64 whole numerical type (1 bit) (Key below tilde (~) or CHR$(96))",
      "syntax": "` _BIT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "` _BIT",
      "related": [
        "CHR$",
        "OR",
        "OR",
        "TYPE",
        "whole"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "%% _BYTE": {
      "name": "%% _BYTE",
      "type": "statement",
      "category": "statements",
      "description": "QB64 whole numerical type (1 byte)",
      "syntax": "%% _BYTE [parameters]",
      "parameters": [],
      "returns": null,
      "example": "%% _BYTE",
      "related": [
        "TYPE",
        "whole"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "%& _OFFSET": {
      "name": "%& _OFFSET",
      "type": "statement",
      "category": "statements",
      "description": "QB64 whole numerical pointer address type (any byte size required)",
      "syntax": "%& _OFFSET [parameters]",
      "parameters": [],
      "returns": null,
      "example": "%& _OFFSET",
      "related": [
        "TYPE",
        "whole"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "&B Binary": {
      "name": "&B Binary",
      "type": "statement",
      "category": "statements",
      "description": "Base 2: Digits 0 or 1 [QB64]",
      "syntax": "&B Binary [parameters]",
      "parameters": [],
      "returns": null,
      "example": "&B Binary",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "&O Octal": {
      "name": "&O Octal",
      "type": "statement",
      "category": "statements",
      "description": "Base 8: Digits 0 to 7",
      "syntax": "&O Octal [parameters]",
      "parameters": [],
      "returns": null,
      "example": "&O Octal",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "&H Hexadecimal": {
      "name": "&H Hexadecimal",
      "type": "statement",
      "category": "statements",
      "description": "Base 16: Digits 0 to F",
      "syntax": "&H Hexadecimal [parameters]",
      "parameters": [],
      "returns": null,
      "example": "&H Hexadecimal",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "+ Addition": {
      "name": "+ Addition",
      "type": "statement",
      "category": "statements",
      "description": "operator or sign",
      "syntax": "+ Addition [parameters]",
      "parameters": [],
      "returns": null,
      "example": "+ Addition",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "- Subtraction": {
      "name": "- Subtraction",
      "type": "statement",
      "category": "statements",
      "description": "operator or sign",
      "syntax": "- Subtraction [parameters]",
      "parameters": [],
      "returns": null,
      "example": "- Subtraction",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "* Multiplication": {
      "name": "* Multiplication",
      "type": "statement",
      "category": "statements",
      "description": "operator",
      "syntax": "* Multiplication [parameters]",
      "parameters": [],
      "returns": null,
      "example": "* Multiplication",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "/ Division": {
      "name": "/ Division",
      "type": "statement",
      "category": "statements",
      "description": "operator",
      "syntax": "/ Division [parameters]",
      "parameters": [],
      "returns": null,
      "example": "/ Division",
      "related": [
        "POINT"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "\\ Integer division": {
      "name": "\\ Integer division",
      "type": "statement",
      "category": "statements",
      "description": "operator",
      "syntax": "\\ Integer division [parameters]",
      "parameters": [],
      "returns": null,
      "example": "\\ Integer division",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "^ Exponential": {
      "name": "^ Exponential",
      "type": "statement",
      "category": "statements",
      "description": "operator",
      "syntax": "^ Exponential [parameters]",
      "parameters": [],
      "returns": null,
      "example": "^ Exponential",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "MOD Integer Remainder division": {
      "name": "MOD Integer Remainder division",
      "type": "statement",
      "category": "statements",
      "description": "operator",
      "syntax": "MOD Integer Remainder division [parameters]",
      "parameters": [],
      "returns": null,
      "example": "MOD Integer Remainder division",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "Historic": {
      "name": "Historic",
      "type": "statement",
      "category": "statements",
      "description": "B C D F G I P S T",
      "syntax": "Historic [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Historic",
      "related": [],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ON": {
      "name": "ON",
      "type": "statement",
      "category": "statements",
      "description": "ON creates event procedure calls or enables event trapping.",
      "syntax": "ON [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ON",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "Keyword not supported in Linux or macOS versions": {
      "name": "Keyword not supported in Linux or macOS versions",
      "type": "statement",
      "category": "statements",
      "description": "QB64 is meant to be compatible with QB 4.5 or lower versions. PDS (7.1) is not supported. The keywords listed below are currently not supported in QB64. However, older code that uses these keywords won't generate errors, as these are ignored by the compiler.",
      "syntax": "Keyword not supported in Linux or macOS versions [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Keyword not supported in Linux or macOS versions",
      "related": [
        "AS",
        "NOT",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "arc tangent": {
      "name": "arc tangent",
      "type": "function",
      "category": "functions",
      "description": "The ATN or arctangent function returns the angle in radians of a numerical tangent value.",
      "syntax": "result = arc tangent([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = arc tangent()",
      "related": [
        "ATN",
        "FUNCTION",
        "OR",
        "OR",
        "tangent"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "Metacommands overview": {
      "name": "Metacommands overview",
      "type": "statement",
      "category": "statements",
      "description": "Metacommands are commands that start with dollar sign ($). Those commands usually switch the program between different operation modes/behavior or provide extended functionality.",
      "syntax": "Metacommands overview [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Metacommands overview",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "COSine": {
      "name": "COSine",
      "type": "function",
      "category": "functions",
      "description": "The COS function returns the horizontal component or the cosine of an angle measured in radians.",
      "syntax": "result = COSine([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = COSine()",
      "related": [
        "COS",
        "FUNCTION",
        "OR",
        "OR",
        "SIN",
        "TAN",
        "ATN",
        "_ASIN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "Console Windows": {
      "name": "Console Windows",
      "type": "statement",
      "category": "statements",
      "description": "QB64 has console window support using the following QB64 Metacommand or keyword:",
      "syntax": "Console Windows [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Console Windows",
      "related": [
        "OR",
        "OR",
        "WINDOW",
        "Metacommand"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "Keywords currently not supported by QB64": {
      "name": "Keywords currently not supported by QB64",
      "type": "statement",
      "category": "statements",
      "description": "QB64 is meant to be compatible with QB 4.5 or lower versions. PDS (7.1) is not supported. The keywords listed below are currently not supported in QB64. However, older code that uses these keywords won't generate errors, as these are ignored by the compiler.",
      "syntax": "Keywords currently not supported by QB64 [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Keywords currently not supported by QB64",
      "related": [
        "AS",
        "NOT",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "alpha": {
      "name": "alpha",
      "type": "function",
      "category": "functions",
      "description": "The _ALPHA function returns the alpha channel transparency level of a color value used on a screen page or image.",
      "syntax": "result = alpha([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = alpha()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "ON",
        "ALPHA"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "Frequently Asked Questions about QB64": {
      "name": "Frequently Asked Questions about QB64",
      "type": "statement",
      "category": "statements",
      "description": "As with everything else, this list will be updated to correspond to new progress of the QB64 language, so make sure that you are using the latest version of QB64 or in our case QB64-PE, which stands for QB64 Phoenix Edition. Please note that it may take a short time to update this list.",
      "syntax": "Frequently Asked Questions about QB64 [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Frequently Asked Questions about QB64",
      "related": [
        "AS",
        "CASE",
        "ELSE",
        "LIST",
        "OR",
        "OR",
        "TO"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "automatic display": {
      "name": "automatic display",
      "type": "statement",
      "category": "statements",
      "description": "The _AUTODISPLAY statement enables the automatic display of the screen image changes previously disabled by _DISPLAY.",
      "syntax": "automatic display [parameters]",
      "parameters": [],
      "returns": null,
      "example": "automatic display",
      "related": [
        "SCREEN",
        "SCREEN",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "string": {
      "name": "string",
      "type": "statement",
      "category": "statements",
      "description": "STRING variables or literal values are one byte per character length text or ASCII characters.",
      "syntax": "string [parameters]",
      "parameters": [],
      "returns": null,
      "example": "string",
      "related": [
        "OR",
        "OR",
        "STRING"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "boolean": {
      "name": "boolean",
      "type": "function",
      "category": "functions",
      "description": "Boolean statements are evaluations that return true (-1) or false (0) values. This are for instance the Relational Operations, but also functions such as _FILEEXISTS, EOF, _SCREENEXISTS etc. return those values when checking for certain conditions. The results of those evaluations or function calls can be used in other mathematical or logical operations.",
      "syntax": "result = boolean([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = boolean()",
      "related": [
        "AS",
        "EOF",
        "FUNCTION",
        "OR",
        "OR",
        "RETURN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "font": {
      "name": "font",
      "type": "statement",
      "category": "statements",
      "description": "The _FONT statement sets the current _LOADFONT function font handle to be used by PRINT.",
      "syntax": "font [parameters]",
      "parameters": [],
      "returns": null,
      "example": "font",
      "related": [
        "FUNCTION",
        "PRINT",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "array": {
      "name": "array",
      "type": "statement",
      "category": "statements",
      "description": "Arrays are simply variables with a number of elements that can each hold data in memory. To designate a certain element, integers denote the value's position in memory. Don't let talk about memory scare you! Basic does all of the work for you just by using the simple commands in this tutorial. Besides that, you have already been using memory since you created your first variable!",
      "syntax": "array [parameters]",
      "parameters": [],
      "returns": null,
      "example": "array",
      "related": [
        "DATA",
        "LET",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "MEM": {
      "name": "MEM",
      "type": "statement",
      "category": "statements",
      "description": "The _MEM variable type can be used when working with memory blocks. It has no variable type suffix.",
      "syntax": "MEM [parameters]",
      "parameters": [],
      "returns": null,
      "example": "MEM",
      "related": [
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DEVICE$": {
      "name": "DEVICE$",
      "type": "function",
      "category": "functions",
      "description": "The _DEVICE$ function returns a STRING value holding the controller type, name and input types of the input devices on a computer.",
      "syntax": "string_result = DEVICE$([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "text$ = DEVICE$()",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "INPUT",
        "NAME",
        "STRING",
        "TYPE",
        "ON"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "ALPHA": {
      "name": "ALPHA",
      "type": "function",
      "category": "functions",
      "description": "The _ALPHA function returns the alpha channel transparency level of a color value used on a screen page or image.",
      "syntax": "result = ALPHA([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = ALPHA()",
      "related": [
        "COLOR",
        "FUNCTION",
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "ON",
        "alpha"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "Unicode": {
      "name": "Unicode",
      "type": "statement",
      "category": "statements",
      "description": "CP437 is the character set of the original IBM PC. It is also known as DOS-US, OEM-US or IBM Extended character set. They also may erroneously be referred to as the OEM font, Extended ASCII or High ASCII.",
      "syntax": "Unicode [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Unicode",
      "related": [
        "AS",
        "OR",
        "OR",
        "TO",
        "font"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "DECLARE LIBRARY": {
      "name": "DECLARE LIBRARY",
      "type": "statement",
      "category": "statements",
      "description": "The DECLARE LIBRARY declaration allows for the utilization of external library SUB and FUNCTION procedures.",
      "syntax": "DECLARE LIBRARY [parameters]",
      "parameters": [],
      "returns": null,
      "example": "DECLARE LIBRARY",
      "related": [
        "AND",
        "AND",
        "FUNCTION",
        "SUB"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "circle": {
      "name": "circle",
      "type": "statement",
      "category": "statements",
      "description": "The CIRCLE statement is used in graphic SCREEN modes to create circles, arcs or ellipses.",
      "syntax": "circle [parameters]",
      "parameters": [],
      "returns": null,
      "example": "circle",
      "related": [
        "CIRCLE",
        "OR",
        "OR",
        "SCREEN",
        "SCREEN",
        "TO",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "IF": {
      "name": "IF",
      "type": "statement",
      "category": "statements",
      "description": "IF...THEN statements make boolean (true or false) evaluations to automate program decision making.",
      "syntax": "IF [parameters]",
      "parameters": [],
      "returns": null,
      "example": "IF",
      "related": [
        "OR",
        "OR",
        "THEN",
        "TO",
        "boolean",
        "IF...THEN",
        "FOR...NEXT",
        "DO...LOOP"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "tangent": {
      "name": "tangent",
      "type": "function",
      "category": "functions",
      "description": "The TAN function returns the ratio of SINe to COSine or tangent value of an angle measured in radians.",
      "syntax": "result = tangent([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = tangent()",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "TAN",
        "TO",
        "COSine",
        "SINe"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "Microsoft Binary Format": {
      "name": "Microsoft Binary Format",
      "type": "statement",
      "category": "statements",
      "description": "The MKDMBF$ function encodes a double-precision IEEE number to a string value in the Microsoft Binary format.",
      "syntax": "Microsoft Binary Format [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Microsoft Binary Format",
      "related": [
        "BINARY",
        "FUNCTION",
        "MKDMBF$",
        "STRING",
        "TO",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "SINe": {
      "name": "SINe",
      "type": "function",
      "category": "functions",
      "description": "The SIN function returns the vertical component or sine of an angle measured in radians.",
      "syntax": "result = SINe([parameters])",
      "parameters": [],
      "returns": "VALUE",
      "example": "value = SINe()",
      "related": [
        "FUNCTION",
        "OR",
        "OR",
        "SIN",
        "COS",
        "TAN",
        "ATN",
        "_ASIN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "function",
        "functions"
      ]
    },
    "CHAINed": {
      "name": "CHAINed",
      "type": "statement",
      "category": "statements",
      "description": "CHAIN is used to change seamlessly from one module to another one in a program.",
      "syntax": "CHAINed [parameters]",
      "parameters": [],
      "returns": null,
      "example": "CHAINed",
      "related": [
        "CHAIN",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "screen": {
      "name": "screen",
      "type": "statement",
      "category": "statements",
      "description": "The SCREEN statement sets the video display mode and size of the program window's workspace.",
      "syntax": "screen [parameters]",
      "parameters": [],
      "returns": null,
      "example": "screen",
      "related": [
        "AND",
        "AND",
        "SCREEN",
        "SCREEN"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "STRINGs": {
      "name": "STRINGs",
      "type": "statement",
      "category": "statements",
      "description": "STRING variables or literal values are one byte per character length text or ASCII characters.",
      "syntax": "STRINGs [parameters]",
      "parameters": [],
      "returns": null,
      "example": "STRINGs",
      "related": [
        "OR",
        "OR",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "segment": {
      "name": "segment",
      "type": "statement",
      "category": "statements",
      "description": "The memory segment is the hexadecimal byte address in relation to a segment register.",
      "syntax": "segment [parameters]",
      "parameters": [],
      "returns": null,
      "example": "segment",
      "related": [
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ERROR code": {
      "name": "ERROR code",
      "type": "legacy",
      "category": "legacy",
      "description": "This page lists all the error codes defined in QB64 that can occur in a program when running. Unless overridden with an ON ERROR handler, these result in a dialog box appearing. Due to legacy holdovers from previous BASIC dialects, not all of these errors may actually occur in a program (unless manually triggered with ERROR).",
      "syntax": "ERROR code [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ERROR code",
      "related": [
        "ERROR",
        "NOT",
        "TO",
        "ON"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "legacy",
        "legacy"
      ]
    },
    "opened": {
      "name": "opened",
      "type": "statement",
      "category": "statements",
      "description": "The OPEN statement is used to open a file or COM serial communications port for program input or output.",
      "syntax": "opened [parameters]",
      "parameters": [],
      "returns": null,
      "example": "opened",
      "related": [
        "INPUT",
        "OPEN",
        "OR",
        "OR",
        "OUTPUT",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "ENDs": {
      "name": "ENDs",
      "type": "statement",
      "category": "statements",
      "description": "The END statement terminates a program without an immediate exit or ends a procedure or statement block.",
      "syntax": "ENDs [parameters]",
      "parameters": [],
      "returns": null,
      "example": "ENDs",
      "related": [
        "END",
        "EXIT",
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "RESUME NEXT": {
      "name": "RESUME NEXT",
      "type": "statement",
      "category": "statements",
      "description": "The RESUME statement is used with NEXT or a line number or label in an error handling routine.",
      "syntax": "RESUME NEXT [parameters]",
      "parameters": [],
      "returns": null,
      "example": "RESUME NEXT",
      "related": [
        "ERROR",
        "LINE",
        "NEXT",
        "OR",
        "OR",
        "RESUME"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "dynamic": {
      "name": "dynamic",
      "type": "statement",
      "category": "statements",
      "description": "The $DYNAMIC metacommand allows the creation of dynamic (resizable) arrays.",
      "syntax": "dynamic [parameters]",
      "parameters": [],
      "returns": null,
      "example": "dynamic",
      "related": [
        "$DYNAMIC",
        "Metacommand"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "strings": {
      "name": "strings",
      "type": "statement",
      "category": "statements",
      "description": "STRING variables or literal values are one byte per character length text or ASCII characters.",
      "syntax": "strings [parameters]",
      "parameters": [],
      "returns": null,
      "example": "strings",
      "related": [
        "OR",
        "OR",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "whole": {
      "name": "whole",
      "type": "statement",
      "category": "statements",
      "description": "INTEGER is a 2-byte number type definition that can hold whole numerical values.",
      "syntax": "whole [parameters]",
      "parameters": [],
      "returns": null,
      "example": "whole",
      "related": [
        "INTEGER",
        "TYPE"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "Metacommand": {
      "name": "Metacommand",
      "type": "statement",
      "category": "statements",
      "description": "Metacommands are commands that start with dollar sign ($). Those commands usually switch the program between different operation modes/behavior or provide extended functionality.",
      "syntax": "Metacommand [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Metacommand",
      "related": [
        "OR",
        "OR"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "Relational Operations": {
      "name": "Relational Operations",
      "type": "statement",
      "category": "statements",
      "description": "QB64 supports several relational operations, which are binary operations that test numeric or string values and return an INTEGER value representing a boolean true (-1) or false (0) result. These operations are primarily used in expressions where a condition is required, such as the IF...THEN statement.",
      "syntax": "Relational Operations [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Relational Operations",
      "related": [
        "AND",
        "AND",
        "AS",
        "BINARY",
        "INTEGER",
        "OR",
        "OR",
        "RETURN"
      ],
      "version": "QB64",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "concatenation": {
      "name": "concatenation",
      "type": "statement",
      "category": "statements",
      "description": "Concatenation is a process where literal or variable STRING values are combined using the + operator.",
      "syntax": "concatenation [parameters]",
      "parameters": [],
      "returns": null,
      "example": "concatenation",
      "related": [
        "OR",
        "OR",
        "STRING",
        "string"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "Question mark": {
      "name": "Question mark",
      "type": "statement",
      "category": "statements",
      "description": "A question mark can be used as a substitute shortcut to typing PRINT when creating code.",
      "syntax": "Question mark [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Question mark",
      "related": [
        "AS",
        "PRINT",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "comma": {
      "name": "comma",
      "type": "statement",
      "category": "statements",
      "description": "The comma is used to TAB the cursor after a PRINT statement's text to tab append another printed value.",
      "syntax": "comma [parameters]",
      "parameters": [],
      "returns": null,
      "example": "comma",
      "related": [
        "APPEND",
        "PRINT",
        "TAB",
        "TO"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "Semicolon": {
      "name": "Semicolon",
      "type": "statement",
      "category": "statements",
      "description": "The semicolon is used in a PRINT statement to stop the screen print cursor immediately after the printed value.",
      "syntax": "Semicolon [parameters]",
      "parameters": [],
      "returns": null,
      "example": "Semicolon",
      "related": [
        "PRINT",
        "SCREEN",
        "SCREEN",
        "STOP",
        "TO",
        "screen"
      ],
      "version": "QBasic",
      "availability": "All platforms",
      "tags": [
        "statement",
        "statements"
      ]
    },
    "VARIABLE_TYPES_COMPREHENSIVE": {
      "name": "VARIABLE_TYPES_COMPREHENSIVE",
      "type": "reference",
      "category": "types",
      "description": "Comprehensive reference for all QB64PE variable types, sigils, memory sizes, and patterns",
      "syntax": "DIM variable AS type | DIM variableSigil",
      "parameters": [],
      "returns": null,
      "example": "DIM name$ AS STRING, DIM count% AS INTEGER, DIM AS LONG value1, value2",
      "related": [
        "DIM",
        "_UNSIGNED",
        "_DEFINE",
        "DEFINT",
        "DEFSNG",
        "DEFDBL",
        "DEFSTR",
        "DEFLNG"
      ],
      "version": "QB64PE",
      "availability": "All platforms",
      "tags": [
        "types",
        "variables",
        "memory",
        "sigils"
      ],
      "extended_info": {
        "type_sigils": {
          "$": {
            "type": "STRING",
            "size_bytes": "variable",
            "range": "ASCII 0-255 characters",
            "example": "name$",
            "memory_usage": "length + string overhead"
          },
          "%": {
            "type": "INTEGER", 
            "size_bytes": 2,
            "range": "-32,768 to 32,767",
            "unsigned_range": "0 to 65,535",
            "example": "count%",
            "unsigned_example": "uCount~%"
          },
          "&": {
            "type": "LONG",
            "size_bytes": 4,
            "range": "-2,147,483,648 to 2,147,483,647",
            "unsigned_range": "0 to 4,294,967,295",
            "example": "bigNum&",
            "unsigned_example": "uBig~&"
          },
          "!": {
            "type": "SINGLE",
            "size_bytes": 4,
            "range": "±3.4E±38 (7 digits precision)",
            "example": "price!",
            "note": "Floating-point type"
          },
          "#": {
            "type": "DOUBLE",
            "size_bytes": 8,
            "range": "±1.7E±308 (15 digits precision)",
            "example": "precise#",
            "note": "Double precision floating-point"
          },
          "##": {
            "type": "_FLOAT",
            "size_bytes": 32,
            "range": "Maximum floating-point precision",
            "example": "maxFloat##",
            "note": "QB64PE maximum precision type"
          },
          "&&": {
            "type": "_INTEGER64",
            "size_bytes": 8,
            "range": "-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807",
            "unsigned_range": "0 to 18,446,744,073,709,551,615",
            "example": "huge&&",
            "unsigned_example": "uHuge~&&"
          },
          "%%": {
            "type": "_BYTE",
            "size_bytes": 1,
            "range": "-128 to 127",
            "unsigned_range": "0 to 255",
            "example": "small%%",
            "unsigned_example": "uSmall~%%"
          },
          "`": {
            "type": "_BIT",
            "size_bytes": 0.125,
            "range": "0 or -1 (signed)",
            "unsigned_range": "0 or 1",
            "example": "flag`",
            "unsigned_example": "uFlag~`",
            "note": "Backtick character (CHR$(96))"
          },
          "%&": {
            "type": "_OFFSET",
            "size_bytes": "platform-dependent (4 or 8)",
            "range": "Memory address pointer",
            "example": "address%&",
            "unsigned_example": "uAddress~%&",
            "note": "Used for memory operations"
          }
        },
        "dim_patterns": {
          "single_variable": "DIM variable AS type",
          "multiple_same_type": "DIM AS type var1, var2, var3",
          "multiple_mixed_types": "DIM AS type1 var1, AS type2 var2, AS type3 var3",
          "arrays_static": "DIM array(size) AS type",
          "arrays_dynamic": "DIM array() AS type",
          "arrays_multi_dim": "DIM array(x, y, z) AS type",
          "arrays_with_bounds": "DIM array(0 TO 10, 1 TO 20) AS type",
          "fixed_length_strings": "DIM variable AS STRING * length",
          "examples": [
            "DIM AS INTEGER foo, bar, baz",
            "DIM AS LONG count, total, sum",
            "DIM AS DOUBLE x, y, z",
            "DIM AS STRING name, address, city",
            "DIM AS _UNSIGNED INTEGER width, height",
            "DIM AS _UNSIGNED LONG largeNumber",
            "DIM numbers(10) AS INTEGER",
            "DIM names(100) AS STRING * 50",
            "DIM AS _UNSIGNED _BYTE red, green, blue",
            "DIM AS _FLOAT preciseValue"
          ]
        },
        "unsigned_convention": {
          "sigil_method": "Use ~ before type sigil (e.g., ~%, ~&, ~&&)",
          "keyword_method": "Use _UNSIGNED AS keyword (e.g., AS _UNSIGNED INTEGER)",
          "benefits": "Doubles positive range, useful for counters and indices",
          "examples": {
            "sigil_form": [
              "DIM positiveCount~%",
              "DIM largeValue~&",
              "DIM hugeNumber~&&",
              "DIM byteValue~%%",
              "DIM bitFlag~`"
            ],
            "keyword_form": [
              "DIM AS _UNSIGNED INTEGER positiveCount",
              "DIM AS _UNSIGNED LONG largeValue",
              "DIM AS _UNSIGNED _INTEGER64 hugeNumber",
              "DIM AS _UNSIGNED _BYTE byteValue",
              "DIM AS _UNSIGNED _BIT bitFlag"
            ]
          }
        },
        "memory_calculations": {
          "formula": "Array memory = elements × type_size_bytes",
          "examples": {
            "_BYTE array(1000)": "1,000 bytes",
            "INTEGER array(1000)": "2,000 bytes",
            "LONG array(1000)": "4,000 bytes",
            "DOUBLE array(1000)": "8,000 bytes",
            "_INTEGER64 array(1000)": "8,000 bytes",
            "_FLOAT array(1000)": "32,000 bytes"
          },
          "optimization_tips": [
            "Use smaller types when range permits",
            "Consider unsigned types for positive-only values",
            "_BYTE arrays use 8x less memory than _INTEGER64 arrays",
            "STRING * fixed length can be more efficient than variable strings"
          ]
        },
        "performance_characteristics": {
          "fastest": ["_BYTE", "_UNSIGNED _BYTE", "INTEGER", "_UNSIGNED INTEGER"],
          "standard": ["LONG", "_UNSIGNED LONG", "SINGLE"],
          "precision": ["DOUBLE", "_INTEGER64", "_UNSIGNED _INTEGER64"], 
          "slowest": ["_FLOAT"],
          "memory_efficient": ["_BIT", "_BYTE", "INTEGER"],
          "notes": "Smaller types improve cache performance but may have conversion overhead"
        }
      }
    }
  }
}